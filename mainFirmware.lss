
mainFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000003f2  00802000  00802000  00002816  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000745  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004b47  00000000  00000000  00002f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000488  00000000  00000000  00007ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00002b7c  00000000  00000000  00007f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000560  00000000  00000000  0000aac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002d44  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001b0f  00000000  00000000  0000dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  0000f87b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_20>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_25>
      68:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      6c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      70:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      74:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      7c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      80:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      84:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      8c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      90:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      94:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      98:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      9c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      ac:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b8:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__vector_46>
      bc:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_47>
      c0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      c4:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_49>
      c8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      cc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      dc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      ec:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      fc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     100:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     104:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     108:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     10c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     110:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     114:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     118:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     11c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     120:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     124:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     128:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     12c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     130:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     134:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     138:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     13c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     140:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     144:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     148:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     14c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     150:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     154:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     158:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     15c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     160:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     164:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     168:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     16c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_91>
     170:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     174:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_clear_bss>:
     184:	13 e2       	ldi	r17, 0x23	; 35
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a2 3f       	cpi	r26, 0xF2	; 242
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
     198:	0c 94 cf 13 	jmp	0x279e	; 0x279e <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <init_clock>:

// Just sets up the Xmega clock to 32 MHz (defaults to 2 MHz without this)
void init_clock()
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);		// turn on 32MHz internal RC oscillator
     1a0:	80 91 50 00 	lds	r24, 0x0050
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
     1aa:	80 91 51 00 	lds	r24, 0x0051
     1ae:	81 ff       	sbrs	r24, 1
     1b0:	fc cf       	rjmp	.-8      	; 0x1aa <init_clock+0xa>
	CCP= CCP_IOREG_gc;			// allow modification of protected register
     1b2:	88 ed       	ldi	r24, 0xD8	; 216
     1b4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL |= CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
     1b6:	80 91 40 00 	lds	r24, 0x0040
     1ba:	81 60       	ori	r24, 0x01	; 1
     1bc:	80 93 40 00 	sts	0x0040, r24
}
     1c0:	08 95       	ret

000001c2 <init_led>:
// Helper functions to control Brainlink's full color LED

void init_led() {
	// Set clock to 4 MHz
	TCD0.CTRLA = TC_CLKSEL_DIV8_gc;
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b9 e0       	ldi	r27, 0x09	; 9
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	8c 93       	st	X, r24
	
	// Turn on single slope pwm waveform generation on CCA, B, and C (LED pins)
	TCD0.CTRLB = (TC0_CCCEN_bm | TC0_CCBEN_bm | TC0_CCAEN_bm) | TC_WGMODE_SS_gc;
     1ca:	83 e7       	ldi	r24, 0x73	; 115
     1cc:	11 96       	adiw	r26, 0x01	; 1
     1ce:	8c 93       	st	X, r24
     1d0:	11 97       	sbiw	r26, 0x01	; 1

	// Set period to 0xFFFF
	TCD0.PERBUF = 0xFFFF;
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	9f ef       	ldi	r25, 0xFF	; 255
     1d6:	d6 96       	adiw	r26, 0x36	; 54
     1d8:	8d 93       	st	X+, r24
     1da:	9c 93       	st	X, r25
     1dc:	d7 97       	sbiw	r26, 0x37	; 55

	// Set LED pins to output
	LEDPORT.DIRSET |= REDLED | GREENLED | BLUELED;
     1de:	e0 e6       	ldi	r30, 0x60	; 96
     1e0:	f6 e0       	ldi	r31, 0x06	; 6
     1e2:	81 81       	ldd	r24, Z+1	; 0x01
     1e4:	87 60       	ori	r24, 0x07	; 7
     1e6:	81 83       	std	Z+1, r24	; 0x01

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	d9 96       	adiw	r26, 0x39	; 57
     1ec:	8c 93       	st	X, r24
     1ee:	d9 97       	sbiw	r26, 0x39	; 57
	TCD0.CCBBUFH = 255-blue;
     1f0:	db 96       	adiw	r26, 0x3b	; 59
     1f2:	8c 93       	st	X, r24
	TCD0.CCCBUFH = 255-green;
     1f4:	80 93 3d 09 	sts	0x093D, r24

	// Set LED pins to output
	LEDPORT.DIRSET |= REDLED | GREENLED | BLUELED;
	// Set the LED to 0, just in case
	set_led(0,0,0);
}
     1f8:	08 95       	ret

000001fa <set_led>:

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
     1fa:	80 95       	com	r24
     1fc:	e0 e0       	ldi	r30, 0x00	; 0
     1fe:	f9 e0       	ldi	r31, 0x09	; 9
     200:	81 af       	std	Z+57, r24	; 0x39
	TCD0.CCBBUFH = 255-blue;
     202:	40 95       	com	r20
     204:	43 af       	std	Z+59, r20	; 0x3b
	TCD0.CCCBUFH = 255-green;
     206:	60 95       	com	r22
     208:	60 93 3d 09 	sts	0x093D, r22

     20c:	08 95       	ret

0000020e <init_bt_uart>:
/* Source file with functions for Brainlink's bluetooth and auxiliary serial ports. */

// Initializes the serial port attached to Brainlink's bluetooth module
void init_bt_uart() {
	// set rx and tx pin directionality
	PORTD.DIRSET = PIN7_bm;
     20e:	e0 e6       	ldi	r30, 0x60	; 96
     210:	f6 e0       	ldi	r31, 0x06	; 6
     212:	80 e8       	ldi	r24, 0x80	; 128
     214:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN6_bm;
     216:	80 e4       	ldi	r24, 0x40	; 64
     218:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&BT_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     21a:	e0 eb       	ldi	r30, 0xB0	; 176
     21c:	f9 e0       	ldi	r31, 0x09	; 9
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	85 83       	std	Z+5, r24	; 0x05
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
	usart_data->usart = usart;
     222:	e0 93 05 20 	sts	0x2005, r30
     226:	f0 93 06 20 	sts	0x2006, r31
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     22a:	10 92 08 21 	sts	0x2108, r1
	usart_data->buffer.RX_Head = 0;
     22e:	10 92 07 21 	sts	0x2107, r1

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&BT_data, &BT_USART);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(BT_data.usart, USART_RXCINTLVL_MED_gc);
     232:	83 81       	ldd	r24, Z+3	; 0x03
     234:	8f 7c       	andi	r24, 0xCF	; 207
     236:	80 62       	ori	r24, 0x20	; 32
     238:	83 83       	std	Z+3, r24	; 0x03
	/* Enable PMIC interrupt level medium. */
	PMIC.CTRL |= PMIC_MEDLVLEX_bm;
     23a:	a0 ea       	ldi	r26, 0xA0	; 160
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	12 96       	adiw	r26, 0x02	; 2
     240:	8c 91       	ld	r24, X
     242:	12 97       	sbiw	r26, 0x02	; 2
     244:	82 60       	ori	r24, 0x02	; 2
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	8c 93       	st	X, r24

	// Set baud rate to 115,200 using -3 for scale, 131 for setting.  Yields 0.08% error
	USART_Baudrate_Set(&BT_USART, 131 , -3);
     24a:	83 e8       	ldi	r24, 0x83	; 131
     24c:	86 83       	std	Z+6, r24	; 0x06
     24e:	80 ed       	ldi	r24, 0xD0	; 208
     250:	87 83       	std	Z+7, r24	; 0x07

	// Enable pins
	USART_Rx_Enable(&BT_USART);
     252:	84 81       	ldd	r24, Z+4	; 0x04
     254:	80 61       	ori	r24, 0x10	; 16
     256:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&BT_USART);
     258:	84 81       	ldd	r24, Z+4	; 0x04
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	84 83       	std	Z+4, r24	; 0x04
}
     25e:	08 95       	ret

00000260 <init_aux_uart>:

// Initializes auxiliary serial port - variables required to set baud rate are passed to the function
void init_aux_uart(int baud, char scale) {
	// set rx and tx directionality
	PORTC.DIRSET = PIN3_bm;
     260:	e0 e4       	ldi	r30, 0x40	; 64
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	28 e0       	ldi	r18, 0x08	; 8
     266:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRCLR = PIN2_bm;
     268:	24 e0       	ldi	r18, 0x04	; 4
     26a:	22 83       	std	Z+2, r18	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&AUX_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     26c:	e0 ea       	ldi	r30, 0xA0	; 160
     26e:	f8 e0       	ldi	r31, 0x08	; 8
     270:	23 e0       	ldi	r18, 0x03	; 3
     272:	25 83       	std	Z+5, r18	; 0x05
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
	usart_data->usart = usart;
     274:	e0 93 eb 22 	sts	0x22EB, r30
     278:	f0 93 ec 22 	sts	0x22EC, r31
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     27c:	10 92 ee 23 	sts	0x23EE, r1
	usart_data->buffer.RX_Head = 0;
     280:	10 92 ed 23 	sts	0x23ED, r1

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&AUX_data, &AUX_USART);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(AUX_data.usart, USART_RXCINTLVL_MED_gc);
     284:	23 81       	ldd	r18, Z+3	; 0x03
     286:	2f 7c       	andi	r18, 0xCF	; 207
     288:	20 62       	ori	r18, 0x20	; 32
     28a:	23 83       	std	Z+3, r18	; 0x03
	/* Enable PMIC interrupt level medium. */
	PMIC.CTRL |= PMIC_MEDLVLEX_bm;
     28c:	a0 ea       	ldi	r26, 0xA0	; 160
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	12 96       	adiw	r26, 0x02	; 2
     292:	2c 91       	ld	r18, X
     294:	12 97       	sbiw	r26, 0x02	; 2
     296:	22 60       	ori	r18, 0x02	; 2
     298:	12 96       	adiw	r26, 0x02	; 2
     29a:	2c 93       	st	X, r18
	// Set baud rate to that selected by user (defaults to 115200)
	USART_Baudrate_Set(&AUX_USART, baud, scale);
     29c:	86 83       	std	Z+6, r24	; 0x06
     29e:	62 95       	swap	r22
     2a0:	60 7f       	andi	r22, 0xF0	; 240
     2a2:	89 2f       	mov	r24, r25
     2a4:	99 0f       	add	r25, r25
     2a6:	99 0b       	sbc	r25, r25
     2a8:	68 2b       	or	r22, r24
     2aa:	67 83       	std	Z+7, r22	; 0x07

	// Enable pins
	USART_Rx_Enable(&AUX_USART);
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	80 61       	ori	r24, 0x10	; 16
     2b0:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&AUX_USART);
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	88 60       	ori	r24, 0x08	; 8
     2b6:	84 83       	std	Z+4, r24	; 0x04
	
}
     2b8:	08 95       	ret

000002ba <set_aux_baud_rate>:

// Sets the baud rate if the aux serial port is already set up
// Also clear the aux serial buffer as data was probably sent at the wrong rate
void set_aux_baud_rate(int baud, char scale)
{
	AUX_data.buffer.RX_Tail = AUX_data.buffer.RX_Head;
     2ba:	20 91 ed 23 	lds	r18, 0x23ED
     2be:	20 93 ee 23 	sts	0x23EE, r18

	USART_Baudrate_Set(&AUX_USART, baud, scale);
     2c2:	e0 ea       	ldi	r30, 0xA0	; 160
     2c4:	f8 e0       	ldi	r31, 0x08	; 8
     2c6:	86 83       	std	Z+6, r24	; 0x06
     2c8:	62 95       	swap	r22
     2ca:	60 7f       	andi	r22, 0xF0	; 240
     2cc:	89 2f       	mov	r24, r25
     2ce:	99 0f       	add	r25, r25
     2d0:	99 0b       	sbc	r25, r25
     2d2:	68 2b       	or	r22, r24
     2d4:	67 83       	std	Z+7, r22	; 0x07
}
     2d6:	08 95       	ret

000002d8 <uart_putchar>:

// Used to send a byte over a serial port
void uart_putchar(USART_t * usart, char c) {
     2d8:	fc 01       	movw	r30, r24

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     2da:	81 81       	ldd	r24, Z+1	; 0x01
     2dc:	85 ff       	sbrs	r24, 5
     2de:	fd cf       	rjmp	.-6      	; 0x2da <uart_putchar+0x2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     2e0:	60 83       	st	Z, r22
}
     2e2:	08 95       	ret

000002e4 <uart_getchar_nb>:

// Gets a character without blocking
char uart_getchar_nb(USART_t * usart) {
     2e4:	fc 01       	movw	r30, r24
     2e6:	28 ee       	ldi	r18, 0xE8	; 232
     2e8:	33 e0       	ldi	r19, 0x03	; 3

	int timeout = 1000;
	do{
	/* Wait until data received or a timeout.*/
	timeout--;
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	30 40       	sbci	r19, 0x00	; 0
	}while(((usart->STATUS & USART_RXCIF_bm) == 0) && timeout!=0);
     2ee:	81 81       	ldd	r24, Z+1	; 0x01
     2f0:	87 fd       	sbrc	r24, 7
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <uart_getchar_nb+0x18>
     2f4:	21 15       	cp	r18, r1
     2f6:	31 05       	cpc	r19, r1
     2f8:	c1 f7       	brne	.-16     	; 0x2ea <uart_getchar_nb+0x6>
     2fa:	04 c0       	rjmp	.+8      	; 0x304 <uart_getchar_nb+0x20>
	
	if(timeout==0) {
     2fc:	23 2b       	or	r18, r19
     2fe:	11 f0       	breq	.+4      	; 0x304 <uart_getchar_nb+0x20>
		return 0;
	}
	else {
		return usart->DATA;
     300:	80 81       	ld	r24, Z
     302:	08 95       	ret
     304:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     306:	08 95       	ret

00000308 <uart_getchar>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     308:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     30c:	80 91 08 21 	lds	r24, 0x2108
	
//	do{
//	}while((usart->STATUS & USART_RXCIF_bm) == 0);
//	uart_putchar(usart, (usart->STATUS&0x18));//
	do{
    }while(!USART_RXBufferData_Available(&BT_data));
     310:	98 17       	cp	r25, r24
     312:	d1 f3       	breq	.-12     	; 0x308 <uart_getchar>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     314:	e0 91 08 21 	lds	r30, 0x2108
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	eb 5f       	subi	r30, 0xFB	; 251
     31c:	ff 4d       	sbci	r31, 0xDF	; 223
     31e:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     320:	90 91 08 21 	lds	r25, 0x2108
     324:	9f 5f       	subi	r25, 0xFF	; 255
     326:	90 93 08 21 	sts	0x2108, r25
//	uart_putchar(usart, (usart->STATUS&0x18));//
	do{
    }while(!USART_RXBufferData_Available(&BT_data));
	//uart_putchar(usart, (usart->STATUS&0x18));//
	return USART_RXBuffer_GetByte(&BT_data);
}
     32a:	08 95       	ret

0000032c <uart_getchar_timeout>:


// Gets a character from the bluetooth buffer, blocks if none exists for roughly 300 ms, then times out and returns 256
// Bug alert  - "USART_t * usart" is unnecessary and not used
int uart_getchar_timeout(USART_t * usart) {
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     330:	40 e4       	ldi	r20, 0x40	; 64
     332:	5f e1       	ldi	r21, 0x1F	; 31
     334:	05 c0       	rjmp	.+10     	; 0x340 <uart_getchar_timeout+0x14>
	
	int timeout=0;
	while(!USART_RXBufferData_Available(&BT_data) && timeout < 500) {
		timeout++;
     336:	2f 5f       	subi	r18, 0xFF	; 255
     338:	3f 4f       	sbci	r19, 0xFF	; 255
     33a:	ca 01       	movw	r24, r20
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <uart_getchar_timeout+0x10>
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     340:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     344:	80 91 08 21 	lds	r24, 0x2108
// Gets a character from the bluetooth buffer, blocks if none exists for roughly 300 ms, then times out and returns 256
// Bug alert  - "USART_t * usart" is unnecessary and not used
int uart_getchar_timeout(USART_t * usart) {
	
	int timeout=0;
	while(!USART_RXBufferData_Available(&BT_data) && timeout < 500) {
     348:	98 17       	cp	r25, r24
     34a:	29 f4       	brne	.+10     	; 0x356 <uart_getchar_timeout+0x2a>
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	24 3f       	cpi	r18, 0xF4	; 244
     350:	38 07       	cpc	r19, r24
     352:	89 f7       	brne	.-30     	; 0x336 <uart_getchar_timeout+0xa>
     354:	11 c0       	rjmp	.+34     	; 0x378 <uart_getchar_timeout+0x4c>
		timeout++;
		_delay_ms(1);
	}
	if(timeout >= 500)
     356:	24 5f       	subi	r18, 0xF4	; 244
     358:	31 40       	sbci	r19, 0x01	; 1
     35a:	74 f4       	brge	.+28     	; 0x378 <uart_getchar_timeout+0x4c>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     35c:	e0 91 08 21 	lds	r30, 0x2108
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	eb 5f       	subi	r30, 0xFB	; 251
     364:	ff 4d       	sbci	r31, 0xDF	; 223
     366:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     368:	80 91 08 21 	lds	r24, 0x2108
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	80 93 08 21 	sts	0x2108, r24
		_delay_ms(1);
	}
	if(timeout >= 500)
		return 256;
	else
		return USART_RXBuffer_GetByte(&BT_data);
     372:	29 2f       	mov	r18, r25
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	02 c0       	rjmp	.+4      	; 0x37c <uart_getchar_timeout+0x50>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	31 e0       	ldi	r19, 0x01	; 1
}
     37c:	c9 01       	movw	r24, r18
     37e:	08 95       	ret

00000380 <aux_uart_getchar>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     380:	80 91 ee 23 	lds	r24, 0x23EE
     384:	eb ee       	ldi	r30, 0xEB	; 235
     386:	f2 e2       	ldi	r31, 0x22	; 34
     388:	e8 0f       	add	r30, r24
     38a:	f1 1d       	adc	r31, r1
     38c:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     38e:	90 91 ee 23 	lds	r25, 0x23EE
     392:	9f 5f       	subi	r25, 0xFF	; 255
     394:	90 93 ee 23 	sts	0x23EE, r25

// Gets a character from the auxiliary uart buffer, not currently used.
char aux_uart_getchar(USART_t * usart) {
	
	return USART_RXBuffer_GetByte(&AUX_data);
}
     398:	08 95       	ret

0000039a <serial_bridge>:

// serial to Bluetooth bridge
// currently does not return
void serial_bridge(void) {
     39a:	11 c0       	rjmp	.+34     	; 0x3be <serial_bridge+0x24>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     39c:	e0 91 ee 23 	lds	r30, 0x23EE
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	e5 51       	subi	r30, 0x15	; 21
     3a4:	fd 4d       	sbci	r31, 0xDD	; 221
     3a6:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     3a8:	80 91 ee 23 	lds	r24, 0x23EE
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 ee 23 	sts	0x23EE, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     3b2:	80 91 b1 09 	lds	r24, 0x09B1
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <serial_bridge+0x18>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     3ba:	90 93 b0 09 	sts	0x09B0, r25
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     3be:	90 91 ed 23 	lds	r25, 0x23ED
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     3c2:	80 91 ee 23 	lds	r24, 0x23EE

// serial to Bluetooth bridge
// currently does not return
void serial_bridge(void) {
    while(1) {
        while (USART_RXBufferData_Available(&AUX_data)) {
     3c6:	98 17       	cp	r25, r24
     3c8:	49 f7       	brne	.-46     	; 0x39c <serial_bridge+0x2>
     3ca:	11 c0       	rjmp	.+34     	; 0x3ee <serial_bridge+0x54>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     3cc:	e0 91 08 21 	lds	r30, 0x2108
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	eb 5f       	subi	r30, 0xFB	; 251
     3d4:	ff 4d       	sbci	r31, 0xDF	; 223
     3d6:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     3d8:	80 91 08 21 	lds	r24, 0x2108
     3dc:	8f 5f       	subi	r24, 0xFF	; 255
     3de:	80 93 08 21 	sts	0x2108, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     3e2:	80 91 a1 08 	lds	r24, 0x08A1
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <serial_bridge+0x48>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     3ea:	90 93 a0 08 	sts	0x08A0, r25
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     3ee:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     3f2:	80 91 08 21 	lds	r24, 0x2108
void serial_bridge(void) {
    while(1) {
        while (USART_RXBufferData_Available(&AUX_data)) {
              uart_putchar(&BT_USART, USART_RXBuffer_GetByte(&AUX_data));
        }
        while (USART_RXBufferData_Available(&BT_data)) {
     3f6:	98 17       	cp	r25, r24
     3f8:	11 f3       	breq	.-60     	; 0x3be <serial_bridge+0x24>
     3fa:	e8 cf       	rjmp	.-48     	; 0x3cc <serial_bridge+0x32>

000003fc <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
     3fc:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     3fe:	60 83       	st	Z, r22
     400:	71 83       	std	Z+1, r23	; 0x01
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     402:	ed 5f       	subi	r30, 0xFD	; 253
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	10 82       	st	Z, r1
	usart_data->buffer.RX_Head = 0;
     408:	12 92       	st	-Z, r1
	//usart_data->buffer.TX_Tail = 0;
	//usart_data->buffer.TX_Head = 0;
}
     40a:	08 95       	ret

0000040c <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
     40c:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     40e:	ee 5f       	subi	r30, 0xFE	; 254
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	91 91       	ld	r25, Z+
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     414:	80 81       	ld	r24, Z
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	98 13       	cpse	r25, r24
     41a:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
     41c:	82 2f       	mov	r24, r18
     41e:	08 95       	ret

00000420 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
     420:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     422:	dc 01       	movw	r26, r24
     424:	ad 5f       	subi	r26, 0xFD	; 253
     426:	be 4f       	sbci	r27, 0xFE	; 254
     428:	8c 91       	ld	r24, X
     42a:	e8 0f       	add	r30, r24
     42c:	f1 1d       	adc	r31, r1
     42e:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     430:	9c 91       	ld	r25, X
     432:	9f 5f       	subi	r25, 0xFF	; 255
     434:	9c 93       	st	X, r25

	return ans;
}
     436:	08 95       	ret

00000438 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     43e:	ec 01       	movw	r28, r24
     440:	ce 5f       	subi	r28, 0xFE	; 254
     442:	de 4f       	sbci	r29, 0xFE	; 254
     444:	98 81       	ld	r25, Y
     446:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     448:	ad 5f       	subi	r26, 0xFD	; 253
     44a:	be 4f       	sbci	r27, 0xFE	; 254
     44c:	8c 91       	ld	r24, X
     44e:	a3 50       	subi	r26, 0x03	; 3
     450:	b1 40       	sbci	r27, 0x01	; 1
	uint8_t data = usart_data->usart->DATA;
     452:	ed 91       	ld	r30, X+
     454:	fc 91       	ld	r31, X
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	e0 81       	ld	r30, Z

	if (tempRX_Head == tempRX_Tail) {
     45a:	98 17       	cp	r25, r24
     45c:	11 f4       	brne	.+4      	; 0x462 <USART_RXComplete+0x2a>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	07 c0       	rjmp	.+14     	; 0x470 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     462:	88 81       	ld	r24, Y
     464:	a8 0f       	add	r26, r24
     466:	b1 1d       	adc	r27, r1
     468:	12 96       	adiw	r26, 0x02	; 2
     46a:	ec 93       	st	X, r30
		usart_data->buffer.RX_Head = tempRX_Head;
     46c:	98 83       	st	Y, r25
     46e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <err>:
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     476:	80 91 b1 09 	lds	r24, 0x09B1
     47a:	85 ff       	sbrs	r24, 5
     47c:	fc cf       	rjmp	.-8      	; 0x476 <err>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     47e:	85 e4       	ldi	r24, 0x45	; 69
     480:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     484:	80 91 b1 09 	lds	r24, 0x09B1
     488:	85 ff       	sbrs	r24, 5
     48a:	fc cf       	rjmp	.-8      	; 0x484 <err+0xe>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     48c:	82 e5       	ldi	r24, 0x52	; 82
     48e:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     492:	80 91 b1 09 	lds	r24, 0x09B1
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <err+0x1c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     49a:	82 e5       	ldi	r24, 0x52	; 82
     49c:	80 93 b0 09 	sts	0x09B0, r24
/* Error message */
void err(void) {
     uart_putchar(&BT_USART, 'E');
     uart_putchar(&BT_USART, 'R');
     uart_putchar(&BT_USART, 'R');
}
     4a0:	08 95       	ret

000004a2 <__vector_91>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
     4a2:	1f 92       	push	r1
     4a4:	0f 92       	push	r0
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	0f 92       	push	r0
     4aa:	11 24       	eor	r1, r1
     4ac:	2f 93       	push	r18
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     4b6:	90 91 07 21 	lds	r25, 0x2107
     4ba:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     4bc:	80 91 08 21 	lds	r24, 0x2108
	uint8_t data = usart_data->usart->DATA;
     4c0:	e0 91 05 20 	lds	r30, 0x2005
     4c4:	f0 91 06 20 	lds	r31, 0x2006
     4c8:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
     4ca:	98 17       	cp	r25, r24
     4cc:	41 f0       	breq	.+16     	; 0x4de <__vector_91+0x3c>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     4ce:	e0 91 07 21 	lds	r30, 0x2107
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	eb 5f       	subi	r30, 0xFB	; 251
     4d6:	ff 4d       	sbci	r31, 0xDF	; 223
     4d8:	22 83       	std	Z+2, r18	; 0x02
		usart_data->buffer.RX_Head = tempRX_Head;
     4da:	90 93 07 21 	sts	0x2107, r25
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
	USART_RXComplete(&BT_data);
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	2f 91       	pop	r18
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
     4fc:	2f 93       	push	r18
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	ef 93       	push	r30
     504:	ff 93       	push	r31
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     506:	90 91 ed 23 	lds	r25, 0x23ED
     50a:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     50c:	80 91 ee 23 	lds	r24, 0x23EE
	uint8_t data = usart_data->usart->DATA;
     510:	e0 91 eb 22 	lds	r30, 0x22EB
     514:	f0 91 ec 22 	lds	r31, 0x22EC
     518:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
     51a:	98 17       	cp	r25, r24
     51c:	41 f0       	breq	.+16     	; 0x52e <__vector_25+0x3c>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     51e:	e0 91 ed 23 	lds	r30, 0x23ED
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	e5 51       	subi	r30, 0x15	; 21
     526:	fd 4d       	sbci	r31, 0xDD	; 221
     528:	22 83       	std	Z+2, r18	; 0x02
		usart_data->buffer.RX_Head = tempRX_Head;
     52a:	90 93 ed 23 	sts	0x23ED, r25
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
	USART_RXComplete(&AUX_data);
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	2f 91       	pop	r18
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <init_adc>:

void init_adc() {
     542:	cf 93       	push	r28
     544:	df 93       	push	r29

	ADC_ConvMode_and_Resolution_Config(&ADCA,  ADC_ConvMode_Unsigned, ADC_RESOLUTION_8BIT_gc);
     546:	e0 e0       	ldi	r30, 0x00	; 0
     548:	f2 e0       	ldi	r31, 0x02	; 2
     54a:	81 81       	ldd	r24, Z+1	; 0x01
     54c:	89 7e       	andi	r24, 0xE9	; 233
     54e:	84 60       	ori	r24, 0x04	; 4
     550:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV512_gc);
     552:	84 81       	ldd	r24, Z+4	; 0x04
     554:	87 60       	ori	r24, 0x07	; 7
     556:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADC A to be AREFB (VCC).*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_AREFB_gc); 
     558:	82 81       	ldd	r24, Z+2	; 0x02
     55a:	80 63       	ori	r24, 0x30	; 48
     55c:	82 83       	std	Z+2, r24	; 0x02
	
	/* Setup channel 1 and 2 with different inputs. */

	// Channel 1 for the temperature sensor
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     55e:	28 e2       	ldi	r18, 0x28	; 40
     560:	32 e0       	ldi	r19, 0x02	; 2
     562:	d9 01       	movw	r26, r18
     564:	8c 91       	ld	r24, X
     566:	80 7e       	andi	r24, 0xE0	; 224
     568:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_INTERNAL_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	// Channel 2 for all other ADC
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH2,
     56a:	a0 e3       	ldi	r26, 0x30	; 48
     56c:	b2 e0       	ldi	r27, 0x02	; 2
     56e:	8c 91       	ld	r24, X
     570:	80 7e       	andi	r24, 0xE0	; 224
     572:	81 60       	ori	r24, 0x01	; 1
     574:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
                                     ADC_DRIVER_CH_GAIN_NONE);
								 
		/* Set input to the channels in ADC A */
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXINT_TEMP_gc, 0);
     576:	e9 01       	movw	r28, r18
     578:	19 82       	std	Y+1, r1	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH2, BATT_VOLT, 0);
     57a:	88 e3       	ldi	r24, 0x38	; 56
     57c:	11 96       	adiw	r26, 0x01	; 1
     57e:	8c 93       	st	X, r24

	/*  Setup internal temperature reference */
	ADC_TempReference_Enable(&ADCA);
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	81 60       	ori	r24, 0x01	; 1
     584:	82 83       	std	Z+2, r24	; 0x02

	// Enable the ADC
	ADC_Enable(&ADCA);
     586:	80 81       	ld	r24, Z
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	80 83       	st	Z, r24
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	9f e1       	ldi	r25, 0x1F	; 31
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <init_adc+0x4e>
	_delay_ms(1);

}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <read_analog>:

// Used by mainFirmware to read the analog sensors - light, battery voltage, and auxiliary
int read_analog(ADC_CH_MUXPOS_t sensor) {
	// Set MUX to the right input
	ADC_Ch_InputMux_Config(&ADCA.CH2, sensor, 0);
     59a:	e0 e3       	ldi	r30, 0x30	; 48
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	81 83       	std	Z+1, r24	; 0x01
	//Start conversion
	ADCA.CH2.CTRL |= START_CH;
     5a0:	80 91 30 02 	lds	r24, 0x0230
     5a4:	80 68       	ori	r24, 0x80	; 128
     5a6:	e0 e0       	ldi	r30, 0x00	; 0
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
     5aa:	80 ab       	std	Z+48, r24	; 0x30
	do{
	//i++;
			/* If the conversion on the ADCA channel 2 never is
			 * complete this will be a deadlock. */
	}while(!(ADCA.CH2.INTFLAGS & 0x01)&& !(ADCA.INTFLAGS & 0x04));
     5ac:	80 91 33 02 	lds	r24, 0x0233
     5b0:	80 fd       	sbrc	r24, 0
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <read_analog+0x22>
     5b4:	80 91 06 02 	lds	r24, 0x0206
     5b8:	82 ff       	sbrs	r24, 2
     5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <read_analog+0x12>
	
	// Reset interrupt flag for next conversion
	ADCA.CH2.INTFLAGS = ADC_CH_CHIF_bm;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	e0 e0       	ldi	r30, 0x00	; 0
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	83 ab       	std	Z+51, r24	; 0x33
	//ADCA.INTFLAGS |= 0x04;
	
	// Return 8-bit value of sensor
	return ADCA.CH2.RESL;
     5c4:	80 91 34 02 	lds	r24, 0x0234
	
}
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	08 95       	ret

000005cc <read_internal_temperature>:

// Not currently documented as internal temperature is not properly calibrated.
int read_internal_temperature() {
	// Start conversion
	ADCA.CH1.CTRL |= START_CH;
     5cc:	80 91 28 02 	lds	r24, 0x0228
     5d0:	80 68       	ori	r24, 0x80	; 128
     5d2:	e0 e0       	ldi	r30, 0x00	; 0
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	80 a7       	std	Z+40, r24	; 0x28
	do{
			/* If the conversion on the ADCA channel 1 never is
			 * complete this will be a deadlock. */
	}while(!(ADCA.CH1.INTFLAGS & 0x01));
     5d8:	80 91 2b 02 	lds	r24, 0x022B
     5dc:	80 ff       	sbrs	r24, 0
     5de:	fc cf       	rjmp	.-8      	; 0x5d8 <read_internal_temperature+0xc>
	
	// Reset interrupt flag for next conversion
	ADCA.CH1.INTFLAGS = ADC_CH_CHIF_bm;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	e0 e0       	ldi	r30, 0x00	; 0
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	83 a7       	std	Z+43, r24	; 0x2b
	
	// Return the sensor's value
	return ADCA.CH1.RESL;
     5e8:	80 91 2c 02 	lds	r24, 0x022C
}
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	08 95       	ret

000005f0 <init_ir>:
/* Source file for functions controlling transmission of infrared signals. */

// Initializes the timers used to control the IR carrier and the IR signal
void init_ir() {
	// Set timer 0 clock to 32 MHz
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
     5f0:	e0 e0       	ldi	r30, 0x00	; 0
     5f2:	f8 e0       	ldi	r31, 0x08	; 8
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	20 83       	st	Z, r18
	
	// Turn on single slope pwm waveform generation on CCA (IR Pin)
	TCC0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_SS_gc;
     5f8:	83 e1       	ldi	r24, 0x13	; 19
     5fa:	81 83       	std	Z+1, r24	; 0x01

	// Set period to 0x0349 for 38000 Hz operation
	// This easily adjusts the frequency of the carrier wave
	TCC0.PERBUF = 0x0349;
     5fc:	89 e4       	ldi	r24, 0x49	; 73
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	86 ab       	std	Z+54, r24	; 0x36
     602:	97 ab       	std	Z+55, r25	; 0x37

	// Set IR pin to output
	PORTC.DIRSET = IR_OUT;
     604:	e0 e4       	ldi	r30, 0x40	; 64
     606:	f6 e0       	ldi	r31, 0x06	; 6
     608:	21 83       	std	Z+1, r18	; 0x01
	
	
	// Set timer to count at 500 KHz - this timer is used to construct the IR signal
	TCC1.CTRLA = TC_CLKSEL_DIV64_gc;
     60a:	e0 e4       	ldi	r30, 0x40	; 64
     60c:	f8 e0       	ldi	r31, 0x08	; 8
     60e:	85 e0       	ldi	r24, 0x05	; 5
     610:	80 83       	st	Z, r24
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     612:	16 82       	std	Z+6, r1	; 0x06
	
}
     614:	08 95       	ret

00000616 <set_ir50>:

// Set the IR_LED to regular carrier frequency
void set_ir50() {
	cli();
     616:	f8 94       	cli
	TCC0.CCA = (TCC0.PER/2);
     618:	e0 e0       	ldi	r30, 0x00	; 0
     61a:	f8 e0       	ldi	r31, 0x08	; 8
     61c:	86 a1       	ldd	r24, Z+38	; 0x26
     61e:	97 a1       	ldd	r25, Z+39	; 0x27
     620:	96 95       	lsr	r25
     622:	87 95       	ror	r24
     624:	80 a7       	std	Z+40, r24	; 0x28
     626:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     628:	78 94       	sei
}
     62a:	08 95       	ret

0000062c <set_ir100>:


// Set the IR_LED to full on
void set_ir100() {
	cli();
     62c:	f8 94       	cli
	TCC0.CCA = TCC0.PER;
     62e:	e0 e0       	ldi	r30, 0x00	; 0
     630:	f8 e0       	ldi	r31, 0x08	; 8
     632:	86 a1       	ldd	r24, Z+38	; 0x26
     634:	97 a1       	ldd	r25, Z+39	; 0x27
     636:	80 a7       	std	Z+40, r24	; 0x28
     638:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     63a:	78 94       	sei
}
     63c:	08 95       	ret

0000063e <set_ir0>:

// Turn the IR LED off
void set_ir0() {
	cli();
     63e:	f8 94       	cli
	TCC0.CCA = 0x0000;
     640:	e0 e0       	ldi	r30, 0x00	; 0
     642:	f8 e0       	ldi	r31, 0x08	; 8
     644:	10 a6       	std	Z+40, r1	; 0x28
     646:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     648:	78 94       	sei
}
     64a:	08 95       	ret

0000064c <set_ir_carrier>:

// Sets the frequency of the IR carrier
void set_ir_carrier(int frequency) {
	
	cli();
     64c:	f8 94       	cli
	TCC0.PERBUF = frequency;
     64e:	e0 e0       	ldi	r30, 0x00	; 0
     650:	f8 e0       	ldi	r31, 0x08	; 8
     652:	86 ab       	std	Z+54, r24	; 0x36
     654:	97 ab       	std	Z+55, r25	; 0x37
	sei();
     656:	78 94       	sei
}
     658:	08 95       	ret

0000065a <start_ir_timer>:

// Starts timer 1, used to construct the IR signal
void start_ir_timer() {
    // Reset counters
	startUpCounter = 0; 
     65a:	10 92 ca 22 	sts	0x22CA, r1
     65e:	10 92 cb 22 	sts	0x22CB, r1
	onOffTracker = 0;
     662:	10 92 f0 23 	sts	0x23F0, r1
     666:	10 92 f1 23 	sts	0x23F1, r1
	bitCounter = 0;
     66a:	10 92 ef 23 	sts	0x23EF, r1

	cli();
     66e:	f8 94       	cli
	TCC1.CNT = 0x0000; // Set timer 1 counter to 0
     670:	e0 e4       	ldi	r30, 0x40	; 64
     672:	f8 e0       	ldi	r31, 0x08	; 8
     674:	10 a2       	std	Z+32, r1	; 0x20
     676:	11 a2       	std	Z+33, r1	; 0x21
 	sei();
     678:	78 94       	sei
	// Enable interrupts on timer
	TCC1.INTCTRLA = TC_OVFINTLVL_HI_gc;
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	e0 e4       	ldi	r30, 0x40	; 64
     67e:	f8 e0       	ldi	r31, 0x08	; 8
     680:	86 83       	std	Z+6, r24	; 0x06
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     682:	e0 ea       	ldi	r30, 0xA0	; 160
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	82 81       	ldd	r24, Z+2	; 0x02
     688:	84 60       	ori	r24, 0x04	; 4
     68a:	82 83       	std	Z+2, r24	; 0x02
}
     68c:	08 95       	ret

0000068e <stop_ir_timer>:

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     68e:	e0 e4       	ldi	r30, 0x40	; 64
     690:	f8 e0       	ldi	r31, 0x08	; 8
     692:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     694:	f8 94       	cli
	TCC0.CCA = 0x0000;
     696:	e0 e0       	ldi	r30, 0x00	; 0
     698:	f8 e0       	ldi	r31, 0x08	; 8
     69a:	10 a6       	std	Z+40, r1	; 0x28
     69c:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     69e:	78 94       	sei
// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
	// Turn off IR LED just in case it was left on
	set_ir0();
}
     6a0:	08 95       	ret

000006a2 <__vector_20>:


// The timer overflow on TCC1 - this is where most of the action is.
ISR(TCC1_OVF_vect) {
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	2f 93       	push	r18
     6ae:	3f 93       	push	r19
     6b0:	4f 93       	push	r20
     6b2:	5f 93       	push	r21
     6b4:	6f 93       	push	r22
     6b6:	7f 93       	push	r23
     6b8:	8f 93       	push	r24
     6ba:	9f 93       	push	r25
     6bc:	af 93       	push	r26
     6be:	bf 93       	push	r27
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	
	// The following if-else basically alternates the signal each time the interrupt is triggered
	// If the signal should be low right now, set it that way
	if(onOffTracker == 1) {
     6c4:	80 91 f0 23 	lds	r24, 0x23F0
     6c8:	90 91 f1 23 	lds	r25, 0x23F1
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	59 f4       	brne	.+22     	; 0x6e6 <__vector_20+0x44>
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     6d0:	f8 94       	cli
	TCC0.CCA = 0x0000;
     6d2:	e0 e0       	ldi	r30, 0x00	; 0
     6d4:	f8 e0       	ldi	r31, 0x08	; 8
     6d6:	10 a6       	std	Z+40, r1	; 0x28
     6d8:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     6da:	78 94       	sei
	
	// The following if-else basically alternates the signal each time the interrupt is triggered
	// If the signal should be low right now, set it that way
	if(onOffTracker == 1) {
		set_ir0();
		onOffTracker = 0;
     6dc:	10 92 f0 23 	sts	0x23F0, r1
     6e0:	10 92 f1 23 	sts	0x23F1, r1
     6e4:	08 c0       	rjmp	.+16     	; 0x6f6 <__vector_20+0x54>
	}
	// Else turn on the signal using a 50% duty cycle (50% at carrier frequency)
	else {
		set_ir50();
     6e6:	0e 94 0b 03 	call	0x616	; 0x616 <set_ir50>
		onOffTracker = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	80 93 f0 23 	sts	0x23F0, r24
     6f2:	90 93 f1 23 	sts	0x23F1, r25
	}

	// Checks if we've transmitted all the signal's bits. If so, turns off IR or sets the timer to interrupt again in time specified by robotData.repeatTime
	if((bitCounter >= robotData.numBits) && ((onOffTracker==0)||(robotData.bitEncoding == 0x03))) {
     6f6:	40 91 ef 23 	lds	r20, 0x23EF
     6fa:	80 91 3f 21 	lds	r24, 0x213F
     6fe:	48 17       	cp	r20, r24
     700:	98 f1       	brcs	.+102    	; 0x768 <__vector_20+0xc6>
     702:	80 91 f0 23 	lds	r24, 0x23F0
     706:	90 91 f1 23 	lds	r25, 0x23F1
     70a:	89 2b       	or	r24, r25
     70c:	21 f0       	breq	.+8      	; 0x716 <__vector_20+0x74>
     70e:	80 91 3e 21 	lds	r24, 0x213E
     712:	83 30       	cpi	r24, 0x03	; 3
     714:	49 f5       	brne	.+82     	; 0x768 <__vector_20+0xc6>
		// iRobot's encoding is funky in the last bit and needs to be turned off right away
		if(robotData.bitEncoding == 0x03) {
     716:	80 91 3e 21 	lds	r24, 0x213E
     71a:	83 30       	cpi	r24, 0x03	; 3
     71c:	31 f4       	brne	.+12     	; 0x72a <__vector_20+0x88>
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     71e:	f8 94       	cli
	TCC0.CCA = 0x0000;
     720:	e0 e0       	ldi	r30, 0x00	; 0
     722:	f8 e0       	ldi	r31, 0x08	; 8
     724:	10 a6       	std	Z+40, r1	; 0x28
     726:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     728:	78 94       	sei
		// iRobot's encoding is funky in the last bit and needs to be turned off right away
		if(robotData.bitEncoding == 0x03) {
			set_ir0();
		}
		// If repeatFlag = 0, stop the IR timer, effectively ending transmission of the signal
		if(!robotData.repeatFlag) {
     72a:	80 91 09 22 	lds	r24, 0x2209
     72e:	90 91 0a 22 	lds	r25, 0x220A
     732:	89 2b       	or	r24, r25
     734:	51 f4       	brne	.+20     	; 0x74a <__vector_20+0xa8>
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     736:	e0 e4       	ldi	r30, 0x40	; 64
     738:	f8 e0       	ldi	r31, 0x08	; 8
     73a:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     73c:	f8 94       	cli
	TCC0.CCA = 0x0000;
     73e:	e0 e0       	ldi	r30, 0x00	; 0
     740:	f8 e0       	ldi	r31, 0x08	; 8
     742:	10 a6       	std	Z+40, r1	; 0x28
     744:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     746:	78 94       	sei
     748:	d5 c0       	rjmp	.+426    	; 0x8f4 <__vector_20+0x252>
		if(!robotData.repeatFlag) {
			stop_ir_timer();
		}
		// Otherwise, set the timer to interrupt again in robotData.repeatTime and reset all counters. At that time it will repeat the signal.
		else {
			startUpCounter = 0;
     74a:	10 92 ca 22 	sts	0x22CA, r1
     74e:	10 92 cb 22 	sts	0x22CB, r1
			onOffTracker = 0;
     752:	10 92 f0 23 	sts	0x23F0, r1
     756:	10 92 f1 23 	sts	0x23F1, r1
			bitCounter = 0;
     75a:	10 92 ef 23 	sts	0x23EF, r1
			TCC1.PER = robotData.repeatTime;
     75e:	80 91 07 22 	lds	r24, 0x2207
     762:	90 91 08 22 	lds	r25, 0x2208
     766:	43 c0       	rjmp	.+134    	; 0x7ee <__vector_20+0x14c>
		}
	}
	// If we're still transmitting, do the following
	else {
		// If we're still in the "start pulse" phase of the signal, then set the timer to interrupt again in the time specified by startUpPulse[startUpCounter]
		if(startUpCounter < robotData.startUpPulseLength)
     768:	20 91 ca 22 	lds	r18, 0x22CA
     76c:	30 91 cb 22 	lds	r19, 0x22CB
     770:	80 91 1d 21 	lds	r24, 0x211D
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	28 17       	cp	r18, r24
     778:	39 07       	cpc	r19, r25
     77a:	94 f4       	brge	.+36     	; 0x7a0 <__vector_20+0xfe>
		{
			TCC1.PER = robotData.startUpPulse[startUpCounter];
     77c:	f9 01       	movw	r30, r18
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e5 5e       	subi	r30, 0xE5	; 229
     784:	fe 4d       	sbci	r31, 0xDE	; 222
     786:	83 81       	ldd	r24, Z+3	; 0x03
     788:	94 81       	ldd	r25, Z+4	; 0x04
     78a:	e0 e4       	ldi	r30, 0x40	; 64
     78c:	f8 e0       	ldi	r31, 0x08	; 8
     78e:	86 a3       	std	Z+38, r24	; 0x26
     790:	97 a3       	std	Z+39, r25	; 0x27
			startUpCounter++; // increment counter
     792:	2f 5f       	subi	r18, 0xFF	; 255
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	20 93 ca 22 	sts	0x22CA, r18
     79a:	30 93 cb 22 	sts	0x22CB, r19
     79e:	aa c0       	rjmp	.+340    	; 0x8f4 <__vector_20+0x252>
		}
		// Else, send data according to encoding format
		else {
			// If format is alternating (0): 
			if(robotData.bitEncoding == 0x00) {
     7a0:	80 91 3e 21 	lds	r24, 0x213E
     7a4:	88 23       	and	r24, r24
     7a6:	41 f0       	breq	.+16     	; 0x7b8 <__vector_20+0x116>
					TCC1.PER = robotData.lowBitTime;
				}
				bitCounter++;
			}
			// If format is up-time (1):
			else if(robotData.bitEncoding == 0x01) {
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	31 f5       	brne	.+76     	; 0x7f8 <__vector_20+0x156>
				// If this tracker is a 1, then we just set IR on
				// If the tracker is showing a 1, then the next pulse is used to encode a bit by pulse length
				if(onOffTracker == 1) {
     7ac:	80 91 f0 23 	lds	r24, 0x23F0
     7b0:	90 91 f1 23 	lds	r25, 0x23F1
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	b9 f4       	brne	.+46     	; 0x7e6 <__vector_20+0x144>
					// If the bit will be a logical 1, use highBitTime, else, use lowBitTime
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     7b8:	e4 2f       	mov	r30, r20
     7ba:	e6 95       	lsr	r30
     7bc:	e6 95       	lsr	r30
     7be:	e6 95       	lsr	r30
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	e5 5e       	subi	r30, 0xE5	; 229
     7c4:	fe 4d       	sbci	r31, 0xDE	; 222
     7c6:	24 a5       	ldd	r18, Z+44	; 0x2c
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	84 2f       	mov	r24, r20
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	80 95       	com	r24
     7d0:	90 95       	com	r25
     7d2:	87 70       	andi	r24, 0x07	; 7
     7d4:	90 70       	andi	r25, 0x00	; 0
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <__vector_20+0x13a>
     7d8:	35 95       	asr	r19
     7da:	27 95       	ror	r18
     7dc:	8a 95       	dec	r24
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <__vector_20+0x136>
     7e0:	20 ff       	sbrs	r18, 0
     7e2:	4d c0       	rjmp	.+154    	; 0x87e <__vector_20+0x1dc>
     7e4:	51 c0       	rjmp	.+162    	; 0x888 <__vector_20+0x1e6>
					}
					bitCounter++;
				}
				// If the onOffTracker is 0, the next time is used to space bits, so use "offTime"
				else {
					TCC1.PER = robotData.offTime;
     7e6:	80 91 45 21 	lds	r24, 0x2145
     7ea:	90 91 46 21 	lds	r25, 0x2146
     7ee:	e0 e4       	ldi	r30, 0x40	; 64
     7f0:	f8 e0       	ldi	r31, 0x08	; 8
     7f2:	86 a3       	std	Z+38, r24	; 0x26
     7f4:	97 a3       	std	Z+39, r25	; 0x27
     7f6:	7e c0       	rjmp	.+252    	; 0x8f4 <__vector_20+0x252>
				}
			}
			// If format is down-time (2):
			else if(robotData.bitEncoding == 0x02) {
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	11 f5       	brne	.+68     	; 0x840 <__vector_20+0x19e>
				// If this tracker is a 0, then we just set IR off
				// If the tracker is showing a 0, then the next signal off period is used to encode a bit by time
				if(onOffTracker == 0) {
     7fc:	80 91 f0 23 	lds	r24, 0x23F0
     800:	90 91 f1 23 	lds	r25, 0x23F1
     804:	89 2b       	or	r24, r25
     806:	b9 f4       	brne	.+46     	; 0x836 <__vector_20+0x194>
				/// If the bit will be a logical 1, use highBitTime, else, use lowBitTime
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     808:	e4 2f       	mov	r30, r20
     80a:	e6 95       	lsr	r30
     80c:	e6 95       	lsr	r30
     80e:	e6 95       	lsr	r30
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	e5 5e       	subi	r30, 0xE5	; 229
     814:	fe 4d       	sbci	r31, 0xDE	; 222
     816:	24 a5       	ldd	r18, Z+44	; 0x2c
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	84 2f       	mov	r24, r20
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	80 95       	com	r24
     820:	90 95       	com	r25
     822:	87 70       	andi	r24, 0x07	; 7
     824:	90 70       	andi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <__vector_20+0x18a>
     828:	35 95       	asr	r19
     82a:	27 95       	ror	r18
     82c:	8a 95       	dec	r24
     82e:	e2 f7       	brpl	.-8      	; 0x828 <__vector_20+0x186>
     830:	20 ff       	sbrs	r18, 0
     832:	49 c0       	rjmp	.+146    	; 0x8c6 <__vector_20+0x224>
     834:	43 c0       	rjmp	.+134    	; 0x8bc <__vector_20+0x21a>
						TCC1.PER = robotData.lowBitTime;
					}
				}
				// If the onOffTracker is 1, the next pulse time is used to space bits, so use "offTime"
				else {
					TCC1.PER = robotData.offTime;
     836:	80 91 45 21 	lds	r24, 0x2145
     83a:	90 91 46 21 	lds	r25, 0x2146
     83e:	28 c0       	rjmp	.+80     	; 0x890 <__vector_20+0x1ee>
					bitCounter++;

				}
			}
			// If iRobot encoding (3):
			else if(robotData.bitEncoding == 0x03) {
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	09 f0       	breq	.+2      	; 0x846 <__vector_20+0x1a4>
     844:	45 c0       	rjmp	.+138    	; 0x8d0 <__vector_20+0x22e>
				// If this tracker is a 0, then we just set IR off
				if(onOffTracker == 0) {
     846:	80 91 f0 23 	lds	r24, 0x23F0
     84a:	90 91 f1 23 	lds	r25, 0x23F1
     84e:	e4 2f       	mov	r30, r20
     850:	e6 95       	lsr	r30
     852:	e6 95       	lsr	r30
     854:	e6 95       	lsr	r30
     856:	24 2f       	mov	r18, r20
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	89 2b       	or	r24, r25
     85c:	f9 f4       	brne	.+62     	; 0x89c <__vector_20+0x1fa>
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	e5 5e       	subi	r30, 0xE5	; 229
     862:	fe 4d       	sbci	r31, 0xDE	; 222
     864:	84 a5       	ldd	r24, Z+44	; 0x2c
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	20 95       	com	r18
     86a:	30 95       	com	r19
     86c:	27 70       	andi	r18, 0x07	; 7
     86e:	30 70       	andi	r19, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <__vector_20+0x1d4>
     872:	95 95       	asr	r25
     874:	87 95       	ror	r24
     876:	2a 95       	dec	r18
     878:	e2 f7       	brpl	.-8      	; 0x872 <__vector_20+0x1d0>
     87a:	80 ff       	sbrs	r24, 0
     87c:	05 c0       	rjmp	.+10     	; 0x888 <__vector_20+0x1e6>
						TCC1.PER = robotData.lowBitTime;
     87e:	80 91 43 21 	lds	r24, 0x2143
     882:	90 91 44 21 	lds	r25, 0x2144
     886:	04 c0       	rjmp	.+8      	; 0x890 <__vector_20+0x1ee>
					}
					else {
						TCC1.PER = robotData.highBitTime;
     888:	80 91 41 21 	lds	r24, 0x2141
     88c:	90 91 42 21 	lds	r25, 0x2142
     890:	e0 e4       	ldi	r30, 0x40	; 64
     892:	f8 e0       	ldi	r31, 0x08	; 8
     894:	86 a3       	std	Z+38, r24	; 0x26
     896:	97 a3       	std	Z+39, r25	; 0x27
					}					
					bitCounter++;
     898:	4f 5f       	subi	r20, 0xFF	; 255
     89a:	2a c0       	rjmp	.+84     	; 0x8f0 <__vector_20+0x24e>
				}
				else {
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	e5 5e       	subi	r30, 0xE5	; 229
     8a0:	fe 4d       	sbci	r31, 0xDE	; 222
     8a2:	84 a5       	ldd	r24, Z+44	; 0x2c
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	20 95       	com	r18
     8a8:	30 95       	com	r19
     8aa:	27 70       	andi	r18, 0x07	; 7
     8ac:	30 70       	andi	r19, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__vector_20+0x212>
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	2a 95       	dec	r18
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__vector_20+0x20e>
     8b8:	80 ff       	sbrs	r24, 0
     8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <__vector_20+0x224>
						TCC1.PER = robotData.highBitTime;
     8bc:	80 91 41 21 	lds	r24, 0x2141
     8c0:	90 91 42 21 	lds	r25, 0x2142
     8c4:	94 cf       	rjmp	.-216    	; 0x7ee <__vector_20+0x14c>
					}
					else {
						TCC1.PER = robotData.lowBitTime;
     8c6:	80 91 43 21 	lds	r24, 0x2143
     8ca:	90 91 44 21 	lds	r25, 0x2144
     8ce:	8f cf       	rjmp	.-226    	; 0x7ee <__vector_20+0x14c>

				}
			}
			// Raw time encoding - data is stored a bit differently in irBytes in raw encoding. Each pair of bytes represents
			// one time measurement - so turn the signal on or off by that amount of time.
			else if(robotData.bitEncoding == 0x04) {
     8d0:	84 30       	cpi	r24, 0x04	; 4
     8d2:	81 f4       	brne	.+32     	; 0x8f4 <__vector_20+0x252>
				TCC1.PER = ((robotData.irBytes[bitCounter])<<8) + robotData.irBytes[bitCounter+1];
     8d4:	e4 2f       	mov	r30, r20
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	e5 5e       	subi	r30, 0xE5	; 229
     8da:	fe 4d       	sbci	r31, 0xDE	; 222
     8dc:	25 a5       	ldd	r18, Z+45	; 0x2d
     8de:	94 a5       	ldd	r25, Z+44	; 0x2c
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	82 0f       	add	r24, r18
     8e4:	91 1d       	adc	r25, r1
     8e6:	e0 e4       	ldi	r30, 0x40	; 64
     8e8:	f8 e0       	ldi	r31, 0x08	; 8
     8ea:	86 a3       	std	Z+38, r24	; 0x26
     8ec:	97 a3       	std	Z+39, r25	; 0x27
				bitCounter+=2;
     8ee:	4e 5f       	subi	r20, 0xFE	; 254
     8f0:	40 93 ef 23 	sts	0x23EF, r20
			}
		}
	}
}
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <BT_default_reset>:

// Restores factory default settings on the module, not currently used
void BT_default_reset() {

	// Turns the pin on, and then does the reset by toggling the pin three times
	BT_DEFAULT_RESET_PORT.OUTSET = BT_DEFAULT_RESET_PIN;
     916:	80 e2       	ldi	r24, 0x20	; 32
     918:	e0 e6       	ldi	r30, 0x60	; 96
     91a:	f6 e0       	ldi	r31, 0x06	; 6
     91c:	85 83       	std	Z+5, r24	; 0x05
     91e:	84 e6       	ldi	r24, 0x64	; 100
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	20 e2       	ldi	r18, 0x20	; 32
     924:	33 e0       	ldi	r19, 0x03	; 3
     926:	f9 01       	movw	r30, r18
     928:	31 97       	sbiw	r30, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <BT_default_reset+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92e:	d9 f7       	brne	.-10     	; 0x926 <BT_default_reset+0x10>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(10);
	for(int i = 0; i < 6; i++) {
		BT_DEFAULT_RESET_PORT.OUTTGL = BT_DEFAULT_RESET_PIN;
     934:	a0 e6       	ldi	r26, 0x60	; 96
     936:	b6 e0       	ldi	r27, 0x06	; 6
     938:	60 e2       	ldi	r22, 0x20	; 32
     93a:	40 e2       	ldi	r20, 0x20	; 32
     93c:	53 e0       	ldi	r21, 0x03	; 3
     93e:	17 96       	adiw	r26, 0x07	; 7
     940:	6c 93       	st	X, r22
     942:	17 97       	sbiw	r26, 0x07	; 7
     944:	84 e6       	ldi	r24, 0x64	; 100
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fa 01       	movw	r30, r20
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <BT_default_reset+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     94e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     950:	d9 f7       	brne	.-10     	; 0x948 <BT_default_reset+0x32>
void BT_default_reset() {

	// Turns the pin on, and then does the reset by toggling the pin three times
	BT_DEFAULT_RESET_PORT.OUTSET = BT_DEFAULT_RESET_PIN;
	_delay_ms(10);
	for(int i = 0; i < 6; i++) {
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	26 30       	cpi	r18, 0x06	; 6
     958:	31 05       	cpc	r19, r1
     95a:	89 f7       	brne	.-30     	; 0x93e <BT_default_reset+0x28>
		BT_DEFAULT_RESET_PORT.OUTTGL = BT_DEFAULT_RESET_PIN;
		_delay_ms(10);
	}
	BT_DEFAULT_RESET_PORT.OUTCLR = BT_DEFAULT_RESET_PIN;
     95c:	80 e2       	ldi	r24, 0x20	; 32
     95e:	e0 e6       	ldi	r30, 0x60	; 96
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	86 83       	std	Z+6, r24	; 0x06

}
     964:	08 95       	ret

00000966 <BT_reset>:

// Resets the module
void BT_reset() {

	BT_RESET_PORT.OUTCLR = BT_RESET_PIN;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	e0 e4       	ldi	r30, 0x40	; 64
     96a:	f6 e0       	ldi	r31, 0x06	; 6
     96c:	86 83       	std	Z+6, r24	; 0x06
     96e:	84 e6       	ldi	r24, 0x64	; 100
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	20 e2       	ldi	r18, 0x20	; 32
     974:	33 e0       	ldi	r19, 0x03	; 3
     976:	f9 01       	movw	r30, r18
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <BT_reset+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     97c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     97e:	d9 f7       	brne	.-10     	; 0x976 <BT_reset+0x10>
	_delay_ms(10);
	BT_RESET_PORT.OUTSET = BT_RESET_PIN;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	e0 e4       	ldi	r30, 0x40	; 64
     984:	f6 e0       	ldi	r31, 0x06	; 6
     986:	85 83       	std	Z+5, r24	; 0x05
     988:	08 95       	ret

0000098a <init_BT>:
/** For use with Brainlink's RN-42 module. Just includes a few helper functions, most of the serial comm stuff is in uart.c. */


// Resets the module, and then initializes the Xmega's UART that is attached to the module
void init_BT() {
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
	// Set the pins
	BT_RESET_PORT.DIRSET = BT_RESET_PIN;
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	e0 e4       	ldi	r30, 0x40	; 64
     994:	f6 e0       	ldi	r31, 0x06	; 6
     996:	81 83       	std	Z+1, r24	; 0x01
	BT_DEFAULT_RESET_PORT.DIRSET = BT_DEFAULT_RESET_PIN;
     998:	00 e6       	ldi	r16, 0x60	; 96
     99a:	16 e0       	ldi	r17, 0x06	; 6
     99c:	60 e2       	ldi	r22, 0x20	; 32
     99e:	f6 2e       	mov	r15, r22
     9a0:	f8 01       	movw	r30, r16
     9a2:	f1 82       	std	Z+1, r15	; 0x01

	// Reset once
	BT_reset();
     9a4:	0e 94 b3 04 	call	0x966	; 0x966 <BT_reset>
	BT_DEFAULT_RESET_PORT.OUTCLR = BT_DEFAULT_RESET_PIN;	
     9a8:	f8 01       	movw	r30, r16
     9aa:	f6 82       	std	Z+6, r15	; 0x06

	// Set up uart connected to bluetooth
	init_bt_uart();
     9ac:	0e 94 07 01 	call	0x20e	; 0x20e <init_bt_uart>

}
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	08 95       	ret

000009b8 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
     9b8:	dc 01       	movw	r26, r24
     9ba:	fb 01       	movw	r30, r22
	twi->interface = module;
     9bc:	6d 93       	st	X+, r22
     9be:	7c 93       	st	X, r23
     9c0:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
     9c2:	48 63       	ori	r20, 0x38	; 56
     9c4:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
     9c6:	ed 91       	ld	r30, X+
     9c8:	fc 91       	ld	r31, X
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     9ce:	ed 91       	ld	r30, X+
     9d0:	fc 91       	ld	r31, X
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	84 83       	std	Z+4, r24	; 0x04
}
     9d6:	08 95       	ret

000009d8 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
     9d8:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
     9da:	01 90       	ld	r0, Z+
     9dc:	f0 81       	ld	r31, Z
     9de:	e0 2d       	mov	r30, r0
     9e0:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
     9e2:	83 70       	andi	r24, 0x03	; 3
     9e4:	08 95       	ret

000009e6 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
     9e6:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status & TWIM_STATUS_READY);
     9e8:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret

000009ee <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
     9ee:	0f 93       	push	r16
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	dc 01       	movw	r26, r24
     9f6:	72 2f       	mov	r23, r18
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
     9f8:	25 30       	cpi	r18, 0x05	; 5
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <TWI_MasterWriteRead+0x10>
     9fc:	44 c0       	rjmp	.+136    	; 0xa86 <TWI_MasterWriteRead+0x98>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
     9fe:	05 30       	cpi	r16, 0x05	; 5
     a00:	08 f0       	brcs	.+2      	; 0xa04 <TWI_MasterWriteRead+0x16>
     a02:	41 c0       	rjmp	.+130    	; 0xa86 <TWI_MasterWriteRead+0x98>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
     a04:	1f 96       	adiw	r26, 0x0f	; 15
     a06:	8c 91       	ld	r24, X
     a08:	1f 97       	sbiw	r26, 0x0f	; 15
     a0a:	88 23       	and	r24, r24
     a0c:	e1 f5       	brne	.+120    	; 0xa86 <TWI_MasterWriteRead+0x98>
		twi->status = TWIM_STATUS_BUSY;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	1f 96       	adiw	r26, 0x0f	; 15
     a12:	8c 93       	st	X, r24
     a14:	1f 97       	sbiw	r26, 0x0f	; 15
		twi->result = TWIM_RESULT_UNKNOWN;
     a16:	50 96       	adiw	r26, 0x10	; 16
     a18:	1c 92       	st	X, r1
     a1a:	50 97       	sbiw	r26, 0x10	; 16

		twi->address = address<<1;
     a1c:	66 0f       	add	r22, r22
     a1e:	12 96       	adiw	r26, 0x02	; 2
     a20:	6c 93       	st	X, r22
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	ea 01       	movw	r28, r20
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <TWI_MasterWriteRead+0x4c>

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
			twi->writeData[bufferIndex] = writeData[bufferIndex];
     a2c:	89 91       	ld	r24, Y+
     a2e:	fd 01       	movw	r30, r26
     a30:	e2 0f       	add	r30, r18
     a32:	f3 1f       	adc	r31, r19
     a34:	83 83       	std	Z+3, r24	; 0x03
     a36:	2f 5f       	subi	r18, 0xFF	; 255
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
     a3a:	27 17       	cp	r18, r23
     a3c:	b8 f3       	brcs	.-18     	; 0xa2c <TWI_MasterWriteRead+0x3e>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
     a3e:	1b 96       	adiw	r26, 0x0b	; 11
     a40:	7c 93       	st	X, r23
     a42:	1b 97       	sbiw	r26, 0x0b	; 11
		twi->bytesToRead = bytesToRead;
     a44:	1c 96       	adiw	r26, 0x0c	; 12
     a46:	0c 93       	st	X, r16
     a48:	1c 97       	sbiw	r26, 0x0c	; 12
		twi->bytesWritten = 0;
     a4a:	1d 96       	adiw	r26, 0x0d	; 13
     a4c:	1c 92       	st	X, r1
     a4e:	1d 97       	sbiw	r26, 0x0d	; 13
		twi->bytesRead = 0;
     a50:	1e 96       	adiw	r26, 0x0e	; 14
     a52:	1c 92       	st	X, r1
     a54:	1e 97       	sbiw	r26, 0x0e	; 14

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
     a56:	1b 96       	adiw	r26, 0x0b	; 11
     a58:	8c 91       	ld	r24, X
     a5a:	1b 97       	sbiw	r26, 0x0b	; 11
     a5c:	88 23       	and	r24, r24
     a5e:	29 f0       	breq	.+10     	; 0xa6a <TWI_MasterWriteRead+0x7c>
			uint8_t writeAddress = twi->address & ~0x01;
     a60:	12 96       	adiw	r26, 0x02	; 2
     a62:	8c 91       	ld	r24, X
     a64:	12 97       	sbiw	r26, 0x02	; 2
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	09 c0       	rjmp	.+18     	; 0xa7c <TWI_MasterWriteRead+0x8e>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
     a6a:	1c 96       	adiw	r26, 0x0c	; 12
     a6c:	8c 91       	ld	r24, X
     a6e:	1c 97       	sbiw	r26, 0x0c	; 12
     a70:	88 23       	and	r24, r24
     a72:	39 f0       	breq	.+14     	; 0xa82 <TWI_MasterWriteRead+0x94>
			uint8_t readAddress = twi->address | 0x01;
     a74:	12 96       	adiw	r26, 0x02	; 2
     a76:	8c 91       	ld	r24, X
     a78:	12 97       	sbiw	r26, 0x02	; 2
     a7a:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	86 83       	std	Z+6, r24	; 0x06
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <TWI_MasterWriteRead+0x9a>
     a86:	80 e0       	ldi	r24, 0x00	; 0
		}
		return true;
	} else {
		return false;
	}
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
     a90:	0f 93       	push	r16
     a92:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	return twi_status;
}
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
     aa2:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
     aa4:	00 e0       	ldi	r16, 0x00	; 0
     aa6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	return twi_status;
}
     aaa:	0f 91       	pop	r16
     aac:	08 95       	ret

00000aae <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     aae:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     ab0:	ed 91       	ld	r30, X+
     ab2:	fc 91       	ld	r31, X
     ab4:	11 97       	sbiw	r26, 0x01	; 1
     ab6:	94 81       	ldd	r25, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     ab8:	92 ff       	sbrs	r25, 2
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
		twi->result = TWIM_RESULT_BUS_ERROR;
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	50 96       	adiw	r26, 0x10	; 16
     ac4:	8c 93       	st	X, r24
     ac6:	50 97       	sbiw	r26, 0x10	; 16
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     ac8:	ed 91       	ld	r30, X+
     aca:	fc 91       	ld	r31, X
     acc:	11 97       	sbiw	r26, 0x01	; 1
     ace:	98 60       	ori	r25, 0x08	; 8
     ad0:	94 83       	std	Z+4, r25	; 0x04

	twi->status = TWIM_STATUS_READY;
     ad2:	1f 96       	adiw	r26, 0x0f	; 15
     ad4:	1c 92       	st	X, r1
}
     ad6:	08 95       	ret

00000ad8 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	dc 01       	movw	r26, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     ade:	1b 96       	adiw	r26, 0x0b	; 11
     ae0:	9c 91       	ld	r25, X
     ae2:	1b 97       	sbiw	r26, 0x0b	; 11
	uint8_t bytesToRead   = twi->bytesToRead;
     ae4:	1c 96       	adiw	r26, 0x0c	; 12
     ae6:	2c 91       	ld	r18, X
     ae8:	1c 97       	sbiw	r26, 0x0c	; 12

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     aea:	cd 91       	ld	r28, X+
     aec:	dc 91       	ld	r29, X
     aee:	11 97       	sbiw	r26, 0x01	; 1
     af0:	8c 81       	ldd	r24, Y+4	; 0x04
     af2:	84 ff       	sbrs	r24, 4
     af4:	04 c0       	rjmp	.+8      	; 0xafe <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	8b 83       	std	Y+3, r24	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     afa:	85 e0       	ldi	r24, 0x05	; 5
     afc:	21 c0       	rjmp	.+66     	; 0xb40 <TWI_MasterWriteHandler+0x68>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     afe:	1d 96       	adiw	r26, 0x0d	; 13
     b00:	8c 91       	ld	r24, X
     b02:	1d 97       	sbiw	r26, 0x0d	; 13
     b04:	89 17       	cp	r24, r25
     b06:	78 f4       	brcc	.+30     	; 0xb26 <TWI_MasterWriteHandler+0x4e>
		uint8_t data = twi->writeData[twi->bytesWritten];
     b08:	1d 96       	adiw	r26, 0x0d	; 13
     b0a:	8c 91       	ld	r24, X
     b0c:	1d 97       	sbiw	r26, 0x0d	; 13
     b0e:	fd 01       	movw	r30, r26
     b10:	e8 0f       	add	r30, r24
     b12:	f1 1d       	adc	r31, r1
     b14:	83 81       	ldd	r24, Z+3	; 0x03
		twi->interface->MASTER.DATA = data;
     b16:	8f 83       	std	Y+7, r24	; 0x07
		++twi->bytesWritten;
     b18:	1d 96       	adiw	r26, 0x0d	; 13
     b1a:	8c 91       	ld	r24, X
     b1c:	1d 97       	sbiw	r26, 0x0d	; 13
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	1d 96       	adiw	r26, 0x0d	; 13
     b22:	8c 93       	st	X, r24
     b24:	12 c0       	rjmp	.+36     	; 0xb4a <TWI_MasterWriteHandler+0x72>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     b26:	1e 96       	adiw	r26, 0x0e	; 14
     b28:	8c 91       	ld	r24, X
     b2a:	1e 97       	sbiw	r26, 0x0e	; 14
     b2c:	82 17       	cp	r24, r18
     b2e:	28 f4       	brcc	.+10     	; 0xb3a <TWI_MasterWriteHandler+0x62>
		uint8_t readAddress = twi->address | 0x01;
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	8c 91       	ld	r24, X
     b34:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
     b36:	8e 83       	std	Y+6, r24	; 0x06
     b38:	08 c0       	rjmp	.+16     	; 0xb4a <TWI_MasterWriteHandler+0x72>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b3a:	83 e0       	ldi	r24, 0x03	; 3
     b3c:	8b 83       	std	Y+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	50 96       	adiw	r26, 0x10	; 16
     b42:	8c 93       	st	X, r24
     b44:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b46:	1f 96       	adiw	r26, 0x0f	; 15
     b48:	1c 92       	st	X, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     b50:	dc 01       	movw	r26, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     b52:	1e 96       	adiw	r26, 0x0e	; 14
     b54:	8c 91       	ld	r24, X
     b56:	1e 97       	sbiw	r26, 0x0e	; 14
     b58:	ed 91       	ld	r30, X+
     b5a:	fc 91       	ld	r31, X
     b5c:	11 97       	sbiw	r26, 0x01	; 1
     b5e:	84 30       	cpi	r24, 0x04	; 4
     b60:	80 f4       	brcc	.+32     	; 0xb82 <TWI_MasterReadHandler+0x32>
		uint8_t data = twi->interface->MASTER.DATA;
     b62:	97 81       	ldd	r25, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
     b64:	1e 96       	adiw	r26, 0x0e	; 14
     b66:	8c 91       	ld	r24, X
     b68:	1e 97       	sbiw	r26, 0x0e	; 14
     b6a:	fd 01       	movw	r30, r26
     b6c:	e8 0f       	add	r30, r24
     b6e:	f1 1d       	adc	r31, r1
     b70:	97 83       	std	Z+7, r25	; 0x07
		twi->bytesRead++;
     b72:	1e 96       	adiw	r26, 0x0e	; 14
     b74:	8c 91       	ld	r24, X
     b76:	1e 97       	sbiw	r26, 0x0e	; 14
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	1e 96       	adiw	r26, 0x0e	; 14
     b7c:	8c 93       	st	X, r24
     b7e:	1e 97       	sbiw	r26, 0x0e	; 14
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <TWI_MasterReadHandler+0x44>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	50 96       	adiw	r26, 0x10	; 16
     b8a:	8c 93       	st	X, r24
     b8c:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b8e:	1f 96       	adiw	r26, 0x0f	; 15
     b90:	1c 92       	st	X, r1
     b92:	1f 97       	sbiw	r26, 0x0f	; 15
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     b94:	1c 96       	adiw	r26, 0x0c	; 12
     b96:	9c 91       	ld	r25, X
     b98:	1c 97       	sbiw	r26, 0x0c	; 12

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     b9a:	1e 96       	adiw	r26, 0x0e	; 14
     b9c:	8c 91       	ld	r24, X
     b9e:	1e 97       	sbiw	r26, 0x0e	; 14
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	11 97       	sbiw	r26, 0x01	; 1
     ba6:	89 17       	cp	r24, r25
     ba8:	18 f4       	brcc	.+6      	; 0xbb0 <TWI_MasterReadHandler+0x60>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	83 83       	std	Z+3, r24	; 0x03
     bae:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     bb0:	87 e0       	ldi	r24, 0x07	; 7
     bb2:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	50 96       	adiw	r26, 0x10	; 16
     bb8:	8c 93       	st	X, r24
     bba:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     bbc:	1f 96       	adiw	r26, 0x0f	; 15
     bbe:	1c 92       	st	X, r1
     bc0:	08 95       	ret

00000bc2 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
     bc2:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     bc4:	ed 91       	ld	r30, X+
     bc6:	fc 91       	ld	r31, X
     bc8:	11 97       	sbiw	r26, 0x01	; 1
     bca:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     bcc:	24 2f       	mov	r18, r20
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	c9 01       	movw	r24, r18
     bd2:	8c 70       	andi	r24, 0x0C	; 12
     bd4:	90 70       	andi	r25, 0x00	; 0
     bd6:	89 2b       	or	r24, r25
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 57 05 	call	0xaae	; 0xaae <TWI_MasterArbitrationLostBusErrorHandler>
     be0:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     be2:	46 ff       	sbrs	r20, 6
     be4:	04 c0       	rjmp	.+8      	; 0xbee <TWI_MasterInterruptHandler+0x2c>
		TWI_MasterWriteHandler(twi);
     be6:	cd 01       	movw	r24, r26
     be8:	0e 94 6c 05 	call	0xad8	; 0xad8 <TWI_MasterWriteHandler>
     bec:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     bee:	47 ff       	sbrs	r20, 7
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <TWI_MasterInterruptHandler+0x38>
		TWI_MasterReadHandler(twi);
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 a8 05 	call	0xb50	; 0xb50 <TWI_MasterReadHandler>
     bf8:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     bfa:	86 e0       	ldi	r24, 0x06	; 6
     bfc:	50 96       	adiw	r26, 0x10	; 16
     bfe:	8c 93       	st	X, r24
     c00:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     c02:	1f 96       	adiw	r26, 0x0f	; 15
     c04:	1c 92       	st	X, r1
     c06:	08 95       	ret

00000c08 <TWI_MasterTransactionFinished>:
 *
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
     c08:	fc 01       	movw	r30, r24
	twi->result = result;
     c0a:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
     c0c:	17 86       	std	Z+15, r1	; 0x0f
}
     c0e:	08 95       	ret

00000c10 <getAccelData>:


// Function to return the data - must call updateAccel() first
AccelData getAccelData()
{
	return _acc;
     c10:	60 91 09 21 	lds	r22, 0x2109
     c14:	70 91 0a 21 	lds	r23, 0x210A
}
     c18:	80 91 0b 21 	lds	r24, 0x210B
     c1c:	90 91 0c 21 	lds	r25, 0x210C
     c20:	08 95       	ret

00000c22 <newAccelData>:

// Tells you if new data is ready
int newAccelData()
{
	
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
     c22:	80 91 dc 22 	lds	r24, 0x22DC
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	19 f0       	breq	.+6      	; 0xc30 <newAccelData+0xe>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	09 c0       	rjmp	.+18     	; 0xc42 <newAccelData+0x20>
     c30:	80 91 db 22 	lds	r24, 0x22DB
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	81 11       	cpse	r24, r1
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	98 27       	eor	r25, r24
     c3e:	29 2f       	mov	r18, r25
     c40:	30 e0       	ldi	r19, 0x00	; 0
}
     c42:	c9 01       	movw	r24, r18
     c44:	08 95       	ret

00000c46 <updateAccel>:

// this is currently non-blocking. Blocking was attempted (commented out) but seemed to block forever.
void updateAccel()
{
     c46:	0f 93       	push	r16
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
//	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
//	{ 
		//char oldstatus = _acc.status & ACC_O_MASK;
		uint8_t buf = 0x00;// read 4 bytes, starting at 0x00 (x,y,z,status)
     c52:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
     c54:	8c ec       	ldi	r24, 0xCC	; 204
     c56:	92 e2       	ldi	r25, 0x22	; 34
     c58:	6c e4       	ldi	r22, 0x4C	; 76
     c5a:	ae 01       	movw	r20, r28
     c5c:	4f 5f       	subi	r20, 0xFF	; 255
     c5e:	5f 4f       	sbci	r21, 0xFF	; 255
     c60:	21 e0       	ldi	r18, 0x01	; 1
     c62:	04 e0       	ldi	r16, 0x04	; 4
     c64:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
		
		while (twiMaster.status != TWIM_STATUS_READY);
     c68:	80 91 db 22 	lds	r24, 0x22DB
     c6c:	88 23       	and	r24, r24
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <updateAccel+0x22>
		_acc.x = twiMaster.readData[0];
     c70:	80 91 d3 22 	lds	r24, 0x22D3
     c74:	80 93 09 21 	sts	0x2109, r24
		_acc.y = twiMaster.readData[1];
     c78:	80 91 d4 22 	lds	r24, 0x22D4
     c7c:	80 93 0a 21 	sts	0x210A, r24
		_acc.z = twiMaster.readData[2];
     c80:	80 91 d5 22 	lds	r24, 0x22D5
     c84:	80 93 0b 21 	sts	0x210B, r24
		_acc.status = twiMaster.readData[3];
     c88:	80 91 d6 22 	lds	r24, 0x22D6
     c8c:	80 93 0c 21 	sts	0x210C, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
     c90:	10 92 dc 22 	sts	0x22DC, r1
		
//	}
}
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <initAccel>:

// Initializes the accelerometer
// Doesn't *really* need to be blocking, just checked for success
void initAccel()
{
     c9e:	0f 93       	push	r16
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <initAccel+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	cli();
     caa:	f8 94       	cli
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
	twi->interface = module;
     cac:	e0 ea       	ldi	r30, 0xA0	; 160
     cae:	f4 e0       	ldi	r31, 0x04	; 4
     cb0:	e0 93 cc 22 	sts	0x22CC, r30
     cb4:	f0 93 cd 22 	sts	0x22CD, r31
	twi->interface->MASTER.CTRLA = intLevel |
     cb8:	88 e7       	ldi	r24, 0x78	; 120
     cba:	81 83       	std	Z+1, r24	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
     cbc:	8b e9       	ldi	r24, 0x9B	; 155
     cbe:	85 83       	std	Z+5, r24	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	84 83       	std	Z+4, r24	; 0x04
	               &TWIE,
	               TWI_MASTER_INTLVL_LO_gc,
	               TWI_BAUDSETTING);

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
     cc4:	80 91 a2 00 	lds	r24, 0x00A2
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	e0 ea       	ldi	r30, 0xA0	; 160
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	82 83       	std	Z+2, r24	; 0x02
	sei();
     cd0:	78 94       	sei

	// prepare configuration data for the accelerometer
	uint8_t buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
     cd2:	87 e0       	ldi	r24, 0x07	; 7
     cd4:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b01010000;  // set interrupt to push-pull, mode to standby (mode and Ton are both 0), auto-sleep to enable
     cd6:	80 e5       	ldi	r24, 0x50	; 80
     cd8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cda:	8c ec       	ldi	r24, 0xCC	; 204
     cdc:	92 e2       	ldi	r25, 0x22	; 34
     cde:	6c e4       	ldi	r22, 0x4C	; 76
     ce0:	ae 01       	movw	r20, r28
     ce2:	4f 5f       	subi	r20, 0xFF	; 255
     ce4:	5f 4f       	sbci	r21, 0xFF	; 255
     ce6:	22 e0       	ldi	r18, 0x02	; 2
     ce8:	00 e0       	ldi	r16, 0x00	; 0
     cea:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	
	while (twiMaster.status != TWIM_STATUS_READY);
     cee:	80 91 db 22 	lds	r24, 0x22DB
     cf2:	88 23       	and	r24, r24
     cf4:	e1 f7       	brne	.-8      	; 0xcee <initAccel+0x50>


	// set sleep mode
	buf[0] = 0x05;
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
     cfa:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cfc:	8c ec       	ldi	r24, 0xCC	; 204
     cfe:	92 e2       	ldi	r25, 0x22	; 34
     d00:	6c e4       	ldi	r22, 0x4C	; 76
     d02:	ae 01       	movw	r20, r28
     d04:	4f 5f       	subi	r20, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	22 e0       	ldi	r18, 0x02	; 2
     d0a:	00 e0       	ldi	r16, 0x00	; 0
     d0c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d10:	80 91 db 22 	lds	r24, 0x22DB
     d14:	88 23       	and	r24, r24
     d16:	e1 f7       	brne	.-8      	; 0xd10 <initAccel+0x72>

	// set interrupts
	buf[0] = 0x06;
     d18:	86 e0       	ldi	r24, 0x06	; 6
     d1a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b11100100;  // set interrupts to occur with a tap or shake (PDINT, SHINTX/Y/Z)
     d1c:	84 ee       	ldi	r24, 0xE4	; 228
     d1e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d20:	8c ec       	ldi	r24, 0xCC	; 204
     d22:	92 e2       	ldi	r25, 0x22	; 34
     d24:	6c e4       	ldi	r22, 0x4C	; 76
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5f       	subi	r20, 0xFF	; 255
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	22 e0       	ldi	r18, 0x02	; 2
     d2e:	00 e0       	ldi	r16, 0x00	; 0
     d30:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d34:	80 91 db 22 	lds	r24, 0x22DB
     d38:	88 23       	and	r24, r24
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <initAccel+0x96>

	// set filter rate
	buf[0] = 0x08;
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;		// Set filter rate to 8 samples, set number of samples to 120 in waking state, 32 in sleeping (hopefully we avoid sleep)
     d40:	80 ee       	ldi	r24, 0xE0	; 224
     d42:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d44:	8c ec       	ldi	r24, 0xCC	; 204
     d46:	92 e2       	ldi	r25, 0x22	; 34
     d48:	6c e4       	ldi	r22, 0x4C	; 76
     d4a:	ae 01       	movw	r20, r28
     d4c:	4f 5f       	subi	r20, 0xFF	; 255
     d4e:	5f 4f       	sbci	r21, 0xFF	; 255
     d50:	22 e0       	ldi	r18, 0x02	; 2
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d58:	80 91 db 22 	lds	r24, 0x22DB
     d5c:	88 23       	and	r24, r24
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <initAccel+0xba>
	
	// set tap detection
	buf[0] = 0x09;
     d60:	89 e0       	ldi	r24, 0x09	; 9
     d62:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b00001000;  	// 0x09	Pulse detection -> +- 8 counts, all axes
     d64:	88 e0       	ldi	r24, 0x08	; 8
     d66:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d68:	8c ec       	ldi	r24, 0xCC	; 204
     d6a:	92 e2       	ldi	r25, 0x22	; 34
     d6c:	6c e4       	ldi	r22, 0x4C	; 76
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	22 e0       	ldi	r18, 0x02	; 2
     d76:	00 e0       	ldi	r16, 0x00	; 0
     d78:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d7c:	80 91 db 22 	lds	r24, 0x22DB
     d80:	88 23       	and	r24, r24
     d82:	e1 f7       	brne	.-8      	; 0xd7c <initAccel+0xde>

	// set tap debounce
	buf[0] = 0x0A;
     d84:	8a e0       	ldi	r24, 0x0A	; 10
     d86:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// Tap debounce ->	16 detections
     d88:	80 e1       	ldi	r24, 0x10	; 16
     d8a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d8c:	8c ec       	ldi	r24, 0xCC	; 204
     d8e:	92 e2       	ldi	r25, 0x22	; 34
     d90:	6c e4       	ldi	r22, 0x4C	; 76
     d92:	ae 01       	movw	r20, r28
     d94:	4f 5f       	subi	r20, 0xFF	; 255
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	22 e0       	ldi	r18, 0x02	; 2
     d9a:	00 e0       	ldi	r16, 0x00	; 0
     d9c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
     da0:	80 91 db 22 	lds	r24, 0x22DB
     da4:	88 23       	and	r24, r24
     da6:	e1 f7       	brne	.-8      	; 0xda0 <initAccel+0x102>
	
	// enable the accelerometer
	buf[0] = 0x07;
     da8:	87 e0       	ldi	r24, 0x07	; 7
     daa:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b01010001; 
     dac:	81 e5       	ldi	r24, 0x51	; 81
     dae:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     db0:	8c ec       	ldi	r24, 0xCC	; 204
     db2:	92 e2       	ldi	r25, 0x22	; 34
     db4:	6c e4       	ldi	r22, 0x4C	; 76
     db6:	ae 01       	movw	r20, r28
     db8:	4f 5f       	subi	r20, 0xFF	; 255
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	22 e0       	ldi	r18, 0x02	; 2
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	0e 94 f7 04 	call	0x9ee	; 0x9ee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     dc4:	80 91 db 22 	lds	r24, 0x22DB
     dc8:	88 23       	and	r24, r24
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <initAccel+0x126>
	
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
     dd8:	1f 92       	push	r1
     dda:	0f 92       	push	r0
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	0f 92       	push	r0
     de0:	11 24       	eor	r1, r1
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	7f 93       	push	r23
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     dfa:	8c ec       	ldi	r24, 0xCC	; 204
     dfc:	92 e2       	ldi	r25, 0x22	; 34
     dfe:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <TWI_MasterInterruptHandler>
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	bf 91       	pop	r27
     e08:	af 91       	pop	r26
     e0a:	9f 91       	pop	r25
     e0c:	8f 91       	pop	r24
     e0e:	7f 91       	pop	r23
     e10:	6f 91       	pop	r22
     e12:	5f 91       	pop	r21
     e14:	4f 91       	pop	r20
     e16:	3f 91       	pop	r19
     e18:	2f 91       	pop	r18
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <init_dac>:
/* Functions for manipulating the Xmega's DAC, for use with Brainlink's auxiliary ports */


// Set up the DAC to dual channel mode, 8 bit operation, VCC reference.
void init_dac() {
	DACB.CTRLB = DAC_CHSEL_DUAL_gc; // Dual channel mode
     e24:	e0 e2       	ldi	r30, 0x20	; 32
     e26:	f3 e0       	ldi	r31, 0x03	; 3
     e28:	80 e4       	ldi	r24, 0x40	; 64
     e2a:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | 0x01;  // Set Analog voltage to reference, Left adjust to use just top 8 bits
     e2c:	89 e0       	ldi	r24, 0x09	; 9
     e2e:	82 83       	std	Z+2, r24	; 0x02
	DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_64CLK_gc; // 64 clock cycles per conversion, 256 per refresh
     e30:	82 e5       	ldi	r24, 0x52	; 82
     e32:	84 83       	std	Z+4, r24	; 0x04
	DACB.CTRLA = DAC_ENABLE_bm;	// Enable channels 0 and 1 and enable DAC
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 20 03 	sts	0x0320, r24
}

// Sets DAC Ch0
void set_dac0(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
     e3a:	80 91 20 03 	lds	r24, 0x0320
     e3e:	84 60       	ori	r24, 0x04	; 4
     e40:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
     e44:	80 91 25 03 	lds	r24, 0x0325
     e48:	80 ff       	sbrs	r24, 0
     e4a:	fc cf       	rjmp	.-8      	; 0xe44 <init_dac+0x20>
	
	DACB.CH0DATAH = val;
     e4c:	e0 e2       	ldi	r30, 0x20	; 32
     e4e:	f3 e0       	ldi	r31, 0x03	; 3
     e50:	11 8e       	std	Z+25, r1	; 0x19
}

// Sets DAC Ch1
void set_dac1(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
     e52:	80 91 20 03 	lds	r24, 0x0320
     e56:	88 60       	ori	r24, 0x08	; 8
     e58:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
     e5c:	80 91 25 03 	lds	r24, 0x0325
     e60:	81 ff       	sbrs	r24, 1
     e62:	fc cf       	rjmp	.-8      	; 0xe5c <init_dac+0x38>
	
	DACB.CH1DATAH = val;
     e64:	e0 e2       	ldi	r30, 0x20	; 32
     e66:	f3 e0       	ldi	r31, 0x03	; 3
     e68:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | 0x01;  // Set Analog voltage to reference, Left adjust to use just top 8 bits
	DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_64CLK_gc; // 64 clock cycles per conversion, 256 per refresh
	DACB.CTRLA = DAC_ENABLE_bm;	// Enable channels 0 and 1 and enable DAC
	set_dac0(0); // Set both DACs to 0
	set_dac1(0);
}
     e6a:	08 95       	ret

00000e6c <set_dac0>:

// Sets DAC Ch0
void set_dac0(uint8_t val) {
     e6c:	98 2f       	mov	r25, r24
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
     e6e:	80 91 20 03 	lds	r24, 0x0320
     e72:	84 60       	ori	r24, 0x04	; 4
     e74:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
     e78:	80 91 25 03 	lds	r24, 0x0325
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	fc cf       	rjmp	.-8      	; 0xe78 <set_dac0+0xc>
	
	DACB.CH0DATAH = val;
     e80:	e0 e2       	ldi	r30, 0x20	; 32
     e82:	f3 e0       	ldi	r31, 0x03	; 3
     e84:	91 8f       	std	Z+25, r25	; 0x19
}
     e86:	08 95       	ret

00000e88 <set_dac1>:

// Sets DAC Ch1
void set_dac1(uint8_t val) {
     e88:	98 2f       	mov	r25, r24
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
     e8a:	80 91 20 03 	lds	r24, 0x0320
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
     e94:	80 91 25 03 	lds	r24, 0x0325
     e98:	81 ff       	sbrs	r24, 1
     e9a:	fc cf       	rjmp	.-8      	; 0xe94 <set_dac1+0xc>
	
	DACB.CH1DATAH = val;
     e9c:	e0 e2       	ldi	r30, 0x20	; 32
     e9e:	f3 e0       	ldi	r31, 0x03	; 3
     ea0:	93 8f       	std	Z+27, r25	; 0x1b
}
     ea2:	08 95       	ret

00000ea4 <disable_dac0>:

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
     ea4:	e0 e2       	ldi	r30, 0x20	; 32
     ea6:	f3 e0       	ldi	r31, 0x03	; 3
     ea8:	80 81       	ld	r24, Z
     eaa:	8b 7f       	andi	r24, 0xFB	; 251
     eac:	80 83       	st	Z, r24
}
     eae:	08 95       	ret

00000eb0 <disable_dac1>:

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
     eb0:	e0 e2       	ldi	r30, 0x20	; 32
     eb2:	f3 e0       	ldi	r31, 0x03	; 3
     eb4:	80 81       	ld	r24, Z
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	80 83       	st	Z, r24
}
     eba:	08 95       	ret

00000ebc <init_buzzer>:


// Configures the buzzer
void init_buzzer() {
	// Set frequency maximum to 62,500 - clockspeed/256
	TCD1.CTRLA = TC_CLKSEL_DIV256_gc;
     ebc:	e0 e4       	ldi	r30, 0x40	; 64
     ebe:	f9 e0       	ldi	r31, 0x09	; 9
     ec0:	86 e0       	ldi	r24, 0x06	; 6
     ec2:	80 83       	st	Z, r24
	// Set counter to frequency mode, this lets us vary frequency and keeps duty cycle at 50%
	TCD1.CTRLB = TC_WGMODE_FRQ_gc;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	81 83       	std	Z+1, r24	; 0x01
	// Set pin to output
	PORTD.DIRSET |= PIN4_bm;
     ec8:	e0 e6       	ldi	r30, 0x60	; 96
     eca:	f6 e0       	ldi	r31, 0x06	; 6
     ecc:	81 81       	ldd	r24, Z+1	; 0x01
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR |= PIN4_bm;
     ed2:	86 81       	ldd	r24, Z+6	; 0x06
     ed4:	80 61       	ori	r24, 0x10	; 16
     ed6:	86 83       	std	Z+6, r24	; 0x06
}
     ed8:	08 95       	ret

00000eda <set_buzzer>:

// Set buzzer enables the waveform and sets it to a given frequency
void set_buzzer(int frequency) {
	// Enable waveform output
	TCD1.CTRLB |= TC1_CCAEN_bm;
     eda:	e0 e4       	ldi	r30, 0x40	; 64
     edc:	f9 e0       	ldi	r31, 0x09	; 9
     ede:	21 81       	ldd	r18, Z+1	; 0x01
     ee0:	20 61       	ori	r18, 0x10	; 16
     ee2:	21 83       	std	Z+1, r18	; 0x01
	// Set the frequency
	cli();
     ee4:	f8 94       	cli
	TCD1.CCA = frequency;
     ee6:	e0 e4       	ldi	r30, 0x40	; 64
     ee8:	f9 e0       	ldi	r31, 0x09	; 9
     eea:	80 a7       	std	Z+40, r24	; 0x28
     eec:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     eee:	78 94       	sei
}
     ef0:	08 95       	ret

00000ef2 <turn_off_buzzer>:

// Disables the buzzer, and if the output is on, turns it off
void turn_off_buzzer() {
	// Disable the Waveform output
	TCD1.CTRLB &= (~TC1_CCAEN_bm);
     ef2:	e0 e4       	ldi	r30, 0x40	; 64
     ef4:	f9 e0       	ldi	r31, 0x09	; 9
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	81 83       	std	Z+1, r24	; 0x01
	// Turn off the pin just in case
	PORTD.OUTCLR |= PIN4_bm;
     efc:	e0 e6       	ldi	r30, 0x60	; 96
     efe:	f6 e0       	ldi	r31, 0x06	; 6
     f00:	86 81       	ldd	r24, Z+6	; 0x06
     f02:	80 61       	ori	r24, 0x10	; 16
     f04:	86 83       	std	Z+6, r24	; 0x06
}
     f06:	08 95       	ret

00000f08 <set_pwm>:

// Sets up PWM to a given frequency (both channels must share the same frequency)
void set_pwm() {

	// Set clock to 32 MHz
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     f08:	e0 e0       	ldi	r30, 0x00	; 0
     f0a:	fa e0       	ldi	r31, 0x0A	; 10
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 83       	st	Z, r24
	
	// Turn on single slope pwm waveform generation
	TCE0.CTRLB = TC_WGMODE_SS_gc;
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	81 83       	std	Z+1, r24	; 0x01
	// Turn off other registers in case they were set by IR read
	TCE0.CTRLD = 0x00;
     f14:	13 82       	std	Z+3, r1	; 0x03
	// Set frequency of the PWM signal
	TCE0.PERBUF = pwm_frequency;
     f16:	80 91 00 20 	lds	r24, 0x2000
     f1a:	90 91 01 20 	lds	r25, 0x2001
     f1e:	86 ab       	std	Z+54, r24	; 0x36
     f20:	97 ab       	std	Z+55, r25	; 0x37

}
     f22:	08 95       	ret

00000f24 <turn_off_pwm0>:

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
     f24:	e0 e0       	ldi	r30, 0x00	; 0
     f26:	fa e0       	ldi	r31, 0x0A	; 10
     f28:	81 81       	ldd	r24, Z+1	; 0x01
     f2a:	8f 7b       	andi	r24, 0xBF	; 191
     f2c:	81 83       	std	Z+1, r24	; 0x01
}
     f2e:	08 95       	ret

00000f30 <turn_off_pwm1>:

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
     f30:	e0 e0       	ldi	r30, 0x00	; 0
     f32:	fa e0       	ldi	r31, 0x0A	; 10
     f34:	81 81       	ldd	r24, Z+1	; 0x01
     f36:	8f 77       	andi	r24, 0x7F	; 127
     f38:	81 83       	std	Z+1, r24	; 0x01
}
     f3a:	08 95       	ret

00000f3c <set_pwm0>:

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm0(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCCEN_bm;
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	ba e0       	ldi	r27, 0x0A	; 10
     f40:	11 96       	adiw	r26, 0x01	; 1
     f42:	2c 91       	ld	r18, X
     f44:	11 97       	sbiw	r26, 0x01	; 1
     f46:	20 64       	ori	r18, 0x40	; 64
     f48:	11 96       	adiw	r26, 0x01	; 1
     f4a:	2c 93       	st	X, r18
     f4c:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = PIN2_bm;
     f4e:	24 e0       	ldi	r18, 0x04	; 4
     f50:	e0 e8       	ldi	r30, 0x80	; 128
     f52:	f6 e0       	ldi	r31, 0x06	; 6
     f54:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CCC = duty;
     f56:	9c 96       	adiw	r26, 0x2c	; 44
     f58:	8d 93       	st	X+, r24
     f5a:	9c 93       	st	X, r25
     f5c:	9d 97       	sbiw	r26, 0x2d	; 45
}
     f5e:	08 95       	ret

00000f60 <set_pwm1>:

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm1(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCDEN_bm;
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	ba e0       	ldi	r27, 0x0A	; 10
     f64:	11 96       	adiw	r26, 0x01	; 1
     f66:	2c 91       	ld	r18, X
     f68:	11 97       	sbiw	r26, 0x01	; 1
     f6a:	20 68       	ori	r18, 0x80	; 128
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	2c 93       	st	X, r18
     f70:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = PIN3_bm;
     f72:	28 e0       	ldi	r18, 0x08	; 8
     f74:	e0 e8       	ldi	r30, 0x80	; 128
     f76:	f6 e0       	ldi	r31, 0x06	; 6
     f78:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CCD = duty;
     f7a:	9e 96       	adiw	r26, 0x2e	; 46
     f7c:	8d 93       	st	X+, r24
     f7e:	9c 93       	st	X, r25
     f80:	9f 97       	sbiw	r26, 0x2f	; 47
}
     f82:	08 95       	ret

00000f84 <set_output>:
// Helper functions for setting outputs and reading inputs on the auxiliary digital I/O.

//turns any of the external DIO into an ouput and sets its value
void set_output(char port, char value) {
	switch(port) {
     f84:	84 33       	cpi	r24, 0x34	; 52
     f86:	71 f1       	breq	.+92     	; 0xfe4 <set_output+0x60>
     f88:	85 33       	cpi	r24, 0x35	; 53
     f8a:	70 f4       	brcc	.+28     	; 0xfa8 <set_output+0x24>
     f8c:	81 33       	cpi	r24, 0x31	; 49
     f8e:	01 f1       	breq	.+64     	; 0xfd0 <set_output+0x4c>
     f90:	82 33       	cpi	r24, 0x32	; 50
     f92:	20 f4       	brcc	.+8      	; 0xf9c <set_output+0x18>
     f94:	80 33       	cpi	r24, 0x30	; 48
     f96:	09 f0       	breq	.+2      	; 0xf9a <set_output+0x16>
     f98:	5b c0       	rjmp	.+182    	; 0x1050 <set_output+0xcc>
     f9a:	16 c0       	rjmp	.+44     	; 0xfc8 <set_output+0x44>
     f9c:	82 33       	cpi	r24, 0x32	; 50
     f9e:	e1 f0       	breq	.+56     	; 0xfd8 <set_output+0x54>
     fa0:	83 33       	cpi	r24, 0x33	; 51
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <set_output+0x22>
     fa4:	55 c0       	rjmp	.+170    	; 0x1050 <set_output+0xcc>
     fa6:	1b c0       	rjmp	.+54     	; 0xfde <set_output+0x5a>
     fa8:	87 33       	cpi	r24, 0x37	; 55
     faa:	61 f1       	breq	.+88     	; 0x1004 <set_output+0x80>
     fac:	88 33       	cpi	r24, 0x38	; 56
     fae:	30 f4       	brcc	.+12     	; 0xfbc <set_output+0x38>
     fb0:	85 33       	cpi	r24, 0x35	; 53
     fb2:	e1 f0       	breq	.+56     	; 0xfec <set_output+0x68>
     fb4:	86 33       	cpi	r24, 0x36	; 54
     fb6:	09 f0       	breq	.+2      	; 0xfba <set_output+0x36>
     fb8:	4b c0       	rjmp	.+150    	; 0x1050 <set_output+0xcc>
     fba:	1c c0       	rjmp	.+56     	; 0xff4 <set_output+0x70>
     fbc:	88 33       	cpi	r24, 0x38	; 56
     fbe:	59 f1       	breq	.+86     	; 0x1016 <set_output+0x92>
     fc0:	89 33       	cpi	r24, 0x39	; 57
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <set_output+0x42>
     fc4:	45 c0       	rjmp	.+138    	; 0x1050 <set_output+0xcc>
     fc6:	35 c0       	rjmp	.+106    	; 0x1032 <set_output+0xae>
		case '0':
			PORTA.DIRSET = PIN0_bm;
     fc8:	e0 e0       	ldi	r30, 0x00	; 0
     fca:	f6 e0       	ldi	r31, 0x06	; 6
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	2c c0       	rjmp	.+88     	; 0x1028 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN0_bm;
			}
			break;
		case '1':
			PORTA.DIRSET = PIN1_bm;
     fd0:	e0 e0       	ldi	r30, 0x00	; 0
     fd2:	f6 e0       	ldi	r31, 0x06	; 6
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	28 c0       	rjmp	.+80     	; 0x1028 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN1_bm;
			}
			break;
		case '2':
			PORTA.DIRSET = PIN2_bm;
     fd8:	e0 e0       	ldi	r30, 0x00	; 0
     fda:	f6 e0       	ldi	r31, 0x06	; 6
     fdc:	24 c0       	rjmp	.+72     	; 0x1026 <set_output+0xa2>
			else {
				PORTA.OUTCLR = PIN2_bm;
			}
			break;
		case '3':
			PORTA.DIRSET = PIN3_bm;
     fde:	e0 e0       	ldi	r30, 0x00	; 0
     fe0:	f6 e0       	ldi	r31, 0x06	; 6
     fe2:	17 c0       	rjmp	.+46     	; 0x1012 <set_output+0x8e>
			else {
				PORTA.OUTCLR = PIN3_bm;
			}
			break;
		case '4':
			PORTA.DIRSET = PIN4_bm;
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f6 e0       	ldi	r31, 0x06	; 6
     fe8:	80 e1       	ldi	r24, 0x10	; 16
     fea:	1e c0       	rjmp	.+60     	; 0x1028 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN4_bm;
			}
			break;
		case '5':
			PORTA.DIRSET = PIN5_bm;
     fec:	e0 e0       	ldi	r30, 0x00	; 0
     fee:	f6 e0       	ldi	r31, 0x06	; 6
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	1a c0       	rjmp	.+52     	; 0x1028 <set_output+0xa4>
	DACB.CH1DATAH = val;
}

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
     ff4:	80 91 20 03 	lds	r24, 0x0320
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	80 93 20 03 	sts	0x0320, r24
			}
			break;
		case '6':
			// Disable the DAC ch0 in case it's on
			disable_dac0();
			PORTB.DIRSET = PIN2_bm;
     ffe:	e0 e2       	ldi	r30, 0x20	; 32
    1000:	f6 e0       	ldi	r31, 0x06	; 6
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <set_output+0xa2>
}

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
    1004:	80 91 20 03 	lds	r24, 0x0320
    1008:	87 7f       	andi	r24, 0xF7	; 247
    100a:	80 93 20 03 	sts	0x0320, r24
			}
			break;
		case '7':
			// Disable the DAC ch1 in case it's on
			disable_dac1();
			PORTB.DIRSET = PIN3_bm;
    100e:	e0 e2       	ldi	r30, 0x20	; 32
    1010:	f6 e0       	ldi	r31, 0x06	; 6
    1012:	88 e0       	ldi	r24, 0x08	; 8
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <set_output+0xa4>

}

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
    1016:	80 91 01 0a 	lds	r24, 0x0A01
    101a:	8f 7b       	andi	r24, 0xBF	; 191
    101c:	e0 e0       	ldi	r30, 0x00	; 0
    101e:	fa e0       	ldi	r31, 0x0A	; 10
    1020:	81 83       	std	Z+1, r24	; 0x01
			}
			break;
		case '8':
			// Disable PWM ch0 in case it's on
			turn_off_pwm0();
			PORTE.DIRSET = PIN2_bm;
    1022:	e0 e8       	ldi	r30, 0x80	; 128
    1024:	f6 e0       	ldi	r31, 0x06	; 6
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	81 83       	std	Z+1, r24	; 0x01
			if(value) {
    102a:	66 23       	and	r22, r22
    102c:	71 f4       	brne	.+28     	; 0x104a <set_output+0xc6>
				PORTE.OUTSET = PIN2_bm;
			}
			else {
				PORTE.OUTCLR = PIN2_bm;
    102e:	86 83       	std	Z+6, r24	; 0x06
    1030:	08 95       	ret
}

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
    1032:	80 91 01 0a 	lds	r24, 0x0A01
    1036:	8f 77       	andi	r24, 0x7F	; 127
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	fa e0       	ldi	r31, 0x0A	; 10
    103c:	81 83       	std	Z+1, r24	; 0x01
			}
			break;
		case '9':
			// Disable PWM ch1 in case it's on
			turn_off_pwm1();
			PORTE.DIRSET = PIN3_bm;
    103e:	e0 e8       	ldi	r30, 0x80	; 128
    1040:	f6 e0       	ldi	r31, 0x06	; 6
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	81 83       	std	Z+1, r24	; 0x01
			if(value) {
    1046:	66 23       	and	r22, r22
    1048:	11 f0       	breq	.+4      	; 0x104e <set_output+0xca>
				PORTE.OUTSET = PIN3_bm;
    104a:	85 83       	std	Z+5, r24	; 0x05
    104c:	08 95       	ret
			}
			else {
				PORTE.OUTCLR = PIN3_bm;
    104e:	86 83       	std	Z+6, r24	; 0x06
    1050:	08 95       	ret

00001052 <read_input>:

}

// Turns any of the external DIO into an input and reads the value
char read_input(char port) {
	switch(port) {
    1052:	84 33       	cpi	r24, 0x34	; 52
    1054:	09 f4       	brne	.+2      	; 0x1058 <read_input+0x6>
    1056:	42 c0       	rjmp	.+132    	; 0x10dc <read_input+0x8a>
    1058:	85 33       	cpi	r24, 0x35	; 53
    105a:	60 f4       	brcc	.+24     	; 0x1074 <read_input+0x22>
    105c:	81 33       	cpi	r24, 0x31	; 49
    105e:	21 f1       	breq	.+72     	; 0x10a8 <read_input+0x56>
    1060:	82 33       	cpi	r24, 0x32	; 50
    1062:	18 f4       	brcc	.+6      	; 0x106a <read_input+0x18>
    1064:	80 33       	cpi	r24, 0x30	; 48
    1066:	b1 f4       	brne	.+44     	; 0x1094 <read_input+0x42>
    1068:	17 c0       	rjmp	.+46     	; 0x1098 <read_input+0x46>
    106a:	82 33       	cpi	r24, 0x32	; 50
    106c:	49 f1       	breq	.+82     	; 0x10c0 <read_input+0x6e>
    106e:	83 33       	cpi	r24, 0x33	; 51
    1070:	89 f4       	brne	.+34     	; 0x1094 <read_input+0x42>
    1072:	2d c0       	rjmp	.+90     	; 0x10ce <read_input+0x7c>
    1074:	87 33       	cpi	r24, 0x37	; 55
    1076:	09 f4       	brne	.+2      	; 0x107a <read_input+0x28>
    1078:	5b c0       	rjmp	.+182    	; 0x1130 <read_input+0xde>
    107a:	88 33       	cpi	r24, 0x38	; 56
    107c:	28 f4       	brcc	.+10     	; 0x1088 <read_input+0x36>
    107e:	85 33       	cpi	r24, 0x35	; 53
    1080:	e1 f1       	breq	.+120    	; 0x10fa <read_input+0xa8>
    1082:	86 33       	cpi	r24, 0x36	; 54
    1084:	39 f4       	brne	.+14     	; 0x1094 <read_input+0x42>
    1086:	48 c0       	rjmp	.+144    	; 0x1118 <read_input+0xc6>
    1088:	88 33       	cpi	r24, 0x38	; 56
    108a:	09 f4       	brne	.+2      	; 0x108e <read_input+0x3c>
    108c:	65 c0       	rjmp	.+202    	; 0x1158 <read_input+0x106>
    108e:	89 33       	cpi	r24, 0x39	; 57
    1090:	09 f4       	brne	.+2      	; 0x1094 <read_input+0x42>
    1092:	76 c0       	rjmp	.+236    	; 0x1180 <read_input+0x12e>
    1094:	80 ed       	ldi	r24, 0xD0	; 208
    1096:	08 95       	ret
		case '0':
			PORTA.DIRCLR = PIN0_bm;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	e0 e0       	ldi	r30, 0x00	; 0
    109c:	f6 e0       	ldi	r31, 0x06	; 6
    109e:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN0_bm)>>0;
    10a0:	80 91 08 06 	lds	r24, 0x0608
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	08 95       	ret
			break;
		case '1':
			PORTA.DIRCLR = PIN1_bm;
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	e0 e0       	ldi	r30, 0x00	; 0
    10ac:	f6 e0       	ldi	r31, 0x06	; 6
    10ae:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN1_bm)>>1;
    10b0:	80 91 08 06 	lds	r24, 0x0608
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	82 70       	andi	r24, 0x02	; 2
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	95 95       	asr	r25
    10bc:	87 95       	ror	r24
    10be:	08 95       	ret
			break;
		case '2':
			PORTA.DIRCLR= PIN2_bm;
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	e0 e0       	ldi	r30, 0x00	; 0
    10c4:	f6 e0       	ldi	r31, 0x06	; 6
    10c6:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN2_bm)>>2;
    10c8:	80 91 08 06 	lds	r24, 0x0608
    10cc:	51 c0       	rjmp	.+162    	; 0x1170 <read_input+0x11e>
			break;
		case '3':
			PORTA.DIRCLR= PIN3_bm;
    10ce:	88 e0       	ldi	r24, 0x08	; 8
    10d0:	e0 e0       	ldi	r30, 0x00	; 0
    10d2:	f6 e0       	ldi	r31, 0x06	; 6
    10d4:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN3_bm)>>3;
    10d6:	80 91 08 06 	lds	r24, 0x0608
    10da:	35 c0       	rjmp	.+106    	; 0x1146 <read_input+0xf4>
			break;
		case '4':
			PORTA.DIRCLR = PIN4_bm;
    10dc:	80 e1       	ldi	r24, 0x10	; 16
    10de:	e0 e0       	ldi	r30, 0x00	; 0
    10e0:	f6 e0       	ldi	r31, 0x06	; 6
    10e2:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN4_bm)>>4;
    10e4:	80 91 08 06 	lds	r24, 0x0608
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	80 71       	andi	r24, 0x10	; 16
    10ec:	90 70       	andi	r25, 0x00	; 0
    10ee:	b4 e0       	ldi	r27, 0x04	; 4
    10f0:	95 95       	asr	r25
    10f2:	87 95       	ror	r24
    10f4:	ba 95       	dec	r27
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <read_input+0x9e>
    10f8:	08 95       	ret
			break;
		case '5':
			PORTA.DIRCLR = PIN5_bm;
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	e0 e0       	ldi	r30, 0x00	; 0
    10fe:	f6 e0       	ldi	r31, 0x06	; 6
    1100:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN5_bm)>>5;
    1102:	80 91 08 06 	lds	r24, 0x0608
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	80 72       	andi	r24, 0x20	; 32
    110a:	90 70       	andi	r25, 0x00	; 0
    110c:	a5 e0       	ldi	r26, 0x05	; 5
    110e:	95 95       	asr	r25
    1110:	87 95       	ror	r24
    1112:	aa 95       	dec	r26
    1114:	e1 f7       	brne	.-8      	; 0x110e <read_input+0xbc>
    1116:	08 95       	ret
	DACB.CH1DATAH = val;
}

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
    1118:	80 91 20 03 	lds	r24, 0x0320
    111c:	8b 7f       	andi	r24, 0xFB	; 251
    111e:	80 93 20 03 	sts	0x0320, r24
			break;
		case '6':
			// Disable DAC ch0 in case it's on
			disable_dac0();
			PORTB.DIRCLR = PIN2_bm;
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	e0 e2       	ldi	r30, 0x20	; 32
    1126:	f6 e0       	ldi	r31, 0x06	; 6
    1128:	82 83       	std	Z+2, r24	; 0x02
			return (PORTB.IN & PIN2_bm)>>2;
    112a:	80 91 28 06 	lds	r24, 0x0628
    112e:	20 c0       	rjmp	.+64     	; 0x1170 <read_input+0x11e>
}

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
    1130:	80 91 20 03 	lds	r24, 0x0320
    1134:	87 7f       	andi	r24, 0xF7	; 247
    1136:	80 93 20 03 	sts	0x0320, r24
			break;
		case '7':
			// Disable DAC ch0 in case it's on
			disable_dac1();
			PORTB.DIRCLR = PIN3_bm;
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	e0 e2       	ldi	r30, 0x20	; 32
    113e:	f6 e0       	ldi	r31, 0x06	; 6
    1140:	82 83       	std	Z+2, r24	; 0x02
			return (PORTB.IN & PIN3_bm)>>3;
    1142:	80 91 28 06 	lds	r24, 0x0628
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	88 70       	andi	r24, 0x08	; 8
    114a:	90 70       	andi	r25, 0x00	; 0
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	95 95       	asr	r25
    1150:	87 95       	ror	r24
    1152:	fa 95       	dec	r31
    1154:	e1 f7       	brne	.-8      	; 0x114e <read_input+0xfc>
    1156:	08 95       	ret

}

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
    1158:	80 91 01 0a 	lds	r24, 0x0A01
    115c:	8f 7b       	andi	r24, 0xBF	; 191
    115e:	e0 e0       	ldi	r30, 0x00	; 0
    1160:	fa e0       	ldi	r31, 0x0A	; 10
    1162:	81 83       	std	Z+1, r24	; 0x01
			break;
		case '8':
			// Disable PWM ch0 in case it's on
			turn_off_pwm0();
			PORTE.DIRCLR = PIN2_bm;
    1164:	84 e0       	ldi	r24, 0x04	; 4
    1166:	e0 e8       	ldi	r30, 0x80	; 128
    1168:	f6 e0       	ldi	r31, 0x06	; 6
    116a:	82 83       	std	Z+2, r24	; 0x02
			return (PORTE.IN & PIN2_bm)>>2;
    116c:	80 91 88 06 	lds	r24, 0x0688
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	84 70       	andi	r24, 0x04	; 4
    1174:	90 70       	andi	r25, 0x00	; 0
    1176:	95 95       	asr	r25
    1178:	87 95       	ror	r24
    117a:	95 95       	asr	r25
    117c:	87 95       	ror	r24
    117e:	08 95       	ret
}

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
    1180:	80 91 01 0a 	lds	r24, 0x0A01
    1184:	8f 77       	andi	r24, 0x7F	; 127
    1186:	e0 e0       	ldi	r30, 0x00	; 0
    1188:	fa e0       	ldi	r31, 0x0A	; 10
    118a:	81 83       	std	Z+1, r24	; 0x01
			break;
		case '9':
			// Disable PWM ch1 in case it's on
			turn_off_pwm1();
			PORTE.DIRCLR = PIN3_bm;
    118c:	88 e0       	ldi	r24, 0x08	; 8
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	f6 e0       	ldi	r31, 0x06	; 6
    1192:	82 83       	std	Z+2, r24	; 0x02
			return (PORTE.IN & PIN3_bm)>>3;
    1194:	80 91 88 06 	lds	r24, 0x0688
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	88 70       	andi	r24, 0x08	; 8
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	73 e0       	ldi	r23, 0x03	; 3
    11a0:	95 95       	asr	r25
    11a2:	87 95       	ror	r24
    11a4:	7a 95       	dec	r23
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <read_input+0x14e>
		default:
			return -48;
			break;
	}

    11a8:	08 95       	ret

000011aa <init_ir_read>:
/* Used for capturing IR signals. */

// Initializes the IR capture capability, must be done each time a signal needs to be captured.
void init_ir_read() {
	
	ir_read_flag = 1; // Stays high until we return success or failure
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 04 20 	sts	0x2004, r24
	//divide clock by 64, so timer clock is 500 KHz
	TCE0.CTRLA = TC_CLKSEL_DIV64_gc; 
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	ba e0       	ldi	r27, 0x0A	; 10
    11b4:	85 e0       	ldi	r24, 0x05	; 5
    11b6:	8c 93       	st	X, r24

	//normal operation with capture compare port enabled
	TCE0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
    11b8:	90 e1       	ldi	r25, 0x10	; 16
    11ba:	11 96       	adiw	r26, 0x01	; 1
    11bc:	9c 93       	st	X, r25
    11be:	11 97       	sbiw	r26, 0x01	; 1

	//pin change event from any pin triggers setting
	// Set up input capture when event channel 0 fires
	TCE0.CTRLD = TC_EVACT_CAPT_gc | TC_EVSEL_CH0_gc;
    11c0:	88 e2       	ldi	r24, 0x28	; 40
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	8c 93       	st	X, r24
    11c6:	13 97       	sbiw	r26, 0x03	; 3
	// Clear the direction of the pin to make it an input
	PORTC.DIRCLR = PIN4_bm;
    11c8:	e0 e4       	ldi	r30, 0x40	; 64
    11ca:	f6 e0       	ldi	r31, 0x06	; 6
    11cc:	92 83       	std	Z+2, r25	; 0x02
	// Invert the signal so we start with a rising edge
	// Defaults to sensing both edges, which is what we want
	PORTC.PIN4CTRL |= PORT_INVEN_bm;
    11ce:	84 89       	ldd	r24, Z+20	; 0x14
    11d0:	80 64       	ori	r24, 0x40	; 64
    11d2:	84 8b       	std	Z+20, r24	; 0x14
	// Set event channel 0 to register events from port C pin 4
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    11d4:	84 e6       	ldi	r24, 0x64	; 100
    11d6:	80 93 80 01 	sts	0x0180, r24

	//set PER to a value that will cut things off if no signal after 16 MS or so
	TCE0.PERBUF = 0x1F40;//TCE0.PERBUF = 0x7FFF;
    11da:	80 e4       	ldi	r24, 0x40	; 64
    11dc:	9f e1       	ldi	r25, 0x1F	; 31
    11de:	d6 96       	adiw	r26, 0x36	; 54
    11e0:	8d 93       	st	X+, r24
    11e2:	9c 93       	st	X, r25
    11e4:	d7 97       	sbiw	r26, 0x37	; 55
	
	// Reset signal_count and time out
	signal_count = 0;
    11e6:	10 92 02 20 	sts	0x2002, r1
	ir_read_time_out = 0;
    11ea:	10 92 03 20 	sts	0x2003, r1
	
	// Enable interrupts on CCA and Overflow
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    11ee:	83 e0       	ldi	r24, 0x03	; 3
    11f0:	16 96       	adiw	r26, 0x06	; 6
    11f2:	8c 93       	st	X, r24
    11f4:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.INTCTRLB = TC_CCAINTLVL_HI_gc; 
    11f6:	17 96       	adiw	r26, 0x07	; 7
    11f8:	8c 93       	st	X, r24
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    11fa:	e0 ea       	ldi	r30, 0xA0	; 160
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	84 60       	ori	r24, 0x04	; 4
    1202:	82 83       	std	Z+2, r24	; 0x02
	Buzzer: TCD1
	LED: TCD0
	PWM: TCE0
	IR Reading: TCE0 */
	
}
    1204:	08 95       	ret

00001206 <ir_fail>:
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1206:	80 91 b1 09 	lds	r24, 0x09B1
    120a:	85 ff       	sbrs	r24, 5
    120c:	fc cf       	rjmp	.-8      	; 0x1206 <ir_fail>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    120e:	85 e4       	ldi	r24, 0x45	; 69
    1210:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1214:	80 91 b1 09 	lds	r24, 0x09B1
    1218:	85 ff       	sbrs	r24, 5
    121a:	fc cf       	rjmp	.-8      	; 0x1214 <ir_fail+0xe>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    121c:	82 e5       	ldi	r24, 0x52	; 82
    121e:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1222:	80 91 b1 09 	lds	r24, 0x09B1
    1226:	85 ff       	sbrs	r24, 5
    1228:	fc cf       	rjmp	.-8      	; 0x1222 <ir_fail+0x1c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    122a:	82 e5       	ldi	r24, 0x52	; 82
    122c:	80 93 b0 09 	sts	0x09B0, r24
void ir_fail() 
{
	uart_putchar(&BT_USART, 'E');
	uart_putchar(&BT_USART, 'R');
	uart_putchar(&BT_USART, 'R');
	ir_read_flag = 0;
    1230:	10 92 04 20 	sts	0x2004, r1
}
    1234:	08 95       	ret

00001236 <disable_ir_read>:

// Disables the interrupts/event system used to capture IR signal
void disable_ir_read() 
{
	// Turn off interrupts:
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1236:	e0 e0       	ldi	r30, 0x00	; 0
    1238:	fa e0       	ldi	r31, 0x0A	; 10
    123a:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc; 
    123c:	17 82       	std	Z+7, r1	; 0x07
	// Turn off event system
	EVSYS.CH0MUX  = 0;
    123e:	10 92 80 01 	sts	0x0180, r1
	TCE0.CTRLD = 0;
    1242:	13 82       	std	Z+3, r1	; 0x03
	//Turn off Timer-counter
	TCE0.CTRLB = 0;
    1244:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = 0;
    1246:	10 82       	st	Z, r1
}
    1248:	08 95       	ret

0000124a <dump_data>:

// Dumps the captured data over serial
void dump_data()
{
	// If signal_count is 2 or 4, we picked up some spurious signal, so don't print those out, instead, send ir_fail()
	if(signal_count > 4) {
    124a:	80 91 02 20 	lds	r24, 0x2002
    124e:	85 30       	cpi	r24, 0x05	; 5
    1250:	f0 f0       	brcs	.+60     	; 0x128e <dump_data+0x44>
		uart_putchar(&BT_USART, signal_count-1); // print the length of the signal including the signal length byte. Does not include first two bytes
    1252:	90 91 02 20 	lds	r25, 0x2002
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1256:	80 91 b1 09 	lds	r24, 0x09B1
    125a:	85 ff       	sbrs	r24, 5
    125c:	fc cf       	rjmp	.-8      	; 0x1256 <dump_data+0xc>
    125e:	91 50       	subi	r25, 0x01	; 1
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1260:	90 93 b0 09 	sts	0x09B0, r25
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	0c c0       	rjmp	.+24     	; 0x1280 <dump_data+0x36>
		// First two bytes don't get considered part of the signal because they represent a random value (random time to the time of the first edge)
		for(uint8_t i = 2; i < signal_count; i++)
		{
			uart_putchar(&BT_USART, captured_signal[i]);
    1268:	e9 2f       	mov	r30, r25
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	e5 5f       	subi	r30, 0xF5	; 245
    126e:	fd 4d       	sbci	r31, 0xDD	; 221
    1270:	e0 81       	ld	r30, Z
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1272:	80 91 b1 09 	lds	r24, 0x09B1
    1276:	85 ff       	sbrs	r24, 5
    1278:	fc cf       	rjmp	.-8      	; 0x1272 <dump_data+0x28>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    127a:	e0 93 b0 09 	sts	0x09B0, r30
{
	// If signal_count is 2 or 4, we picked up some spurious signal, so don't print those out, instead, send ir_fail()
	if(signal_count > 4) {
		uart_putchar(&BT_USART, signal_count-1); // print the length of the signal including the signal length byte. Does not include first two bytes
		// First two bytes don't get considered part of the signal because they represent a random value (random time to the time of the first edge)
		for(uint8_t i = 2; i < signal_count; i++)
    127e:	9f 5f       	subi	r25, 0xFF	; 255
    1280:	80 91 02 20 	lds	r24, 0x2002
    1284:	98 17       	cp	r25, r24
    1286:	80 f3       	brcs	.-32     	; 0x1268 <dump_data+0x1e>
		{
			uart_putchar(&BT_USART, captured_signal[i]);
		}
		ir_read_flag = 0;
    1288:	10 92 04 20 	sts	0x2004, r1
    128c:	08 95       	ret
	}
	else {
		ir_fail();
    128e:	0e 94 03 09 	call	0x1206	; 0x1206 <ir_fail>
    1292:	08 95       	ret

00001294 <__vector_47>:
	}
	signal_count+=2; // Count by 2s because the signal time data takes two bytes
}

// If we get to an overflow (roughly every 16 ms if no captures occur), then either no signal has been seen yet, or one has been seen and has ended
ISR(TCE0_OVF_vect) {
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
	// If the signal_count is non zero, we've seen a signal, so dump it over serial
	if(signal_count != 0) {
    12b6:	80 91 02 20 	lds	r24, 0x2002
    12ba:	88 23       	and	r24, r24
    12bc:	29 f0       	breq	.+10     	; 0x12c8 <__vector_47+0x34>
		disable_ir_read();
    12be:	0e 94 1b 09 	call	0x1236	; 0x1236 <disable_ir_read>
		dump_data();
    12c2:	0e 94 25 09 	call	0x124a	; 0x124a <dump_data>
    12c6:	0d c0       	rjmp	.+26     	; 0x12e2 <__vector_47+0x4e>
	}
	// Otherwise, increment the time out counter - if we overflow 250 or more times, report failure to read a signal
	else {
		ir_read_time_out++;
    12c8:	80 91 03 20 	lds	r24, 0x2003
    12cc:	8f 5f       	subi	r24, 0xFF	; 255
    12ce:	80 93 03 20 	sts	0x2003, r24
		if(ir_read_time_out > 250) {
    12d2:	80 91 03 20 	lds	r24, 0x2003
    12d6:	8b 3f       	cpi	r24, 0xFB	; 251
    12d8:	20 f0       	brcs	.+8      	; 0x12e2 <__vector_47+0x4e>
			disable_ir_read();
    12da:	0e 94 1b 09 	call	0x1236	; 0x1236 <disable_ir_read>
			ir_fail();
    12de:	0e 94 03 09 	call	0x1206	; 0x1206 <ir_fail>
		}
	}
}
    12e2:	ff 91       	pop	r31
    12e4:	ef 91       	pop	r30
    12e6:	bf 91       	pop	r27
    12e8:	af 91       	pop	r26
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	7f 91       	pop	r23
    12f0:	6f 91       	pop	r22
    12f2:	5f 91       	pop	r21
    12f4:	4f 91       	pop	r20
    12f6:	3f 91       	pop	r19
    12f8:	2f 91       	pop	r18
    12fa:	0f 90       	pop	r0
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	0f 90       	pop	r0
    1300:	1f 90       	pop	r1
    1302:	18 95       	reti

00001304 <__vector_49>:
	IR Reading: TCE0 */
	
}

// All the fun stuff happens here - this interrupt is triggered when the input signal rises or falls
ISR(TCE0_CCA_vect) {
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	2f 93       	push	r18
    1310:	3f 93       	push	r19
    1312:	4f 93       	push	r20
    1314:	5f 93       	push	r21
    1316:	6f 93       	push	r22
    1318:	7f 93       	push	r23
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
    131e:	af 93       	push	r26
    1320:	bf 93       	push	r27
    1322:	ef 93       	push	r30
    1324:	ff 93       	push	r31
	TCE0.CNT = 0; // Reset the counter
    1326:	e0 e0       	ldi	r30, 0x00	; 0
    1328:	fa e0       	ldi	r31, 0x0A	; 10
    132a:	10 a2       	std	Z+32, r1	; 0x20
    132c:	11 a2       	std	Z+33, r1	; 0x21
	
	// If the number of edges is greater than 191, the signal is longer than we can store - so stop and return failure
	if(signal_count > 191) {
    132e:	80 91 02 20 	lds	r24, 0x2002
    1332:	80 3c       	cpi	r24, 0xC0	; 192
    1334:	28 f0       	brcs	.+10     	; 0x1340 <__vector_49+0x3c>
		disable_ir_read();
    1336:	0e 94 1b 09 	call	0x1236	; 0x1236 <disable_ir_read>
		ir_fail();
    133a:	0e 94 03 09 	call	0x1206	; 0x1206 <ir_fail>
    133e:	39 c0       	rjmp	.+114    	; 0x13b2 <__vector_49+0xae>
		return;
	}
	// Read the captured signal's time value (CCA register without the highest bit) into our array
	captured_signal[signal_count+1] = TCE0.CCAL;
    1340:	e0 91 02 20 	lds	r30, 0x2002
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 91 28 0a 	lds	r24, 0x0A28
    134a:	e4 5f       	subi	r30, 0xF4	; 244
    134c:	fd 4d       	sbci	r31, 0xDD	; 221
    134e:	80 83       	st	Z, r24
	captured_signal[signal_count] = TCE0.CCAH&0b01111111;
    1350:	e0 91 02 20 	lds	r30, 0x2002
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 91 29 0a 	lds	r24, 0x0A29
    135a:	8f 77       	andi	r24, 0x7F	; 127
    135c:	e5 5f       	subi	r30, 0xF5	; 245
    135e:	fd 4d       	sbci	r31, 0xDD	; 221
    1360:	80 83       	st	Z, r24
	// Ignore spurious signals - software control for glitches from lighting, other remotes, etc - basically, ignores anything that's shorter than 200 microseconds and resets the counter
	if((captured_signal[signal_count+1] < 0x40) && (captured_signal[signal_count] == 0)) 
    1362:	e0 91 02 20 	lds	r30, 0x2002
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	e4 5f       	subi	r30, 0xF4	; 244
    136a:	fd 4d       	sbci	r31, 0xDD	; 221
    136c:	80 81       	ld	r24, Z
    136e:	80 34       	cpi	r24, 0x40	; 64
    1370:	50 f4       	brcc	.+20     	; 0x1386 <__vector_49+0x82>
    1372:	e0 91 02 20 	lds	r30, 0x2002
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	e5 5f       	subi	r30, 0xF5	; 245
    137a:	fd 4d       	sbci	r31, 0xDD	; 221
    137c:	80 81       	ld	r24, Z
    137e:	88 23       	and	r24, r24
    1380:	11 f4       	brne	.+4      	; 0x1386 <__vector_49+0x82>
	{
		signal_count = 0;
    1382:	10 92 02 20 	sts	0x2002, r1
	}
	// If the signal count increases past a typical "start-up" section, tighten the spacing between
	// rising and falling edges to 8 ms to prevent multiple consecutive reads of the same signal
	if((signal_count > 16) & (captured_signal[signal_count] > 0x10)) {
    1386:	80 91 02 20 	lds	r24, 0x2002
    138a:	e0 91 02 20 	lds	r30, 0x2002
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	e5 5f       	subi	r30, 0xF5	; 245
    1392:	fd 4d       	sbci	r31, 0xDD	; 221
    1394:	e0 81       	ld	r30, Z
    1396:	81 31       	cpi	r24, 0x11	; 17
    1398:	38 f0       	brcs	.+14     	; 0x13a8 <__vector_49+0xa4>
    139a:	e1 31       	cpi	r30, 0x11	; 17
    139c:	28 f0       	brcs	.+10     	; 0x13a8 <__vector_49+0xa4>
		disable_ir_read();
    139e:	0e 94 1b 09 	call	0x1236	; 0x1236 <disable_ir_read>
		dump_data(); // Prints all of the data over serial
    13a2:	0e 94 25 09 	call	0x124a	; 0x124a <dump_data>
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <__vector_49+0xae>
		return;	
	}
	signal_count+=2; // Count by 2s because the signal time data takes two bytes
    13a8:	80 91 02 20 	lds	r24, 0x2002
    13ac:	8e 5f       	subi	r24, 0xFE	; 254
    13ae:	80 93 02 20 	sts	0x2002, r24
}
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	bf 91       	pop	r27
    13b8:	af 91       	pop	r26
    13ba:	9f 91       	pop	r25
    13bc:	8f 91       	pop	r24
    13be:	7f 91       	pop	r23
    13c0:	6f 91       	pop	r22
    13c2:	5f 91       	pop	r21
    13c4:	4f 91       	pop	r20
    13c6:	3f 91       	pop	r19
    13c8:	2f 91       	pop	r18
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <read_data_from_serial>:
	}
}

// Reads raw data from the host into the robotData structure, where it can be used to re-transmit the data.
int read_data_from_serial()
{
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
	int signal_length = uart_getchar_timeout(&BT_USART);
    13de:	80 eb       	ldi	r24, 0xB0	; 176
    13e0:	99 e0       	ldi	r25, 0x09	; 9
    13e2:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    13e6:	9c 01       	movw	r18, r24
	int temp = 0;

	uart_putchar(&BT_USART, signal_length);
    13e8:	18 2f       	mov	r17, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    13ea:	80 91 b1 09 	lds	r24, 0x09B1
    13ee:	85 ff       	sbrs	r24, 5
    13f0:	fc cf       	rjmp	.-8      	; 0x13ea <read_data_from_serial+0x16>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    13f2:	10 93 b0 09 	sts	0x09B0, r17
    13f6:	c0 e0       	ldi	r28, 0x00	; 0
    13f8:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int i = 0; i < signal_length-1; i++) {
    13fa:	79 01       	movw	r14, r18
    13fc:	08 94       	sec
    13fe:	e1 08       	sbc	r14, r1
    1400:	f1 08       	sbc	r15, r1
    1402:	17 c0       	rjmp	.+46     	; 0x1432 <read_data_from_serial+0x5e>
		temp = uart_getchar_timeout(&BT_USART);
    1404:	80 eb       	ldi	r24, 0xB0	; 176
    1406:	99 e0       	ldi	r25, 0x09	; 9
    1408:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
		if(temp == 256) {
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	80 30       	cpi	r24, 0x00	; 0
    1410:	92 07       	cpc	r25, r18
    1412:	19 f4       	brne	.+6      	; 0x141a <read_data_from_serial+0x46>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <read_data_from_serial+0x6e>
			return 0;
		}
		else {
			uart_putchar(&BT_USART, temp);
    141a:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    141c:	80 91 b1 09 	lds	r24, 0x09B1
    1420:	85 ff       	sbrs	r24, 5
    1422:	fc cf       	rjmp	.-8      	; 0x141c <read_data_from_serial+0x48>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1424:	90 93 b0 09 	sts	0x09B0, r25
			robotData.irBytes[i] = (char)temp;
    1428:	fe 01       	movw	r30, r28
    142a:	e5 5e       	subi	r30, 0xE5	; 229
    142c:	fe 4d       	sbci	r31, 0xDE	; 222
    142e:	94 a7       	std	Z+44, r25	; 0x2c
	int signal_length = uart_getchar_timeout(&BT_USART);
	int temp = 0;

	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < signal_length-1; i++) {
    1430:	21 96       	adiw	r28, 0x01	; 1
    1432:	ce 15       	cp	r28, r14
    1434:	df 05       	cpc	r29, r15
    1436:	34 f3       	brlt	.-52     	; 0x1404 <read_data_from_serial+0x30>
			uart_putchar(&BT_USART, temp);
			robotData.irBytes[i] = (char)temp;
		}
	}
	
	robotData.numBits = signal_length-1;
    1438:	11 50       	subi	r17, 0x01	; 1
    143a:	10 93 3f 21 	sts	0x213F, r17
    143e:	21 e0       	ldi	r18, 0x01	; 1
    1440:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
}	
    1442:	c9 01       	movw	r24, r18
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	08 95       	ret

00001450 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    1450:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1452:	e0 ec       	ldi	r30, 0xC0	; 192
    1454:	f1 e0       	ldi	r31, 0x01	; 1
    1456:	80 91 cf 01 	lds	r24, 0x01CF
    145a:	87 fd       	sbrc	r24, 7
    145c:	fa cf       	rjmp	.-12     	; 0x1452 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    145e:	26 2f       	mov	r18, r22
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	2f 71       	andi	r18, 0x1F	; 31
    1464:	30 70       	andi	r19, 0x00	; 0
    1466:	89 2f       	mov	r24, r25
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	45 e0       	ldi	r20, 0x05	; 5
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	4a 95       	dec	r20
    1472:	e1 f7       	brne	.-8      	; 0x146c <EEPROM_ReadByte+0x1c>
    1474:	28 2b       	or	r18, r24
    1476:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    1478:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    147c:	83 2f       	mov	r24, r19
    147e:	8f 71       	andi	r24, 0x1F	; 31
    1480:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    1482:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    1484:	86 e0       	ldi	r24, 0x06	; 6
    1486:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	0f 93       	push	r16
    148e:	2f 93       	push	r18
    1490:	eb ec       	ldi	r30, 0xCB	; 203
    1492:	f1 e0       	ldi	r31, 0x01	; 1
    1494:	08 ed       	ldi	r16, 0xD8	; 216
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	04 bf       	out	0x34, r16	; 52
    149a:	20 83       	st	Z, r18
    149c:	2f 91       	pop	r18
    149e:	0f 91       	pop	r16
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30

	return NVM.DATA0;
    14a4:	80 91 c4 01 	lds	r24, 0x01C4
}
    14a8:	08 95       	ret

000014aa <print_data_from_eeprom>:
	robotData.numBits = signal_length-1;
}	

// Sends the data in EEPROM over bluetooth to the host
void print_data_from_eeprom(int position)
{
    14aa:	af 92       	push	r10
    14ac:	bf 92       	push	r11
    14ae:	cf 92       	push	r12
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
	int signal_length = EEPROM_ReadByte(position*6, 0);
    14be:	9c 01       	movw	r18, r24
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	28 0f       	add	r18, r24
    14c6:	39 1f       	adc	r19, r25
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	c2 2e       	mov	r12, r18
    14ce:	82 2f       	mov	r24, r18
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	0e 94 28 0a 	call	0x1450	; 0x1450 <EEPROM_ReadByte>
    14d6:	28 2f       	mov	r18, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
	int pages = signal_length/32;
    14da:	7c 01       	movw	r14, r24
    14dc:	65 e0       	ldi	r22, 0x05	; 5
    14de:	f5 94       	asr	r15
    14e0:	e7 94       	ror	r14
    14e2:	6a 95       	dec	r22
    14e4:	e1 f7       	brne	.-8      	; 0x14de <print_data_from_eeprom+0x34>
	int remainder = signal_length%32;
    14e6:	5f e1       	ldi	r21, 0x1F	; 31
    14e8:	a5 2e       	mov	r10, r21
    14ea:	b1 2c       	mov	r11, r1
    14ec:	a8 22       	and	r10, r24
    14ee:	b9 22       	and	r11, r25
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    14f0:	80 91 b1 09 	lds	r24, 0x09B1
    14f4:	85 ff       	sbrs	r24, 5
    14f6:	fc cf       	rjmp	.-8      	; 0x14f0 <print_data_from_eeprom+0x46>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    14f8:	20 93 b0 09 	sts	0x09B0, r18
    14fc:	c1 e0       	ldi	r28, 0x01	; 1
    14fe:	d0 e0       	ldi	r29, 0x00	; 0
    1500:	00 e0       	ldi	r16, 0x00	; 0
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	15 c0       	rjmp	.+42     	; 0x1530 <print_data_from_eeprom+0x86>
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + i, j));
    1506:	dc 2c       	mov	r13, r12
    1508:	d0 0e       	add	r13, r16
    150a:	8d 2d       	mov	r24, r13
    150c:	6c 2f       	mov	r22, r28
    150e:	0e 94 28 0a 	call	0x1450	; 0x1450 <EEPROM_ReadByte>
    1512:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1514:	80 91 b1 09 	lds	r24, 0x09B1
    1518:	85 ff       	sbrs	r24, 5
    151a:	fc cf       	rjmp	.-8      	; 0x1514 <print_data_from_eeprom+0x6a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    151c:	90 93 b0 09 	sts	0x09B0, r25
			j++;
    1520:	21 96       	adiw	r28, 0x01	; 1
	int j = 1;
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    1522:	c0 32       	cpi	r28, 0x20	; 32
    1524:	d1 05       	cpc	r29, r1
    1526:	8c f3       	brlt	.-30     	; 0x150a <print_data_from_eeprom+0x60>
	int remainder = signal_length%32;
	int j = 1;
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
    1528:	0f 5f       	subi	r16, 0xFF	; 255
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	c0 e0       	ldi	r28, 0x00	; 0
    152e:	d0 e0       	ldi	r29, 0x00	; 0
    1530:	0e 15       	cp	r16, r14
    1532:	1f 05       	cpc	r17, r15
    1534:	44 f3       	brlt	.-48     	; 0x1506 <print_data_from_eeprom+0x5c>
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <print_data_from_eeprom+0xa8>
		}
		j = 0;
	}
	
	while(j < remainder) {
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
    1538:	81 2f       	mov	r24, r17
    153a:	6c 2f       	mov	r22, r28
    153c:	0e 94 28 0a 	call	0x1450	; 0x1450 <EEPROM_ReadByte>
    1540:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1542:	80 91 b1 09 	lds	r24, 0x09B1
    1546:	85 ff       	sbrs	r24, 5
    1548:	fc cf       	rjmp	.-8      	; 0x1542 <print_data_from_eeprom+0x98>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    154a:	90 93 b0 09 	sts	0x09B0, r25
		j++;
    154e:	21 96       	adiw	r28, 0x01	; 1
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <print_data_from_eeprom+0xac>
		}
		j = 0;
	}
	
	while(j < remainder) {
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
    1552:	1c 2d       	mov	r17, r12
    1554:	1e 0d       	add	r17, r14
			j++;
		}
		j = 0;
	}
	
	while(j < remainder) {
    1556:	ca 15       	cp	r28, r10
    1558:	db 05       	cpc	r29, r11
    155a:	74 f3       	brlt	.-36     	; 0x1538 <print_data_from_eeprom+0x8e>
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
		j++;
	}
}
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	af 90       	pop	r10
    1570:	08 95       	ret

00001572 <read_data_from_eeprom>:
	}
}	

// Reads the data in a given EEPROM position into the robotData structure, from where it can be used to re-transmit the signal
void read_data_from_eeprom(int position)
{
    1572:	5f 92       	push	r5
    1574:	6f 92       	push	r6
    1576:	7f 92       	push	r7
    1578:	8f 92       	push	r8
    157a:	9f 92       	push	r9
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	int signal_length = EEPROM_ReadByte(position*6, 0);
    1590:	9c 01       	movw	r18, r24
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	28 0f       	add	r18, r24
    1598:	39 1f       	adc	r19, r25
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	52 2e       	mov	r5, r18
    15a0:	82 2f       	mov	r24, r18
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 28 0a 	call	0x1450	; 0x1450 <EEPROM_ReadByte>
    15a8:	b8 2e       	mov	r11, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
	int pages = signal_length/32;
    15ac:	4c 01       	movw	r8, r24
    15ae:	b5 e0       	ldi	r27, 0x05	; 5
    15b0:	95 94       	asr	r9
    15b2:	87 94       	ror	r8
    15b4:	ba 95       	dec	r27
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <read_data_from_eeprom+0x3e>
	int remainder = signal_length%32;
    15b8:	af e1       	ldi	r26, 0x1F	; 31
    15ba:	6a 2e       	mov	r6, r26
    15bc:	71 2c       	mov	r7, r1
    15be:	68 22       	and	r6, r24
    15c0:	79 22       	and	r7, r25
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	c1 e0       	ldi	r28, 0x01	; 1
    15c8:	d0 e0       	ldi	r29, 0x00	; 0
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	12 c0       	rjmp	.+36     	; 0x15f4 <read_data_from_eeprom+0x82>
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + i, j);
    15d0:	8a 2d       	mov	r24, r10
    15d2:	6c 2f       	mov	r22, r28
    15d4:	0e 94 28 0a 	call	0x1450	; 0x1450 <EEPROM_ReadByte>
    15d8:	f6 01       	movw	r30, r12
    15da:	81 93       	st	Z+, r24
    15dc:	6f 01       	movw	r12, r30
			array_counter++;
    15de:	08 94       	sec
    15e0:	e1 1c       	adc	r14, r1
    15e2:	f1 1c       	adc	r15, r1
			j++;
    15e4:	21 96       	adiw	r28, 0x01	; 1
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    15e6:	c0 32       	cpi	r28, 0x20	; 32
    15e8:	d1 05       	cpc	r29, r1
    15ea:	94 f3       	brlt	.-28     	; 0x15d0 <read_data_from_eeprom+0x5e>
	int pages = signal_length/32;
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
    15ec:	0f 5f       	subi	r16, 0xFF	; 255
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	c0 e0       	ldi	r28, 0x00	; 0
    15f2:	d0 e0       	ldi	r29, 0x00	; 0
    15f4:	c7 01       	movw	r24, r14
    15f6:	8c 96       	adiw	r24, 0x2c	; 44
    15f8:	08 15       	cp	r16, r8
    15fa:	19 05       	cpc	r17, r9
    15fc:	34 f0       	brlt	.+12     	; 0x160a <read_data_from_eeprom+0x98>
    15fe:	8c 01       	movw	r16, r24
    1600:	05 5e       	subi	r16, 0xE5	; 229
    1602:	1e 4d       	sbci	r17, 0xDE	; 222
		}
		j = 0;
	}
	
	while(j < remainder) {
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
    1604:	f5 2c       	mov	r15, r5
    1606:	f8 0c       	add	r15, r8
    1608:	11 c0       	rjmp	.+34     	; 0x162c <read_data_from_eeprom+0xba>
	int pages = signal_length/32;
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
    160a:	fb e1       	ldi	r31, 0x1B	; 27
    160c:	cf 2e       	mov	r12, r31
    160e:	f1 e2       	ldi	r31, 0x21	; 33
    1610:	df 2e       	mov	r13, r31
    1612:	c8 0e       	add	r12, r24
    1614:	d9 1e       	adc	r13, r25
		while(j < EEPROM_PAGESIZE) {
			robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + i, j);
    1616:	a5 2c       	mov	r10, r5
    1618:	a0 0e       	add	r10, r16
    161a:	da cf       	rjmp	.-76     	; 0x15d0 <read_data_from_eeprom+0x5e>
		}
		j = 0;
	}
	
	while(j < remainder) {
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
    161c:	8f 2d       	mov	r24, r15
    161e:	6c 2f       	mov	r22, r28
    1620:	0e 94 28 0a 	call	0x1450	; 0x1450 <EEPROM_ReadByte>
    1624:	f8 01       	movw	r30, r16
    1626:	81 93       	st	Z+, r24
    1628:	8f 01       	movw	r16, r30
		array_counter++;
		j++;
    162a:	21 96       	adiw	r28, 0x01	; 1
			j++;
		}
		j = 0;
	}
	
	while(j < remainder) {
    162c:	c6 15       	cp	r28, r6
    162e:	d7 05       	cpc	r29, r7
    1630:	ac f3       	brlt	.-22     	; 0x161c <read_data_from_eeprom+0xaa>
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
		array_counter++;
		j++;
	}
	robotData.numBits = signal_length-1;
    1632:	ba 94       	dec	r11
    1634:	b0 92 3f 21 	sts	0x213F, r11
}	
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	7f 90       	pop	r7
    1652:	6f 90       	pop	r6
    1654:	5f 90       	pop	r5
    1656:	08 95       	ret

00001658 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1658:	80 91 cf 01 	lds	r24, 0x01CF
    165c:	87 fd       	sbrc	r24, 7
    165e:	fc cf       	rjmp	.-8      	; 0x1658 <EEPROM_WaitForNVM>
}
    1660:	08 95       	ret

00001662 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1662:	80 91 cf 01 	lds	r24, 0x01CF
    1666:	87 fd       	sbrc	r24, 7
    1668:	fc cf       	rjmp	.-8      	; 0x1662 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    166a:	80 91 cf 01 	lds	r24, 0x01CF
    166e:	81 ff       	sbrs	r24, 1
    1670:	12 c0       	rjmp	.+36     	; 0x1696 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1672:	86 e3       	ldi	r24, 0x36	; 54
    1674:	e0 ec       	ldi	r30, 0xC0	; 192
    1676:	f1 e0       	ldi	r31, 0x01	; 1
    1678:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
    167e:	0f 93       	push	r16
    1680:	2f 93       	push	r18
    1682:	eb ec       	ldi	r30, 0xCB	; 203
    1684:	f1 e0       	ldi	r31, 0x01	; 1
    1686:	08 ed       	ldi	r16, 0xD8	; 216
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	04 bf       	out	0x34, r16	; 52
    168c:	20 83       	st	Z, r18
    168e:	2f 91       	pop	r18
    1690:	0f 91       	pop	r16
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	08 95       	ret

00001698 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    1698:	df 92       	push	r13
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	e8 2e       	mov	r14, r24
    16a4:	06 2f       	mov	r16, r22
    16a6:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    16a8:	0e 94 31 0b 	call	0x1662	; 0x1662 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    16ac:	e0 ec       	ldi	r30, 0xC0	; 192
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	83 e3       	ldi	r24, 0x33	; 51
    16b2:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    16b4:	10 e0       	ldi	r17, 0x00	; 0
    16b6:	0f 71       	andi	r16, 0x1F	; 31
    16b8:	10 70       	andi	r17, 0x00	; 0
    16ba:	ff 24       	eor	r15, r15
    16bc:	85 e0       	ldi	r24, 0x05	; 5
    16be:	ee 0c       	add	r14, r14
    16c0:	ff 1c       	adc	r15, r15
    16c2:	8a 95       	dec	r24
    16c4:	e1 f7       	brne	.-8      	; 0x16be <EEPROM_WriteByte+0x26>
    16c6:	0e 29       	or	r16, r14
    16c8:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    16ca:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    16cc:	81 2f       	mov	r24, r17
    16ce:	8f 71       	andi	r24, 0x1F	; 31
    16d0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    16d2:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    16d4:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    16d6:	85 e3       	ldi	r24, 0x35	; 53
    16d8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	0f 93       	push	r16
    16e0:	2f 93       	push	r18
    16e2:	eb ec       	ldi	r30, 0xCB	; 203
    16e4:	f1 e0       	ldi	r31, 0x01	; 1
    16e6:	08 ed       	ldi	r16, 0xD8	; 216
    16e8:	21 e0       	ldi	r18, 0x01	; 1
    16ea:	04 bf       	out	0x34, r16	; 52
    16ec:	20 83       	st	Z, r18
    16ee:	2f 91       	pop	r18
    16f0:	0f 91       	pop	r16
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
}
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	df 90       	pop	r13
    1700:	08 95       	ret

00001702 <write_data_to_eeprom>:
	}
}

// Write data takes the captured signal array and writes it into eeprom
void write_data_to_eeprom(int position) 
{
    1702:	8f 92       	push	r8
    1704:	9f 92       	push	r9
    1706:	af 92       	push	r10
    1708:	bf 92       	push	r11
    170a:	cf 92       	push	r12
    170c:	df 92       	push	r13
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	cf 93       	push	r28
    1718:	df 93       	push	r29
    171a:	9c 01       	movw	r18, r24
	int pages = (signal_count-1)/32; // The first two bytes of the signal are invalid, but we need an extra byte to hold the length of the signal
    171c:	80 91 02 20 	lds	r24, 0x2002
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	60 e2       	ldi	r22, 0x20	; 32
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divmodhi4>
    172c:	6b 01       	movw	r12, r22
	int remainder = (signal_count-1)%32;
    172e:	80 91 02 20 	lds	r24, 0x2002
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	60 e2       	ldi	r22, 0x20	; 32
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divmodhi4>
    173e:	5c 01       	movw	r10, r24
	int array_counter = 2;
	int j = 0;
	
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
    1740:	c9 01       	movw	r24, r18
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	82 0f       	add	r24, r18
    1748:	93 1f       	adc	r25, r19
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 2e       	mov	r8, r24
    1750:	40 91 02 20 	lds	r20, 0x2002
    1754:	41 50       	subi	r20, 0x01	; 1
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	0e 94 4c 0b 	call	0x1698	; 0x1698 <EEPROM_WriteByte>
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	e9 2e       	mov	r14, r25
    1760:	f1 2c       	mov	r15, r1
    1762:	c1 e0       	ldi	r28, 0x01	; 1
    1764:	d0 e0       	ldi	r29, 0x00	; 0
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	15 c0       	rjmp	.+42     	; 0x1796 <write_data_to_eeprom+0x94>
	j++;
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			EEPROM_WriteByte(position*6 + i, j, captured_signal[array_counter]);
    176c:	98 2c       	mov	r9, r8
    176e:	90 0e       	add	r9, r16
    1770:	f7 01       	movw	r30, r14
    1772:	e5 5f       	subi	r30, 0xF5	; 245
    1774:	fd 4d       	sbci	r31, 0xDD	; 221
    1776:	40 81       	ld	r20, Z
    1778:	89 2d       	mov	r24, r9
    177a:	6c 2f       	mov	r22, r28
    177c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <EEPROM_WriteByte>
			array_counter++;
    1780:	08 94       	sec
    1782:	e1 1c       	adc	r14, r1
    1784:	f1 1c       	adc	r15, r1
			j++;
    1786:	21 96       	adiw	r28, 0x01	; 1
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
	j++;
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    1788:	c0 32       	cpi	r28, 0x20	; 32
    178a:	d1 05       	cpc	r29, r1
    178c:	8c f3       	brlt	.-30     	; 0x1770 <write_data_to_eeprom+0x6e>
	
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
	j++;
	for(int i = 0; i < pages; i++) {
    178e:	0f 5f       	subi	r16, 0xFF	; 255
    1790:	1f 4f       	sbci	r17, 0xFF	; 255
    1792:	c0 e0       	ldi	r28, 0x00	; 0
    1794:	d0 e0       	ldi	r29, 0x00	; 0
    1796:	0c 15       	cp	r16, r12
    1798:	1d 05       	cpc	r17, r13
    179a:	44 f3       	brlt	.-48     	; 0x176c <write_data_to_eeprom+0x6a>
    179c:	0d c0       	rjmp	.+26     	; 0x17b8 <write_data_to_eeprom+0xb6>
		}
		j=0;
	}
	
	while(j < remainder) {
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
    179e:	f7 01       	movw	r30, r14
    17a0:	e5 5f       	subi	r30, 0xF5	; 245
    17a2:	fd 4d       	sbci	r31, 0xDD	; 221
    17a4:	40 81       	ld	r20, Z
    17a6:	81 2f       	mov	r24, r17
    17a8:	6c 2f       	mov	r22, r28
    17aa:	0e 94 4c 0b 	call	0x1698	; 0x1698 <EEPROM_WriteByte>
		array_counter++;
    17ae:	08 94       	sec
    17b0:	e1 1c       	adc	r14, r1
    17b2:	f1 1c       	adc	r15, r1
		j++;
    17b4:	21 96       	adiw	r28, 0x01	; 1
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <write_data_to_eeprom+0xba>
		}
		j=0;
	}
	
	while(j < remainder) {
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
    17b8:	18 2d       	mov	r17, r8
    17ba:	1c 0d       	add	r17, r12
			j++;
		}
		j=0;
	}
	
	while(j < remainder) {
    17bc:	ca 15       	cp	r28, r10
    17be:	db 05       	cpc	r29, r11
    17c0:	74 f3       	brlt	.-36     	; 0x179e <write_data_to_eeprom+0x9c>
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
		array_counter++;
		j++;
	}
}	
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	bf 90       	pop	r11
    17d4:	af 90       	pop	r10
    17d6:	9f 90       	pop	r9
    17d8:	8f 90       	pop	r8
    17da:	08 95       	ret

000017dc <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    17dc:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    17de:	e0 ec       	ldi	r30, 0xC0	; 192
    17e0:	f1 e0       	ldi	r31, 0x01	; 1
    17e2:	80 91 cf 01 	lds	r24, 0x01CF
    17e6:	87 fd       	sbrc	r24, 7
    17e8:	fa cf       	rjmp	.-12     	; 0x17de <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    17ea:	83 e3       	ldi	r24, 0x33	; 51
    17ec:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    17ee:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    17f2:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    17f4:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    17f6:	64 83       	std	Z+4, r22	; 0x04
}
    17f8:	08 95       	ret

000017fa <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    17fa:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    17fc:	e0 ec       	ldi	r30, 0xC0	; 192
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	80 91 cf 01 	lds	r24, 0x01CF
    1804:	87 fd       	sbrc	r24, 7
    1806:	fa cf       	rjmp	.-12     	; 0x17fc <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1808:	83 e3       	ldi	r24, 0x33	; 51
    180a:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    180c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    180e:	12 82       	std	Z+2, r1	; 0x02
    1810:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    1812:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    1816:	8d 91       	ld	r24, X+
    1818:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    181a:	9f 5f       	subi	r25, 0xFF	; 255
    181c:	90 32       	cpi	r25, 0x20	; 32
    181e:	c9 f7       	brne	.-14     	; 0x1812 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    1820:	08 95       	ret

00001822 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    1822:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1824:	e0 ec       	ldi	r30, 0xC0	; 192
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 91 cf 01 	lds	r24, 0x01CF
    182c:	87 fd       	sbrc	r24, 7
    182e:	fa cf       	rjmp	.-12     	; 0x1824 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    1830:	89 2f       	mov	r24, r25
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	55 e0       	ldi	r21, 0x05	; 5
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	5a 95       	dec	r21
    183c:	e1 f7       	brne	.-8      	; 0x1836 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    183e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1842:	89 2f       	mov	r24, r25
    1844:	8f 71       	andi	r24, 0x1F	; 31
    1846:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    1848:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    184a:	85 e3       	ldi	r24, 0x35	; 53
    184c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31
    1852:	0f 93       	push	r16
    1854:	2f 93       	push	r18
    1856:	eb ec       	ldi	r30, 0xCB	; 203
    1858:	f1 e0       	ldi	r31, 0x01	; 1
    185a:	08 ed       	ldi	r16, 0xD8	; 216
    185c:	21 e0       	ldi	r18, 0x01	; 1
    185e:	04 bf       	out	0x34, r16	; 52
    1860:	20 83       	st	Z, r18
    1862:	2f 91       	pop	r18
    1864:	0f 91       	pop	r16
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
}
    186a:	08 95       	ret

0000186c <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    186c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    186e:	e0 ec       	ldi	r30, 0xC0	; 192
    1870:	f1 e0       	ldi	r31, 0x01	; 1
    1872:	80 91 cf 01 	lds	r24, 0x01CF
    1876:	87 fd       	sbrc	r24, 7
    1878:	fa cf       	rjmp	.-12     	; 0x186e <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    187a:	89 2f       	mov	r24, r25
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	65 e0       	ldi	r22, 0x05	; 5
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	6a 95       	dec	r22
    1886:	e1 f7       	brne	.-8      	; 0x1880 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    1888:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    188c:	89 2f       	mov	r24, r25
    188e:	8f 71       	andi	r24, 0x1F	; 31
    1890:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    1892:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    1894:	82 e3       	ldi	r24, 0x32	; 50
    1896:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
    189c:	0f 93       	push	r16
    189e:	2f 93       	push	r18
    18a0:	eb ec       	ldi	r30, 0xCB	; 203
    18a2:	f1 e0       	ldi	r31, 0x01	; 1
    18a4:	08 ed       	ldi	r16, 0xD8	; 216
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	04 bf       	out	0x34, r16	; 52
    18aa:	20 83       	st	Z, r18
    18ac:	2f 91       	pop	r18
    18ae:	0f 91       	pop	r16
    18b0:	ff 91       	pop	r31
    18b2:	ef 91       	pop	r30
}
    18b4:	08 95       	ret

000018b6 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    18b6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    18b8:	e0 ec       	ldi	r30, 0xC0	; 192
    18ba:	f1 e0       	ldi	r31, 0x01	; 1
    18bc:	80 91 cf 01 	lds	r24, 0x01CF
    18c0:	87 fd       	sbrc	r24, 7
    18c2:	fa cf       	rjmp	.-12     	; 0x18b8 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    18c4:	89 2f       	mov	r24, r25
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	75 e0       	ldi	r23, 0x05	; 5
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	7a 95       	dec	r23
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    18d2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    18d6:	89 2f       	mov	r24, r25
    18d8:	8f 71       	andi	r24, 0x1F	; 31
    18da:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    18dc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    18de:	84 e3       	ldi	r24, 0x34	; 52
    18e0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    18e6:	0f 93       	push	r16
    18e8:	2f 93       	push	r18
    18ea:	eb ec       	ldi	r30, 0xCB	; 203
    18ec:	f1 e0       	ldi	r31, 0x01	; 1
    18ee:	08 ed       	ldi	r16, 0xD8	; 216
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	04 bf       	out	0x34, r16	; 52
    18f4:	20 83       	st	Z, r18
    18f6:	2f 91       	pop	r18
    18f8:	0f 91       	pop	r16
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
}
    18fe:	08 95       	ret

00001900 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1900:	80 91 cf 01 	lds	r24, 0x01CF
    1904:	87 fd       	sbrc	r24, 7
    1906:	fc cf       	rjmp	.-8      	; 0x1900 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    1908:	80 e3       	ldi	r24, 0x30	; 48
    190a:	e0 ec       	ldi	r30, 0xC0	; 192
    190c:	f1 e0       	ldi	r31, 0x01	; 1
    190e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
    1914:	0f 93       	push	r16
    1916:	2f 93       	push	r18
    1918:	eb ec       	ldi	r30, 0xCB	; 203
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	08 ed       	ldi	r16, 0xD8	; 216
    191e:	21 e0       	ldi	r18, 0x01	; 1
    1920:	04 bf       	out	0x34, r16	; 52
    1922:	20 83       	st	Z, r18
    1924:	2f 91       	pop	r18
    1926:	0f 91       	pop	r16
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
}
    192c:	08 95       	ret

0000192e <main>:

// Includes all header files for libraries/drivers
#include "brainlink.h"

int main(void)
{
    192e:	2f 92       	push	r2
    1930:	3f 92       	push	r3
    1932:	4f 92       	push	r4
    1934:	5f 92       	push	r5
    1936:	6f 92       	push	r6
    1938:	7f 92       	push	r7
    193a:	8f 92       	push	r8
    193c:	9f 92       	push	r9
    193e:	af 92       	push	r10
    1940:	bf 92       	push	r11
    1942:	cf 92       	push	r12
    1944:	df 92       	push	r13
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	a3 97       	sbiw	r28, 0x23	; 35
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	de bf       	out	0x3e, r29	; 62

	
	long int time_out=0; // Counter which counts to a preset level corresponding to roughly 1 minute
	
	// Initialize system
	init_clock();
    195c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <init_clock>

	init_led();
    1960:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init_led>

	init_adc();
    1964:	0e 94 a1 02 	call	0x542	; 0x542 <init_adc>

	init_ir();
    1968:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <init_ir>

	init_BT();
    196c:	0e 94 c5 04 	call	0x98a	; 0x98a <init_BT>

	init_dac();
    1970:	0e 94 12 07 	call	0xe24	; 0xe24 <init_dac>

	init_buzzer();
    1974:	0e 94 5e 07 	call	0xebc	; 0xebc <init_buzzer>

	initAccel();
    1978:	0e 94 4f 06 	call	0xc9e	; 0xc9e <initAccel>

	init_aux_uart(131, -3); // Set the auxiliary uart to 9600 8n1
    197c:	83 e8       	ldi	r24, 0x83	; 131
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	6d ef       	ldi	r22, 0xFD	; 253
    1982:	0e 94 30 01 	call	0x260	; 0x260 <init_aux_uart>

	EEPROM_DisableMapping();
    1986:	80 91 cc 01 	lds	r24, 0x01CC
    198a:	87 7f       	andi	r24, 0xF7	; 247
    198c:	e0 ec       	ldi	r30, 0xC0	; 192
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	84 87       	std	Z+12, r24	; 0x0c

	// Enable global interrupts
	sei();
    1992:	78 94       	sei
    1994:	cc 24       	eor	r12, r12
    1996:	dd 24       	eor	r13, r13
// Also clear the aux serial buffer as data was probably sent at the wrong rate
void set_aux_baud_rate(int baud, char scale)
{
	AUX_data.buffer.RX_Tail = AUX_data.buffer.RX_Head;

	USART_Baudrate_Set(&AUX_USART, baud, scale);
    1998:	70 ea       	ldi	r23, 0xA0	; 160
    199a:	67 2e       	mov	r6, r23
    199c:	78 e0       	ldi	r23, 0x08	; 8
    199e:	77 2e       	mov	r7, r23

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
    19a0:	2f ef       	ldi	r18, 0xFF	; 255
    19a2:	20 93 39 09 	sts	0x0939, r18
	TCD0.CCBBUFH = 255-blue;
    19a6:	20 93 3b 09 	sts	0x093B, r18
	TCD0.CCCBUFH = 255-green;
    19aa:	20 93 3d 09 	sts	0x093D, r18
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    19ae:	e0 e4       	ldi	r30, 0x40	; 64
    19b0:	f8 e0       	ldi	r31, 0x08	; 8
    19b2:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
    19b4:	f8 94       	cli
	TCC0.CCA = 0x0000;
    19b6:	e0 e0       	ldi	r30, 0x00	; 0
    19b8:	f8 e0       	ldi	r31, 0x08	; 8
    19ba:	10 a6       	std	Z+40, r1	; 0x28
    19bc:	11 a6       	std	Z+41, r1	; 0x29
	sei();
    19be:	78 94       	sei
    19c0:	10 e0       	ldi	r17, 0x00	; 0
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    19c2:	80 91 b1 09 	lds	r24, 0x09B1
    19c6:	85 ff       	sbrs	r24, 5
    19c8:	fc cf       	rjmp	.-8      	; 0x19c2 <main+0x94>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    19ca:	32 e4       	ldi	r19, 0x42	; 66
    19cc:	30 93 b0 09 	sts	0x09B0, r19
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    19d0:	80 91 b1 09 	lds	r24, 0x09B1
    19d4:	85 ff       	sbrs	r24, 5
    19d6:	fc cf       	rjmp	.-8      	; 0x19d0 <main+0xa2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    19d8:	4c e4       	ldi	r20, 0x4C	; 76
    19da:	40 93 b0 09 	sts	0x09B0, r20
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    19de:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    19e2:	80 91 08 21 	lds	r24, 0x2108

		// Sing a BL song in idle mode so you can be found. Stop as soon as you get a *
		while(choice != 42) {
			uart_putchar(&BT_USART, 'B');
			uart_putchar(&BT_USART, 'L');
			if (USART_RXBufferData_Available(&BT_data)) {
    19e6:	98 17       	cp	r25, r24
    19e8:	d1 f1       	breq	.+116    	; 0x1a5e <main+0x130>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    19ea:	e0 91 08 21 	lds	r30, 0x2108
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	eb 5f       	subi	r30, 0xFB	; 251
    19f2:	ff 4d       	sbci	r31, 0xDF	; 223
    19f4:	12 81       	ldd	r17, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    19f6:	80 91 08 21 	lds	r24, 0x2108
    19fa:	8f 5f       	subi	r24, 0xFF	; 255
    19fc:	80 93 08 21 	sts	0x2108, r24
				choice = USART_RXBuffer_GetByte(&BT_data);
				if (choice == 128) {
    1a00:	10 38       	cpi	r17, 0x80	; 128
    1a02:	89 f4       	brne	.+34     	; 0x1a26 <main+0xf8>

// Sets the baud rate if the aux serial port is already set up
// Also clear the aux serial buffer as data was probably sent at the wrong rate
void set_aux_baud_rate(int baud, char scale)
{
	AUX_data.buffer.RX_Tail = AUX_data.buffer.RX_Head;
    1a04:	80 91 ed 23 	lds	r24, 0x23ED
    1a08:	80 93 ee 23 	sts	0x23EE, r24

	USART_Baudrate_Set(&AUX_USART, baud, scale);
    1a0c:	27 e8       	ldi	r18, 0x87	; 135
    1a0e:	f3 01       	movw	r30, r6
    1a10:	26 83       	std	Z+6, r18	; 0x06
    1a12:	30 ee       	ldi	r19, 0xE0	; 224
    1a14:	37 83       	std	Z+7, r19	; 0x07
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1a16:	80 91 a1 08 	lds	r24, 0x08A1
    1a1a:	85 ff       	sbrs	r24, 5
    1a1c:	fc cf       	rjmp	.-8      	; 0x1a16 <main+0xe8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	40 93 a0 08 	sts	0x08A0, r20
    1a24:	11 c0       	rjmp	.+34     	; 0x1a48 <main+0x11a>
                                    // Something is trying to connect directly to an iRobot
                                    set_aux_baud_rate( ROOMBA_UART_SETTINGS ); // depends on model
                                    uart_putchar(&AUX_USART, 128); // pass through to iRobot
                                    serial_bridge(); // currently never returns
                                }
                                else if (choice == 0) {
    1a26:	11 23       	and	r17, r17
    1a28:	91 f4       	brne	.+36     	; 0x1a4e <main+0x120>

// Sets the baud rate if the aux serial port is already set up
// Also clear the aux serial buffer as data was probably sent at the wrong rate
void set_aux_baud_rate(int baud, char scale)
{
	AUX_data.buffer.RX_Tail = AUX_data.buffer.RX_Head;
    1a2a:	80 91 ed 23 	lds	r24, 0x23ED
    1a2e:	80 93 ee 23 	sts	0x23EE, r24

	USART_Baudrate_Set(&AUX_USART, baud, scale);
    1a32:	27 e8       	ldi	r18, 0x87	; 135
    1a34:	f3 01       	movw	r30, r6
    1a36:	26 83       	std	Z+6, r18	; 0x06
    1a38:	30 ee       	ldi	r19, 0xE0	; 224
    1a3a:	37 83       	std	Z+7, r19	; 0x07
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1a3c:	80 91 a1 08 	lds	r24, 0x08A1
    1a40:	85 ff       	sbrs	r24, 5
    1a42:	fc cf       	rjmp	.-8      	; 0x1a3c <main+0x10e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1a44:	10 92 a0 08 	sts	0x08A0, r1
                                    // Something may be trying to connect directly to a MindFlex headset
                                    set_aux_baud_rate( 135, -2); // 57600
                                    uart_putchar(&AUX_USART, 0); // pass through to headset
                                    serial_bridge(); // currently never returns;
    1a48:	0e 94 cd 01 	call	0x39a	; 0x39a <serial_bridge>
    1a4c:	08 c0       	rjmp	.+16     	; 0x1a5e <main+0x130>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1a4e:	80 91 b1 09 	lds	r24, 0x09B1
    1a52:	85 ff       	sbrs	r24, 5
    1a54:	fc cf       	rjmp	.-8      	; 0x1a4e <main+0x120>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1a56:	10 93 b0 09 	sts	0x09B0, r17
                                }
                                else {
				    uart_putchar(&BT_USART, choice);
                                }
			}
			if (choice != 42)
    1a5a:	1a 32       	cpi	r17, 0x2A	; 42
    1a5c:	59 f0       	breq	.+22     	; 0x1a74 <main+0x146>
    1a5e:	88 e8       	ldi	r24, 0x88	; 136
    1a60:	93 e1       	ldi	r25, 0x13	; 19
    1a62:	e0 e2       	ldi	r30, 0x20	; 32
    1a64:	f3 e0       	ldi	r31, 0x03	; 3
    1a66:	31 97       	sbiw	r30, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <main+0x138>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	d1 f7       	brne	.-12     	; 0x1a62 <main+0x134>
		choice = 0;
		time_out = 0;
		stop_ir_timer();

		// Sing a BL song in idle mode so you can be found. Stop as soon as you get a *
		while(choice != 42) {
    1a6e:	1a 32       	cpi	r17, 0x2A	; 42
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <main+0x146>
    1a72:	a7 cf       	rjmp	.-178    	; 0x19c2 <main+0x94>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e0       	ldi	r26, 0x00	; 0
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0

// Sets up PWM to a given frequency (both channels must share the same frequency)
void set_pwm() {

	// Set clock to 32 MHz
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
    1a7c:	41 2c       	mov	r4, r1
    1a7e:	6a e0       	ldi	r22, 0x0A	; 10
    1a80:	56 2e       	mov	r5, r22
		}

		// Active part of the program - listens for commands and responds as necessary
		while(exit == 0) {
			// Checks if we haven't heard anything for a long time, in which case we exit loop and go back to idle mode
			time_out++;
    1a82:	9c 01       	movw	r18, r24
    1a84:	ad 01       	movw	r20, r26
    1a86:	2f 5f       	subi	r18, 0xFF	; 255
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8e:	28 a3       	std	Y+32, r18	; 0x20
    1a90:	39 a3       	std	Y+33, r19	; 0x21
    1a92:	4a a3       	std	Y+34, r20	; 0x22
    1a94:	5b a3       	std	Y+35, r21	; 0x23
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1a96:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1a9a:	80 91 08 21 	lds	r24, 0x2108
			if(time_out > 33840000) {
				exit = 1;
			}

			// Check for a command character
			if (USART_RXBufferData_Available(&BT_data)) {
    1a9e:	98 17       	cp	r25, r24
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <main+0x176>
    1aa2:	47 c6       	rjmp	.+3214   	; 0x2732 <main+0xe04>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1aa4:	e0 91 08 21 	lds	r30, 0x2108
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	eb 5f       	subi	r30, 0xFB	; 251
    1aac:	ff 4d       	sbci	r31, 0xDF	; 223
    1aae:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    1ab0:	80 91 08 21 	lds	r24, 0x2108
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	80 93 08 21 	sts	0x2108, r24
			}
			else {
				choice = 0;
			}
			// If it exists, act on command
			if(choice != 0) {
    1aba:	99 23       	and	r25, r25
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <main+0x192>
    1abe:	39 c6       	rjmp	.+3186   	; 0x2732 <main+0xe04>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ac0:	80 91 b1 09 	lds	r24, 0x09B1
    1ac4:	85 ff       	sbrs	r24, 5
    1ac6:	fc cf       	rjmp	.-8      	; 0x1ac0 <main+0x192>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ac8:	90 93 b0 09 	sts	0x09B0, r25
				time_out = 0;
				// Return the command so the host knows we got it
				uart_putchar(&BT_USART, choice);

				// Giant switch statement to decide what to do with the command
				switch(choice) {
    1acc:	94 35       	cpi	r25, 0x54	; 84
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <main+0x1a4>
    1ad0:	cd c0       	rjmp	.+410    	; 0x1c6c <main+0x33e>
    1ad2:	95 35       	cpi	r25, 0x55	; 85
    1ad4:	a0 f5       	brcc	.+104    	; 0x1b3e <main+0x210>
    1ad6:	99 34       	cpi	r25, 0x49	; 73
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <main+0x1ae>
    1ada:	50 c1       	rjmp	.+672    	; 0x1d7c <main+0x44e>
    1adc:	9a 34       	cpi	r25, 0x4A	; 74
    1ade:	e0 f4       	brcc	.+56     	; 0x1b18 <main+0x1ea>
    1ae0:	92 34       	cpi	r25, 0x42	; 66
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <main+0x1b8>
    1ae4:	7e c0       	rjmp	.+252    	; 0x1be2 <main+0x2b4>
    1ae6:	93 34       	cpi	r25, 0x43	; 67
    1ae8:	80 f4       	brcc	.+32     	; 0x1b0a <main+0x1dc>
    1aea:	9e 33       	cpi	r25, 0x3E	; 62
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <main+0x1c2>
    1aee:	c4 c3       	rjmp	.+1928   	; 0x2278 <main+0x94a>
    1af0:	9f 33       	cpi	r25, 0x3F	; 63
    1af2:	38 f4       	brcc	.+14     	; 0x1b02 <main+0x1d4>
    1af4:	91 32       	cpi	r25, 0x21	; 33
    1af6:	09 f4       	brne	.+2      	; 0x1afa <main+0x1cc>
    1af8:	e0 c2       	rjmp	.+1472   	; 0x20ba <main+0x78c>
    1afa:	9c 33       	cpi	r25, 0x3C	; 60
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <main+0x1d2>
    1afe:	14 c6       	rjmp	.+3112   	; 0x2728 <main+0xdfa>
    1b00:	e2 c3       	rjmp	.+1988   	; 0x22c6 <main+0x998>
    1b02:	91 34       	cpi	r25, 0x41	; 65
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <main+0x1da>
    1b06:	10 c6       	rjmp	.+3104   	; 0x2728 <main+0xdfa>
    1b08:	4b c0       	rjmp	.+150    	; 0x1ba0 <main+0x272>
    1b0a:	93 34       	cpi	r25, 0x43	; 67
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <main+0x1e2>
    1b0e:	58 c5       	rjmp	.+2736   	; 0x25c0 <main+0xc92>
    1b10:	97 34       	cpi	r25, 0x47	; 71
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <main+0x1e8>
    1b14:	09 c6       	rjmp	.+3090   	; 0x2728 <main+0xdfa>
    1b16:	3d c3       	rjmp	.+1658   	; 0x2192 <main+0x864>
    1b18:	90 35       	cpi	r25, 0x50	; 80
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <main+0x1f0>
    1b1c:	f5 c3       	rjmp	.+2026   	; 0x2308 <main+0x9da>
    1b1e:	91 35       	cpi	r25, 0x51	; 81
    1b20:	38 f4       	brcc	.+14     	; 0x1b30 <main+0x202>
    1b22:	9c 34       	cpi	r25, 0x4C	; 76
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <main+0x1fa>
    1b26:	99 c0       	rjmp	.+306    	; 0x1c5a <main+0x32c>
    1b28:	9f 34       	cpi	r25, 0x4F	; 79
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <main+0x200>
    1b2c:	fd c5       	rjmp	.+3066   	; 0x2728 <main+0xdfa>
    1b2e:	ec c0       	rjmp	.+472    	; 0x1d08 <main+0x3da>
    1b30:	92 35       	cpi	r25, 0x52	; 82
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <main+0x208>
    1b34:	d0 c2       	rjmp	.+1440   	; 0x20d6 <main+0x7a8>
    1b36:	93 35       	cpi	r25, 0x53	; 83
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <main+0x20e>
    1b3a:	d4 c2       	rjmp	.+1448   	; 0x20e4 <main+0x7b6>
    1b3c:	31 cf       	rjmp	.-414    	; 0x19a0 <main+0x72>
    1b3e:	97 36       	cpi	r25, 0x67	; 103
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <main+0x216>
    1b42:	84 c3       	rjmp	.+1800   	; 0x224c <main+0x91e>
    1b44:	98 36       	cpi	r25, 0x68	; 104
    1b46:	98 f4       	brcc	.+38     	; 0x1b6e <main+0x240>
    1b48:	9a 35       	cpi	r25, 0x5A	; 90
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <main+0x220>
    1b4c:	89 c5       	rjmp	.+2834   	; 0x2660 <main+0xd32>
    1b4e:	9b 35       	cpi	r25, 0x5B	; 91
    1b50:	38 f4       	brcc	.+14     	; 0x1b60 <main+0x232>
    1b52:	96 35       	cpi	r25, 0x56	; 86
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <main+0x22a>
    1b56:	92 c0       	rjmp	.+292    	; 0x1c7c <main+0x34e>
    1b58:	98 35       	cpi	r25, 0x58	; 88
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <main+0x230>
    1b5c:	e5 c5       	rjmp	.+3018   	; 0x2728 <main+0xdfa>
    1b5e:	97 c0       	rjmp	.+302    	; 0x1c8e <main+0x360>
    1b60:	92 36       	cpi	r25, 0x62	; 98
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <main+0x238>
    1b64:	6f c0       	rjmp	.+222    	; 0x1c44 <main+0x316>
    1b66:	94 36       	cpi	r25, 0x64	; 100
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <main+0x23e>
    1b6a:	de c5       	rjmp	.+3004   	; 0x2728 <main+0xdfa>
    1b6c:	7d c4       	rjmp	.+2298   	; 0x2468 <main+0xb3a>
    1b6e:	92 37       	cpi	r25, 0x72	; 114
    1b70:	91 f0       	breq	.+36     	; 0x1b96 <main+0x268>
    1b72:	93 37       	cpi	r25, 0x73	; 115
    1b74:	30 f4       	brcc	.+12     	; 0x1b82 <main+0x254>
    1b76:	99 36       	cpi	r25, 0x69	; 105
    1b78:	81 f0       	breq	.+32     	; 0x1b9a <main+0x26c>
    1b7a:	90 37       	cpi	r25, 0x70	; 112
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <main+0x252>
    1b7e:	d4 c5       	rjmp	.+2984   	; 0x2728 <main+0xdfa>
    1b80:	ed c3       	rjmp	.+2010   	; 0x235c <main+0xa2e>
    1b82:	94 37       	cpi	r25, 0x74	; 116
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <main+0x25a>
    1b86:	a3 c5       	rjmp	.+2886   	; 0x26ce <main+0xda0>
    1b88:	94 37       	cpi	r25, 0x74	; 116
    1b8a:	08 f4       	brcc	.+2      	; 0x1b8e <main+0x260>
    1b8c:	c6 c2       	rjmp	.+1420   	; 0x211a <main+0x7ec>
    1b8e:	95 37       	cpi	r25, 0x75	; 117
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <main+0x266>
    1b92:	ca c5       	rjmp	.+2964   	; 0x2728 <main+0xdfa>
    1b94:	b8 c4       	rjmp	.+2416   	; 0x2506 <main+0xbd8>
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	79 c5       	rjmp	.+2802   	; 0x268c <main+0xd5e>
    1b9a:	00 e0       	ldi	r16, 0x00	; 0
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	4a c2       	rjmp	.+1172   	; 0x2034 <main+0x706>
					// Return the currect accelerometer data - X, Y, Z, and status (contains tapped and shaken bits)
					case 'A':
						updateAccel();
    1ba0:	0e 94 23 06 	call	0xc46	; 0xc46 <updateAccel>
						uart_putchar(&BT_USART, _acc.x);
    1ba4:	90 91 09 21 	lds	r25, 0x2109
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ba8:	80 91 b1 09 	lds	r24, 0x09B1
    1bac:	85 ff       	sbrs	r24, 5
    1bae:	fc cf       	rjmp	.-8      	; 0x1ba8 <main+0x27a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bb0:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.y);
    1bb4:	90 91 0a 21 	lds	r25, 0x210A
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bb8:	80 91 b1 09 	lds	r24, 0x09B1
    1bbc:	85 ff       	sbrs	r24, 5
    1bbe:	fc cf       	rjmp	.-8      	; 0x1bb8 <main+0x28a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bc0:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.z);
    1bc4:	90 91 0b 21 	lds	r25, 0x210B
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bc8:	80 91 b1 09 	lds	r24, 0x09B1
    1bcc:	85 ff       	sbrs	r24, 5
    1bce:	fc cf       	rjmp	.-8      	; 0x1bc8 <main+0x29a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bd0:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.status);
    1bd4:	90 91 0c 21 	lds	r25, 0x210C
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bd8:	80 91 b1 09 	lds	r24, 0x09B1
    1bdc:	85 ff       	sbrs	r24, 5
    1bde:	fc cf       	rjmp	.-8      	; 0x1bd8 <main+0x2aa>
    1be0:	90 c0       	rjmp	.+288    	; 0x1d02 <main+0x3d4>
						break;
					// Set the buzzer
					case 'B':
						temph = uart_getchar_timeout(&BT_USART);
    1be2:	80 eb       	ldi	r24, 0xB0	; 176
    1be4:	99 e0       	ldi	r25, 0x09	; 9
    1be6:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1bea:	8c 01       	movw	r16, r24
						// If temph is 256, it means we didn't get a follow up character and timed out, so respond with ERR
						if(temph == 256) {
    1bec:	31 e0       	ldi	r19, 0x01	; 1
    1bee:	80 30       	cpi	r24, 0x00	; 0
    1bf0:	93 07       	cpc	r25, r19
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <main+0x2c8>
    1bf4:	83 c5       	rjmp	.+2822   	; 0x26fc <main+0xdce>
    1bf6:	80 91 b1 09 	lds	r24, 0x09B1
    1bfa:	85 ff       	sbrs	r24, 5
    1bfc:	fc cf       	rjmp	.-8      	; 0x1bf6 <main+0x2c8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bfe:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1c02:	80 eb       	ldi	r24, 0xB0	; 176
    1c04:	99 e0       	ldi	r25, 0x09	; 9
    1c06:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	80 30       	cpi	r24, 0x00	; 0
    1c12:	94 07       	cpc	r25, r20
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <main+0x2ea>
    1c16:	72 c5       	rjmp	.+2788   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c18:	80 91 b1 09 	lds	r24, 0x09B1
    1c1c:	85 ff       	sbrs	r24, 5
    1c1e:	fc cf       	rjmp	.-8      	; 0x1c18 <main+0x2ea>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c20:	20 93 b0 09 	sts	0x09B0, r18
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						frequency = ((temph)<<8) + templ;
    1c24:	90 2f       	mov	r25, r16
    1c26:	88 27       	eor	r24, r24
    1c28:	28 0f       	add	r18, r24
    1c2a:	39 1f       	adc	r19, r25
}

// Set buzzer enables the waveform and sets it to a given frequency
void set_buzzer(int frequency) {
	// Enable waveform output
	TCD1.CTRLB |= TC1_CCAEN_bm;
    1c2c:	80 91 41 09 	lds	r24, 0x0941
    1c30:	80 61       	ori	r24, 0x10	; 16
    1c32:	80 93 41 09 	sts	0x0941, r24
	// Set the frequency
	cli();
    1c36:	f8 94       	cli
	TCD1.CCA = frequency;
    1c38:	20 93 68 09 	sts	0x0968, r18
    1c3c:	30 93 69 09 	sts	0x0969, r19
	sei();
    1c40:	78 94       	sei
    1c42:	72 c5       	rjmp	.+2788   	; 0x2728 <main+0xdfa>
}

// Disables the buzzer, and if the output is on, turns it off
void turn_off_buzzer() {
	// Disable the Waveform output
	TCD1.CTRLB &= (~TC1_CCAEN_bm);
    1c44:	80 91 41 09 	lds	r24, 0x0941
    1c48:	8f 7e       	andi	r24, 0xEF	; 239
    1c4a:	80 93 41 09 	sts	0x0941, r24
	// Turn off the pin just in case
	PORTD.OUTCLR |= PIN4_bm;
    1c4e:	80 91 66 06 	lds	r24, 0x0666
    1c52:	80 61       	ori	r24, 0x10	; 16
    1c54:	80 93 66 06 	sts	0x0666, r24
    1c58:	67 c5       	rjmp	.+2766   	; 0x2728 <main+0xdfa>
					case 'b':
						turn_off_buzzer();
						break;
					// Returns the value of the light sensor
					case 'L':
						sensor[0] = read_analog(LIGHT);
    1c5a:	80 e3       	ldi	r24, 0x30	; 48
    1c5c:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1c60:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c62:	80 91 b1 09 	lds	r24, 0x09B1
    1c66:	85 ff       	sbrs	r24, 5
    1c68:	fc cf       	rjmp	.-8      	; 0x1c62 <main+0x334>
    1c6a:	4b c0       	rjmp	.+150    	; 0x1d02 <main+0x3d4>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the Xmegas internal temperature read - this is undocumented because the value returned is very erratic
					case 'T':
						sensor[0] = read_internal_temperature();
    1c6c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <read_internal_temperature>
    1c70:	98 2f       	mov	r25, r24
    1c72:	80 91 b1 09 	lds	r24, 0x09B1
    1c76:	85 ff       	sbrs	r24, 5
    1c78:	fc cf       	rjmp	.-8      	; 0x1c72 <main+0x344>
    1c7a:	43 c0       	rjmp	.+134    	; 0x1d02 <main+0x3d4>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the battery voltage
					case 'V':
						sensor[0] = read_analog(BATT_VOLT);
    1c7c:	88 e3       	ldi	r24, 0x38	; 56
    1c7e:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1c82:	98 2f       	mov	r25, r24
    1c84:	80 91 b1 09 	lds	r24, 0x09B1
    1c88:	85 ff       	sbrs	r24, 5
    1c8a:	fc cf       	rjmp	.-8      	; 0x1c84 <main+0x356>
    1c8c:	3a c0       	rjmp	.+116    	; 0x1d02 <main+0x3d4>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the readings on all six ADC ports
					case 'X':
						sensor[0] = read_analog(AUX0);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1c94:	98 2f       	mov	r25, r24
    1c96:	80 91 b1 09 	lds	r24, 0x09B1
    1c9a:	85 ff       	sbrs	r24, 5
    1c9c:	fc cf       	rjmp	.-8      	; 0x1c96 <main+0x368>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c9e:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[0]);
						sensor[1] = read_analog(AUX1);
    1ca2:	88 e0       	ldi	r24, 0x08	; 8
    1ca4:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1ca8:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1caa:	80 91 b1 09 	lds	r24, 0x09B1
    1cae:	85 ff       	sbrs	r24, 5
    1cb0:	fc cf       	rjmp	.-8      	; 0x1caa <main+0x37c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cb2:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[1]);
						sensor[2] = read_analog(AUX2);
    1cb6:	80 e1       	ldi	r24, 0x10	; 16
    1cb8:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1cbc:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cbe:	80 91 b1 09 	lds	r24, 0x09B1
    1cc2:	85 ff       	sbrs	r24, 5
    1cc4:	fc cf       	rjmp	.-8      	; 0x1cbe <main+0x390>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cc6:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[2]);
						sensor[3] = read_analog(AUX3);
    1cca:	88 e1       	ldi	r24, 0x18	; 24
    1ccc:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1cd0:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cd2:	80 91 b1 09 	lds	r24, 0x09B1
    1cd6:	85 ff       	sbrs	r24, 5
    1cd8:	fc cf       	rjmp	.-8      	; 0x1cd2 <main+0x3a4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cda:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[3]);
						sensor[4] = read_analog(AUX4);
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1ce4:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ce6:	80 91 b1 09 	lds	r24, 0x09B1
    1cea:	85 ff       	sbrs	r24, 5
    1cec:	fc cf       	rjmp	.-8      	; 0x1ce6 <main+0x3b8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cee:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[4]);
						sensor[5] = read_analog(AUX4);
    1cf2:	80 e2       	ldi	r24, 0x20	; 32
    1cf4:	0e 94 cd 02 	call	0x59a	; 0x59a <read_analog>
    1cf8:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cfa:	80 91 b1 09 	lds	r24, 0x09B1
    1cfe:	85 ff       	sbrs	r24, 5
    1d00:	fc cf       	rjmp	.-8      	; 0x1cfa <main+0x3cc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d02:	90 93 b0 09 	sts	0x09B0, r25
    1d06:	10 c5       	rjmp	.+2592   	; 0x2728 <main+0xdfa>
						uart_putchar(&BT_USART, sensor[5]);
						break;
					// Sets the full-color LED
					case 'O':
						red = uart_getchar_timeout(&BT_USART);
    1d08:	80 eb       	ldi	r24, 0xB0	; 176
    1d0a:	99 e0       	ldi	r25, 0x09	; 9
    1d0c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
						if(red == 256) {
    1d10:	51 e0       	ldi	r21, 0x01	; 1
    1d12:	80 30       	cpi	r24, 0x00	; 0
    1d14:	95 07       	cpc	r25, r21
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <main+0x3ec>
    1d18:	f1 c4       	rjmp	.+2530   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, red);
    1d1a:	08 2f       	mov	r16, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d1c:	80 91 b1 09 	lds	r24, 0x09B1
    1d20:	85 ff       	sbrs	r24, 5
    1d22:	fc cf       	rjmp	.-8      	; 0x1d1c <main+0x3ee>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d24:	00 93 b0 09 	sts	0x09B0, r16
						}
						green = uart_getchar_timeout(&BT_USART);
    1d28:	80 eb       	ldi	r24, 0xB0	; 176
    1d2a:	99 e0       	ldi	r25, 0x09	; 9
    1d2c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
						if(green == 256) {
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	80 30       	cpi	r24, 0x00	; 0
    1d34:	96 07       	cpc	r25, r22
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <main+0x40c>
    1d38:	e1 c4       	rjmp	.+2498   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, green);
    1d3a:	18 2f       	mov	r17, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d3c:	80 91 b1 09 	lds	r24, 0x09B1
    1d40:	85 ff       	sbrs	r24, 5
    1d42:	fc cf       	rjmp	.-8      	; 0x1d3c <main+0x40e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d44:	10 93 b0 09 	sts	0x09B0, r17
						}
						blue = uart_getchar_timeout(&BT_USART);
    1d48:	80 eb       	ldi	r24, 0xB0	; 176
    1d4a:	99 e0       	ldi	r25, 0x09	; 9
    1d4c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
						if(blue == 256) {
    1d50:	e1 e0       	ldi	r30, 0x01	; 1
    1d52:	80 30       	cpi	r24, 0x00	; 0
    1d54:	9e 07       	cpc	r25, r30
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <main+0x42c>
    1d58:	d1 c4       	rjmp	.+2466   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, blue);
    1d5a:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d5c:	80 91 b1 09 	lds	r24, 0x09B1
    1d60:	85 ff       	sbrs	r24, 5
    1d62:	fc cf       	rjmp	.-8      	; 0x1d5c <main+0x42e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d64:	90 93 b0 09 	sts	0x09B0, r25

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
    1d68:	00 95       	com	r16
    1d6a:	00 93 39 09 	sts	0x0939, r16
	TCD0.CCBBUFH = 255-blue;
    1d6e:	90 95       	com	r25
    1d70:	90 93 3b 09 	sts	0x093B, r25
	TCD0.CCCBUFH = 255-green;
    1d74:	10 95       	com	r17
    1d76:	10 93 3d 09 	sts	0x093D, r17
    1d7a:	d6 c4       	rjmp	.+2476   	; 0x2728 <main+0xdfa>
						}
						set_led(red, green, blue);
						break;
					// Sets up the IR transmitter with signal characteristics
					case 'I':
						temph = uart_getchar_timeout(&BT_USART);
    1d7c:	80 eb       	ldi	r24, 0xB0	; 176
    1d7e:	99 e0       	ldi	r25, 0x09	; 9
    1d80:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1d84:	8c 01       	movw	r16, r24
    1d86:	5c 01       	movw	r10, r24
						if(temph == 256) {
    1d88:	f1 e0       	ldi	r31, 0x01	; 1
    1d8a:	80 30       	cpi	r24, 0x00	; 0
    1d8c:	9f 07       	cpc	r25, r31
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <main+0x464>
    1d90:	b5 c4       	rjmp	.+2410   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d92:	80 91 b1 09 	lds	r24, 0x09B1
    1d96:	85 ff       	sbrs	r24, 5
    1d98:	fc cf       	rjmp	.-8      	; 0x1d92 <main+0x464>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d9a:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1d9e:	80 eb       	ldi	r24, 0xB0	; 176
    1da0:	99 e0       	ldi	r25, 0x09	; 9
    1da2:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1da6:	9c 01       	movw	r18, r24
    1da8:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	80 30       	cpi	r24, 0x00	; 0
    1dae:	94 07       	cpc	r25, r20
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <main+0x486>
    1db2:	a4 c4       	rjmp	.+2376   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1db4:	80 91 b1 09 	lds	r24, 0x09B1
    1db8:	85 ff       	sbrs	r24, 5
    1dba:	fc cf       	rjmp	.-8      	; 0x1db4 <main+0x486>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dbc:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set the frequency of the IR carrier
						robotData.frequency = ((temph)<<8) + templ;
    1dc0:	90 2f       	mov	r25, r16
    1dc2:	88 27       	eor	r24, r24
    1dc4:	82 0f       	add	r24, r18
    1dc6:	93 1f       	adc	r25, r19
    1dc8:	80 93 1b 21 	sts	0x211B, r24
    1dcc:	90 93 1c 21 	sts	0x211C, r25
}

// Sets the frequency of the IR carrier
void set_ir_carrier(int frequency) {
	
	cli();
    1dd0:	f8 94       	cli
	TCC0.PERBUF = frequency;
    1dd2:	e0 e0       	ldi	r30, 0x00	; 0
    1dd4:	f8 e0       	ldi	r31, 0x08	; 8
    1dd6:	86 ab       	std	Z+54, r24	; 0x36
    1dd8:	97 ab       	std	Z+55, r25	; 0x37
	sei();
    1dda:	78 94       	sei
						set_ir_carrier(robotData.frequency);
						templ = uart_getchar_timeout(&BT_USART);
    1ddc:	80 eb       	ldi	r24, 0xB0	; 176
    1dde:	99 e0       	ldi	r25, 0x09	; 9
    1de0:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1de4:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1de6:	51 e0       	ldi	r21, 0x01	; 1
    1de8:	80 30       	cpi	r24, 0x00	; 0
    1dea:	95 07       	cpc	r25, r21
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <main+0x4c2>
    1dee:	86 c4       	rjmp	.+2316   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
						// Set the length of the start up pulses
							robotData.startUpPulseLength = templ;
    1df0:	98 2f       	mov	r25, r24
    1df2:	c0 92 1d 21 	sts	0x211D, r12
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1df6:	80 91 b1 09 	lds	r24, 0x09B1
    1dfa:	85 ff       	sbrs	r24, 5
    1dfc:	fc cf       	rjmp	.-8      	; 0x1df6 <main+0x4c8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dfe:	90 93 b0 09 	sts	0x09B0, r25
							uart_putchar(&BT_USART, robotData.startUpPulseLength);
						}
						if(robotData.startUpPulseLength > 16) {
    1e02:	91 31       	cpi	r25, 0x11	; 17
    1e04:	38 f4       	brcc	.+14     	; 0x1e14 <main+0x4e6>
    1e06:	9e e1       	ldi	r25, 0x1E	; 30
    1e08:	89 2e       	mov	r8, r25
    1e0a:	91 e2       	ldi	r25, 0x21	; 33
    1e0c:	99 2e       	mov	r9, r25
    1e0e:	00 e0       	ldi	r16, 0x00	; 0
    1e10:	10 e0       	ldi	r17, 0x00	; 0
    1e12:	35 c0       	rjmp	.+106    	; 0x1e7e <main+0x550>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e14:	80 91 b1 09 	lds	r24, 0x09B1
    1e18:	85 ff       	sbrs	r24, 5
    1e1a:	fc cf       	rjmp	.-8      	; 0x1e14 <main+0x4e6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e1c:	82 e5       	ldi	r24, 0x52	; 82
    1e1e:	80 93 b0 09 	sts	0x09B0, r24
    1e22:	82 c4       	rjmp	.+2308   	; 0x2728 <main+0xdfa>
							break;
						}

						// Read in the start up pulse timing data
						for(i=0; i < robotData.startUpPulseLength; i++) {
							temph = uart_getchar_timeout(&BT_USART);
    1e24:	80 eb       	ldi	r24, 0xB0	; 176
    1e26:	99 e0       	ldi	r25, 0x09	; 9
    1e28:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1e2c:	f8 2e       	mov	r15, r24
    1e2e:	5c 01       	movw	r10, r24
							if(temph == 256) {
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	a6 16       	cp	r10, r22
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	b6 06       	cpc	r11, r22
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <main+0x50e>
    1e3a:	60 c4       	rjmp	.+2240   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e3c:	80 91 b1 09 	lds	r24, 0x09B1
    1e40:	85 ff       	sbrs	r24, 5
    1e42:	fc cf       	rjmp	.-8      	; 0x1e3c <main+0x50e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e44:	f0 92 b0 09 	sts	0x09B0, r15
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    1e48:	80 eb       	ldi	r24, 0xB0	; 176
    1e4a:	99 e0       	ldi	r25, 0x09	; 9
    1e4c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1e50:	9c 01       	movw	r18, r24
    1e52:	6c 01       	movw	r12, r24
							if(templ == 256) {
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	20 30       	cpi	r18, 0x00	; 0
    1e58:	38 07       	cpc	r19, r24
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <main+0x530>
    1e5c:	4f c4       	rjmp	.+2206   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e5e:	80 91 b1 09 	lds	r24, 0x09B1
    1e62:	85 ff       	sbrs	r24, 5
    1e64:	fc cf       	rjmp	.-8      	; 0x1e5e <main+0x530>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e66:	20 93 b0 09 	sts	0x09B0, r18
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.startUpPulse[i] = ((temph)<<8) + templ;
    1e6a:	3f 2c       	mov	r3, r15
    1e6c:	22 24       	eor	r2, r2
    1e6e:	22 0d       	add	r18, r2
    1e70:	33 1d       	adc	r19, r3
    1e72:	f4 01       	movw	r30, r8
    1e74:	21 93       	st	Z+, r18
    1e76:	31 93       	st	Z+, r19
    1e78:	4f 01       	movw	r8, r30
							uart_putchar(&BT_USART, 'R');
							break;
						}

						// Read in the start up pulse timing data
						for(i=0; i < robotData.startUpPulseLength; i++) {
    1e7a:	0f 5f       	subi	r16, 0xFF	; 255
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	80 91 1d 21 	lds	r24, 0x211D
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	08 17       	cp	r16, r24
    1e86:	19 07       	cpc	r17, r25
    1e88:	6c f2       	brlt	.-102    	; 0x1e24 <main+0x4f6>
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.startUpPulse[i] = ((temph)<<8) + templ;
						}
						if(temph == 256 || templ == 256) {
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	af 16       	cp	r10, r31
    1e8e:	f1 e0       	ldi	r31, 0x01	; 1
    1e90:	bf 06       	cpc	r11, r31
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <main+0x568>
    1e94:	49 c4       	rjmp	.+2194   	; 0x2728 <main+0xdfa>
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	c2 16       	cp	r12, r18
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	d2 06       	cpc	r13, r18
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <main+0x574>
    1ea0:	43 c4       	rjmp	.+2182   	; 0x2728 <main+0xdfa>
							break;
						}
						templ = uart_getchar_timeout(&BT_USART);
    1ea2:	80 eb       	ldi	r24, 0xB0	; 176
    1ea4:	99 e0       	ldi	r25, 0x09	; 9
    1ea6:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1eaa:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1eac:	31 e0       	ldi	r19, 0x01	; 1
    1eae:	80 30       	cpi	r24, 0x00	; 0
    1eb0:	93 07       	cpc	r25, r19
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <main+0x588>
    1eb4:	23 c4       	rjmp	.+2118   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
						// Set the bit encoding to one of four pre-determined settings (see protocol instructions for more information)
							robotData.bitEncoding = templ;
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	c0 92 3e 21 	sts	0x213E, r12
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ebc:	80 91 b1 09 	lds	r24, 0x09B1
    1ec0:	85 ff       	sbrs	r24, 5
    1ec2:	fc cf       	rjmp	.-8      	; 0x1ebc <main+0x58e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ec4:	90 93 b0 09 	sts	0x09B0, r25
							uart_putchar(&BT_USART, robotData.bitEncoding);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1ec8:	80 eb       	ldi	r24, 0xB0	; 176
    1eca:	99 e0       	ldi	r25, 0x09	; 9
    1ecc:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1ed0:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	80 30       	cpi	r24, 0x00	; 0
    1ed6:	94 07       	cpc	r25, r20
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <main+0x5ae>
    1eda:	10 c4       	rjmp	.+2080   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    1edc:	28 2f       	mov	r18, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ede:	80 91 b1 09 	lds	r24, 0x09B1
    1ee2:	85 ff       	sbrs	r24, 5
    1ee4:	fc cf       	rjmp	.-8      	; 0x1ede <main+0x5b0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ee6:	20 93 b0 09 	sts	0x09B0, r18
						}
						// Set the number of bits (and bytes) contained in an IR command
						robotData.numBits = templ;
    1eea:	20 93 3f 21 	sts	0x213F, r18
						robotData.numBytes = (robotData.numBits-1)/8 + 1;
    1eee:	82 2f       	mov	r24, r18
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	68 e0       	ldi	r22, 0x08	; 8
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	0e 94 a8 13 	call	0x2750	; 0x2750 <__divmodhi4>
    1efc:	6f 5f       	subi	r22, 0xFF	; 255
    1efe:	60 93 40 21 	sts	0x2140, r22
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f02:	80 91 b1 09 	lds	r24, 0x09B1
    1f06:	85 ff       	sbrs	r24, 5
    1f08:	fc cf       	rjmp	.-8      	; 0x1f02 <main+0x5d4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f0a:	20 93 b0 09 	sts	0x09B0, r18
						uart_putchar(&BT_USART, robotData.numBits);
						temph = uart_getchar_timeout(&BT_USART);
    1f0e:	80 eb       	ldi	r24, 0xB0	; 176
    1f10:	99 e0       	ldi	r25, 0x09	; 9
    1f12:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1f16:	8c 01       	movw	r16, r24
						if(temph == 256) {
    1f18:	51 e0       	ldi	r21, 0x01	; 1
    1f1a:	80 30       	cpi	r24, 0x00	; 0
    1f1c:	95 07       	cpc	r25, r21
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <main+0x5f4>
    1f20:	ed c3       	rjmp	.+2010   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f22:	80 91 b1 09 	lds	r24, 0x09B1
    1f26:	85 ff       	sbrs	r24, 5
    1f28:	fc cf       	rjmp	.-8      	; 0x1f22 <main+0x5f4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f2a:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1f2e:	80 eb       	ldi	r24, 0xB0	; 176
    1f30:	99 e0       	ldi	r25, 0x09	; 9
    1f32:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1f36:	9c 01       	movw	r18, r24
    1f38:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	80 30       	cpi	r24, 0x00	; 0
    1f3e:	96 07       	cpc	r25, r22
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <main+0x616>
    1f42:	dc c3       	rjmp	.+1976   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f44:	80 91 b1 09 	lds	r24, 0x09B1
    1f48:	85 ff       	sbrs	r24, 5
    1f4a:	fc cf       	rjmp	.-8      	; 0x1f44 <main+0x616>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f4c:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for a high bit
						robotData.highBitTime = ((temph)<<8) + templ;
    1f50:	90 2f       	mov	r25, r16
    1f52:	88 27       	eor	r24, r24
    1f54:	28 0f       	add	r18, r24
    1f56:	39 1f       	adc	r19, r25
    1f58:	20 93 41 21 	sts	0x2141, r18
    1f5c:	30 93 42 21 	sts	0x2142, r19
						temph = uart_getchar_timeout(&BT_USART);
    1f60:	80 eb       	ldi	r24, 0xB0	; 176
    1f62:	99 e0       	ldi	r25, 0x09	; 9
    1f64:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1f68:	8c 01       	movw	r16, r24
						if(temph == 256) {
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	00 30       	cpi	r16, 0x00	; 0
    1f6e:	18 07       	cpc	r17, r24
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <main+0x646>
    1f72:	c4 c3       	rjmp	.+1928   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f74:	80 91 b1 09 	lds	r24, 0x09B1
    1f78:	85 ff       	sbrs	r24, 5
    1f7a:	fc cf       	rjmp	.-8      	; 0x1f74 <main+0x646>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f7c:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1f80:	80 eb       	ldi	r24, 0xB0	; 176
    1f82:	99 e0       	ldi	r25, 0x09	; 9
    1f84:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1f88:	9c 01       	movw	r18, r24
    1f8a:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	20 30       	cpi	r18, 0x00	; 0
    1f90:	39 07       	cpc	r19, r25
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <main+0x668>
    1f94:	b3 c3       	rjmp	.+1894   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f96:	80 91 b1 09 	lds	r24, 0x09B1
    1f9a:	85 ff       	sbrs	r24, 5
    1f9c:	fc cf       	rjmp	.-8      	; 0x1f96 <main+0x668>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f9e:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for a low bit
						robotData.lowBitTime = ((temph)<<8) + templ;
    1fa2:	90 2f       	mov	r25, r16
    1fa4:	88 27       	eor	r24, r24
    1fa6:	28 0f       	add	r18, r24
    1fa8:	39 1f       	adc	r19, r25
    1faa:	20 93 43 21 	sts	0x2143, r18
    1fae:	30 93 44 21 	sts	0x2144, r19
						temph = uart_getchar_timeout(&BT_USART);
    1fb2:	80 eb       	ldi	r24, 0xB0	; 176
    1fb4:	99 e0       	ldi	r25, 0x09	; 9
    1fb6:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1fba:	8c 01       	movw	r16, r24
						if(temph == 256) {
    1fbc:	e1 e0       	ldi	r30, 0x01	; 1
    1fbe:	80 30       	cpi	r24, 0x00	; 0
    1fc0:	9e 07       	cpc	r25, r30
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <main+0x698>
    1fc4:	9b c3       	rjmp	.+1846   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fc6:	80 91 b1 09 	lds	r24, 0x09B1
    1fca:	85 ff       	sbrs	r24, 5
    1fcc:	fc cf       	rjmp	.-8      	; 0x1fc6 <main+0x698>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fce:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1fd2:	80 eb       	ldi	r24, 0xB0	; 176
    1fd4:	99 e0       	ldi	r25, 0x09	; 9
    1fd6:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    1fda:	9c 01       	movw	r18, r24
    1fdc:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1fde:	f1 e0       	ldi	r31, 0x01	; 1
    1fe0:	80 30       	cpi	r24, 0x00	; 0
    1fe2:	9f 07       	cpc	r25, r31
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <main+0x6ba>
    1fe6:	8a c3       	rjmp	.+1812   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fe8:	80 91 b1 09 	lds	r24, 0x09B1
    1fec:	85 ff       	sbrs	r24, 5
    1fee:	fc cf       	rjmp	.-8      	; 0x1fe8 <main+0x6ba>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ff0:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for on or off
						robotData.offTime = ((temph)<<8) + templ;
    1ff4:	90 2f       	mov	r25, r16
    1ff6:	88 27       	eor	r24, r24
    1ff8:	28 0f       	add	r18, r24
    1ffa:	39 1f       	adc	r19, r25
    1ffc:	20 93 45 21 	sts	0x2145, r18
    2000:	30 93 46 21 	sts	0x2146, r19
    2004:	91 c3       	rjmp	.+1826   	; 0x2728 <main+0xdfa>
						break;
					// Transmit an IR signal according to the previously determined configuration
					case 'i':
						// Get the signal data as one or more bytes
						for(i = 0; i < robotData.numBytes; i++) {
							templ = uart_getchar_timeout(&BT_USART);
    2006:	80 eb       	ldi	r24, 0xB0	; 176
    2008:	99 e0       	ldi	r25, 0x09	; 9
    200a:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    200e:	6c 01       	movw	r12, r24
							if(templ == 256) {
    2010:	21 e0       	ldi	r18, 0x01	; 1
    2012:	80 30       	cpi	r24, 0x00	; 0
    2014:	92 07       	cpc	r25, r18
    2016:	09 f4       	brne	.+2      	; 0x201a <main+0x6ec>
    2018:	71 c3       	rjmp	.+1762   	; 0x26fc <main+0xdce>
                                                                err();
								break;
							}
							else {
								robotData.irBytes[i] = templ;
    201a:	98 2f       	mov	r25, r24
    201c:	f8 01       	movw	r30, r16
    201e:	e5 5e       	subi	r30, 0xE5	; 229
    2020:	fe 4d       	sbci	r31, 0xDE	; 222
    2022:	c4 a6       	std	Z+44, r12	; 0x2c
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2024:	80 91 b1 09 	lds	r24, 0x09B1
    2028:	85 ff       	sbrs	r24, 5
    202a:	fc cf       	rjmp	.-8      	; 0x2024 <main+0x6f6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    202c:	90 93 b0 09 	sts	0x09B0, r25
						robotData.offTime = ((temph)<<8) + templ;
						break;
					// Transmit an IR signal according to the previously determined configuration
					case 'i':
						// Get the signal data as one or more bytes
						for(i = 0; i < robotData.numBytes; i++) {
    2030:	0f 5f       	subi	r16, 0xFF	; 255
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	80 91 40 21 	lds	r24, 0x2140
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	08 17       	cp	r16, r24
    203c:	19 07       	cpc	r17, r25
    203e:	1c f3       	brlt	.-58     	; 0x2006 <main+0x6d8>
							else {
								robotData.irBytes[i] = templ;
								uart_putchar(&BT_USART, robotData.irBytes[i]);
							}
						}
						if(templ == 256) {
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	c3 16       	cp	r12, r19
    2044:	31 e0       	ldi	r19, 0x01	; 1
    2046:	d3 06       	cpc	r13, r19
    2048:	09 f4       	brne	.+2      	; 0x204c <main+0x71e>
    204a:	6e c3       	rjmp	.+1756   	; 0x2728 <main+0xdfa>
							break;
						}
						temph = uart_getchar_timeout(&BT_USART);
    204c:	80 eb       	ldi	r24, 0xB0	; 176
    204e:	99 e0       	ldi	r25, 0x09	; 9
    2050:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    2054:	8c 01       	movw	r16, r24
						if(temph == 256) {
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	80 30       	cpi	r24, 0x00	; 0
    205a:	94 07       	cpc	r25, r20
    205c:	09 f4       	brne	.+2      	; 0x2060 <main+0x732>
    205e:	4e c3       	rjmp	.+1692   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2060:	80 91 b1 09 	lds	r24, 0x09B1
    2064:	85 ff       	sbrs	r24, 5
    2066:	fc cf       	rjmp	.-8      	; 0x2060 <main+0x732>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2068:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    206c:	80 eb       	ldi	r24, 0xB0	; 176
    206e:	99 e0       	ldi	r25, 0x09	; 9
    2070:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    2074:	9c 01       	movw	r18, r24
    2076:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2078:	51 e0       	ldi	r21, 0x01	; 1
    207a:	80 30       	cpi	r24, 0x00	; 0
    207c:	95 07       	cpc	r25, r21
    207e:	09 f4       	brne	.+2      	; 0x2082 <main+0x754>
    2080:	3d c3       	rjmp	.+1658   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2082:	80 91 b1 09 	lds	r24, 0x09B1
    2086:	85 ff       	sbrs	r24, 5
    2088:	fc cf       	rjmp	.-8      	; 0x2082 <main+0x754>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    208a:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Determine if the signal is repeated or not, and if so, with what frequency
						robotData.repeatTime = ((temph)<<8) + templ;
    208e:	90 2f       	mov	r25, r16
    2090:	88 27       	eor	r24, r24
    2092:	82 0f       	add	r24, r18
    2094:	93 1f       	adc	r25, r19
    2096:	80 93 07 22 	sts	0x2207, r24
    209a:	90 93 08 22 	sts	0x2208, r25
						if(robotData.repeatTime != 0) {
    209e:	89 2b       	or	r24, r25
    20a0:	39 f0       	breq	.+14     	; 0x20b0 <main+0x782>
							robotData.repeatFlag = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	80 93 09 22 	sts	0x2209, r24
    20aa:	90 93 0a 22 	sts	0x220A, r25
    20ae:	cb c0       	rjmp	.+406    	; 0x2246 <main+0x918>
						}
						else {
							robotData.repeatFlag = 0;
    20b0:	10 92 09 22 	sts	0x2209, r1
    20b4:	10 92 0a 22 	sts	0x220A, r1
    20b8:	c6 c0       	rjmp	.+396    	; 0x2246 <main+0x918>
						// Startup timer interrupts
						start_ir_timer();
						break;
					// Turn off any repeating IR signal
					case '!':
						robotData.repeatFlag = 0;
    20ba:	10 92 09 22 	sts	0x2209, r1
    20be:	10 92 0a 22 	sts	0x220A, r1
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    20c2:	e0 e4       	ldi	r30, 0x40	; 64
    20c4:	f8 e0       	ldi	r31, 0x08	; 8
    20c6:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
    20c8:	f8 94       	cli
	TCC0.CCA = 0x0000;
    20ca:	e0 e0       	ldi	r30, 0x00	; 0
    20cc:	f8 e0       	ldi	r31, 0x08	; 8
    20ce:	10 a6       	std	Z+40, r1	; 0x28
    20d0:	11 a6       	std	Z+41, r1	; 0x29
	sei();
    20d2:	78 94       	sei
    20d4:	29 c3       	rjmp	.+1618   	; 0x2728 <main+0xdfa>
						stop_ir_timer();
						break;
					// Capture a signal from the IR receiver
					case 'R':
						init_ir_read();
    20d6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <init_ir_read>
						while(ir_read_flag!=0);
    20da:	80 91 04 20 	lds	r24, 0x2004
    20de:	88 23       	and	r24, r24
    20e0:	e1 f7       	brne	.-8      	; 0x20da <main+0x7ac>
    20e2:	22 c3       	rjmp	.+1604   	; 0x2728 <main+0xdfa>
						break;
					// Store the captured signal in an EEPROM location
					case 'S':
						location = uart_getchar_timeout(&BT_USART)-48; // Subtracing 48 converts from ASCII to numeric numbers
    20e4:	80 eb       	ldi	r24, 0xB0	; 176
    20e6:	99 e0       	ldi	r25, 0x09	; 9
    20e8:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    20ec:	98 2f       	mov	r25, r24
    20ee:	90 53       	subi	r25, 0x30	; 48
						if((location >= 0) && (location < 5) && (signal_count > 4)) {
    20f0:	95 30       	cpi	r25, 0x05	; 5
    20f2:	08 f0       	brcs	.+2      	; 0x20f6 <main+0x7c8>
    20f4:	03 c3       	rjmp	.+1542   	; 0x26fc <main+0xdce>
    20f6:	80 91 02 20 	lds	r24, 0x2002
    20fa:	85 30       	cpi	r24, 0x05	; 5
    20fc:	08 f4       	brcc	.+2      	; 0x2100 <main+0x7d2>
    20fe:	fe c2       	rjmp	.+1532   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2100:	80 91 b1 09 	lds	r24, 0x09B1
    2104:	85 ff       	sbrs	r24, 5
    2106:	fc cf       	rjmp	.-8      	; 0x2100 <main+0x7d2>
							uart_putchar(&BT_USART, location+48);
    2108:	90 5d       	subi	r25, 0xD0	; 208
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    210a:	90 93 b0 09 	sts	0x09B0, r25
    210e:	90 53       	subi	r25, 0x30	; 48
							write_data_to_eeprom(location);
    2110:	89 2f       	mov	r24, r25
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 81 0b 	call	0x1702	; 0x1702 <write_data_to_eeprom>
    2118:	07 c3       	rjmp	.+1550   	; 0x2728 <main+0xdfa>
                                                        err();
						}
						break;
					// Receive a raw IR signal over bluetooth and transmit it with the IR LED
					case 's':
						if(read_data_from_serial()) {
    211a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <read_data_from_serial>
    211e:	89 2b       	or	r24, r25
    2120:	09 f4       	brne	.+2      	; 0x2124 <main+0x7f6>
    2122:	ec c2       	rjmp	.+1496   	; 0x26fc <main+0xdce>
							temph = uart_getchar_timeout(&BT_USART);
    2124:	80 eb       	ldi	r24, 0xB0	; 176
    2126:	99 e0       	ldi	r25, 0x09	; 9
    2128:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    212c:	8c 01       	movw	r16, r24
							if(temph == 256) {
    212e:	91 e0       	ldi	r25, 0x01	; 1
    2130:	00 30       	cpi	r16, 0x00	; 0
    2132:	19 07       	cpc	r17, r25
    2134:	09 f4       	brne	.+2      	; 0x2138 <main+0x80a>
    2136:	e2 c2       	rjmp	.+1476   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2138:	80 91 b1 09 	lds	r24, 0x09B1
    213c:	85 ff       	sbrs	r24, 5
    213e:	fc cf       	rjmp	.-8      	; 0x2138 <main+0x80a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2140:	00 93 b0 09 	sts	0x09B0, r16
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    2144:	80 eb       	ldi	r24, 0xB0	; 176
    2146:	99 e0       	ldi	r25, 0x09	; 9
    2148:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    214c:	9c 01       	movw	r18, r24
    214e:	6c 01       	movw	r12, r24
							if(templ == 256) {
    2150:	e1 e0       	ldi	r30, 0x01	; 1
    2152:	80 30       	cpi	r24, 0x00	; 0
    2154:	9e 07       	cpc	r25, r30
    2156:	09 f4       	brne	.+2      	; 0x215a <main+0x82c>
    2158:	d1 c2       	rjmp	.+1442   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    215a:	80 91 b1 09 	lds	r24, 0x09B1
    215e:	85 ff       	sbrs	r24, 5
    2160:	fc cf       	rjmp	.-8      	; 0x215a <main+0x82c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2162:	20 93 b0 09 	sts	0x09B0, r18
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							// Set if the signal should repeat and if so, with what frequency
							robotData.repeatTime = ((temph)<<8) + templ;
    2166:	90 2f       	mov	r25, r16
    2168:	88 27       	eor	r24, r24
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	80 93 07 22 	sts	0x2207, r24
    2172:	90 93 08 22 	sts	0x2208, r25
							if(robotData.repeatTime != 0) {
    2176:	89 2b       	or	r24, r25
    2178:	39 f0       	breq	.+14     	; 0x2188 <main+0x85a>
								robotData.repeatFlag = 1;
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	20 93 09 22 	sts	0x2209, r18
    2182:	30 93 0a 22 	sts	0x220A, r19
    2186:	54 c0       	rjmp	.+168    	; 0x2230 <main+0x902>
							}
							else {
								robotData.repeatFlag = 0;
    2188:	10 92 09 22 	sts	0x2209, r1
    218c:	10 92 0a 22 	sts	0x220A, r1
    2190:	4f c0       	rjmp	.+158    	; 0x2230 <main+0x902>
								break;
						}
						break;
					// Get a stored signal from an EEPROM location and transmit it over the IR LED (and repeat as desired)
					case 'G':
						location = uart_getchar_timeout(&BT_USART)-48;
    2192:	80 eb       	ldi	r24, 0xB0	; 176
    2194:	99 e0       	ldi	r25, 0x09	; 9
    2196:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    219a:	70 ed       	ldi	r23, 0xD0	; 208
    219c:	f7 2e       	mov	r15, r23
    219e:	f8 0e       	add	r15, r24
						if(location >= 0 && location < 5) {
    21a0:	64 e0       	ldi	r22, 0x04	; 4
    21a2:	6f 15       	cp	r22, r15
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <main+0x87a>
    21a6:	aa c2       	rjmp	.+1364   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21a8:	80 91 b1 09 	lds	r24, 0x09B1
    21ac:	85 ff       	sbrs	r24, 5
    21ae:	fc cf       	rjmp	.-8      	; 0x21a8 <main+0x87a>
							uart_putchar(&BT_USART, location+48);
    21b0:	80 e3       	ldi	r24, 0x30	; 48
    21b2:	f8 0e       	add	r15, r24
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21b4:	f0 92 b0 09 	sts	0x09B0, r15
    21b8:	90 ed       	ldi	r25, 0xD0	; 208
    21ba:	f9 0e       	add	r15, r25
							temph = uart_getchar_timeout(&BT_USART);
    21bc:	80 eb       	ldi	r24, 0xB0	; 176
    21be:	99 e0       	ldi	r25, 0x09	; 9
    21c0:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    21c4:	8c 01       	movw	r16, r24
							if(temph == 256) {
    21c6:	e1 e0       	ldi	r30, 0x01	; 1
    21c8:	80 30       	cpi	r24, 0x00	; 0
    21ca:	9e 07       	cpc	r25, r30
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <main+0x8a2>
    21ce:	96 c2       	rjmp	.+1324   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21d0:	80 91 b1 09 	lds	r24, 0x09B1
    21d4:	85 ff       	sbrs	r24, 5
    21d6:	fc cf       	rjmp	.-8      	; 0x21d0 <main+0x8a2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21d8:	00 93 b0 09 	sts	0x09B0, r16
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    21dc:	80 eb       	ldi	r24, 0xB0	; 176
    21de:	99 e0       	ldi	r25, 0x09	; 9
    21e0:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    21e4:	9c 01       	movw	r18, r24
    21e6:	6c 01       	movw	r12, r24
							if(templ == 256) {
    21e8:	f1 e0       	ldi	r31, 0x01	; 1
    21ea:	80 30       	cpi	r24, 0x00	; 0
    21ec:	9f 07       	cpc	r25, r31
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <main+0x8c4>
    21f0:	85 c2       	rjmp	.+1290   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21f2:	80 91 b1 09 	lds	r24, 0x09B1
    21f6:	85 ff       	sbrs	r24, 5
    21f8:	fc cf       	rjmp	.-8      	; 0x21f2 <main+0x8c4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21fa:	20 93 b0 09 	sts	0x09B0, r18
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.repeatTime = ((temph)<<8) + templ;
    21fe:	90 2f       	mov	r25, r16
    2200:	88 27       	eor	r24, r24
    2202:	82 0f       	add	r24, r18
    2204:	93 1f       	adc	r25, r19
    2206:	80 93 07 22 	sts	0x2207, r24
    220a:	90 93 08 22 	sts	0x2208, r25
							if(robotData.repeatTime != 0) {
    220e:	89 2b       	or	r24, r25
    2210:	39 f0       	breq	.+14     	; 0x2220 <main+0x8f2>
								robotData.repeatFlag = 1;
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	20 93 09 22 	sts	0x2209, r18
    221a:	30 93 0a 22 	sts	0x220A, r19
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <main+0x8fa>
							}
							else {
								robotData.repeatFlag = 0;
    2220:	10 92 09 22 	sts	0x2209, r1
    2224:	10 92 0a 22 	sts	0x220A, r1
							}
							read_data_from_eeprom(location);
    2228:	8f 2d       	mov	r24, r15
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <read_data_from_eeprom>
							robotData.frequency = 0x0349;
    2230:	49 e4       	ldi	r20, 0x49	; 73
    2232:	53 e0       	ldi	r21, 0x03	; 3
    2234:	40 93 1b 21 	sts	0x211B, r20
    2238:	50 93 1c 21 	sts	0x211C, r21
							robotData.startUpPulseLength = 0;
    223c:	10 92 1d 21 	sts	0x211D, r1
							robotData.bitEncoding = 0x04;
    2240:	54 e0       	ldi	r21, 0x04	; 4
    2242:	50 93 3e 21 	sts	0x213E, r21
							start_ir_timer();
    2246:	0e 94 2d 03 	call	0x65a	; 0x65a <start_ir_timer>
    224a:	6e c2       	rjmp	.+1244   	; 0x2728 <main+0xdfa>
                                                        err();
						}
						break;
					// Get a stored signal from EEPROM and print it over bluetooth to the host
					case 'g':
						location = uart_getchar_timeout(&BT_USART)-48;
    224c:	80 eb       	ldi	r24, 0xB0	; 176
    224e:	99 e0       	ldi	r25, 0x09	; 9
    2250:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    2254:	98 2f       	mov	r25, r24
    2256:	90 53       	subi	r25, 0x30	; 48
						if(location >= 0 && location < 5) {
    2258:	95 30       	cpi	r25, 0x05	; 5
    225a:	08 f0       	brcs	.+2      	; 0x225e <main+0x930>
    225c:	4f c2       	rjmp	.+1182   	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    225e:	80 91 b1 09 	lds	r24, 0x09B1
    2262:	85 ff       	sbrs	r24, 5
    2264:	fc cf       	rjmp	.-8      	; 0x225e <main+0x930>
							uart_putchar(&BT_USART, location+48);
    2266:	90 5d       	subi	r25, 0xD0	; 208
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2268:	90 93 b0 09 	sts	0x09B0, r25
    226c:	90 53       	subi	r25, 0x30	; 48
							print_data_from_eeprom(location);
    226e:	89 2f       	mov	r24, r25
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 55 0a 	call	0x14aa	; 0x14aa <print_data_from_eeprom>
    2276:	58 c2       	rjmp	.+1200   	; 0x2728 <main+0xdfa>
						}
						break;
						// Output on digital I/O
					case '>':
						// Set port
						temph = uart_getchar_timeout(&BT_USART);
    2278:	80 eb       	ldi	r24, 0xB0	; 176
    227a:	99 e0       	ldi	r25, 0x09	; 9
    227c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
						if(temph == 256) {
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	80 30       	cpi	r24, 0x00	; 0
    2284:	96 07       	cpc	r25, r22
    2286:	09 f4       	brne	.+2      	; 0x228a <main+0x95c>
    2288:	39 c2       	rjmp	.+1138   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
    228a:	18 2f       	mov	r17, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    228c:	80 91 b1 09 	lds	r24, 0x09B1
    2290:	85 ff       	sbrs	r24, 5
    2292:	fc cf       	rjmp	.-8      	; 0x228c <main+0x95e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2294:	10 93 b0 09 	sts	0x09B0, r17
						}
						// Get value
						templ = uart_getchar_timeout(&BT_USART);
    2298:	80 eb       	ldi	r24, 0xB0	; 176
    229a:	99 e0       	ldi	r25, 0x09	; 9
    229c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    22a0:	6c 01       	movw	r12, r24
						if(templ == 256) {
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	c8 16       	cp	r12, r24
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	d8 06       	cpc	r13, r24
    22aa:	09 f4       	brne	.+2      	; 0x22ae <main+0x980>
    22ac:	27 c2       	rjmp	.+1102   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    22ae:	6c 2d       	mov	r22, r12
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22b0:	80 91 b1 09 	lds	r24, 0x09B1
    22b4:	85 ff       	sbrs	r24, 5
    22b6:	fc cf       	rjmp	.-8      	; 0x22b0 <main+0x982>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22b8:	60 93 b0 09 	sts	0x09B0, r22
						}
						set_output(temph, (templ-48));
    22bc:	60 53       	subi	r22, 0x30	; 48
    22be:	81 2f       	mov	r24, r17
    22c0:	0e 94 c2 07 	call	0xf84	; 0xf84 <set_output>
    22c4:	31 c2       	rjmp	.+1122   	; 0x2728 <main+0xdfa>
						break;
						// Input on digital I/O
					case '<':
						// Get port
						temph = uart_getchar_timeout(&BT_USART);
    22c6:	80 eb       	ldi	r24, 0xB0	; 176
    22c8:	99 e0       	ldi	r25, 0x09	; 9
    22ca:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    22ce:	9c 01       	movw	r18, r24
						if(temph == 256) {
    22d0:	91 e0       	ldi	r25, 0x01	; 1
    22d2:	20 30       	cpi	r18, 0x00	; 0
    22d4:	39 07       	cpc	r19, r25
    22d6:	09 f4       	brne	.+2      	; 0x22da <main+0x9ac>
    22d8:	11 c2       	rjmp	.+1058   	; 0x26fc <main+0xdce>
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
    22da:	92 2f       	mov	r25, r18
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22dc:	80 91 b1 09 	lds	r24, 0x09B1
    22e0:	85 ff       	sbrs	r24, 5
    22e2:	fc cf       	rjmp	.-8      	; 0x22dc <main+0x9ae>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22e4:	90 93 b0 09 	sts	0x09B0, r25
						}
						// Get value (1 or 0)
						templ = read_input(temph)+48;
    22e8:	89 2f       	mov	r24, r25
    22ea:	0e 94 29 08 	call	0x1052	; 0x1052 <read_input>
    22ee:	c8 2e       	mov	r12, r24
    22f0:	dd 24       	eor	r13, r13
    22f2:	e0 e3       	ldi	r30, 0x30	; 48
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	ce 0e       	add	r12, r30
    22f8:	df 1e       	adc	r13, r31
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22fa:	80 91 b1 09 	lds	r24, 0x09B1
    22fe:	85 ff       	sbrs	r24, 5
    2300:	fc cf       	rjmp	.-8      	; 0x22fa <main+0x9cc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2302:	c0 92 b0 09 	sts	0x09B0, r12
    2306:	10 c2       	rjmp	.+1056   	; 0x2728 <main+0xdfa>
						uart_putchar(&BT_USART, templ);
						break;
					// Configure PWM frequency
					case 'P':
						temph = uart_getchar_timeout(&BT_USART);
    2308:	80 eb       	ldi	r24, 0xB0	; 176
    230a:	99 e0       	ldi	r25, 0x09	; 9
    230c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    2310:	8c 01       	movw	r16, r24
						if(temph == 256) {
    2312:	f1 e0       	ldi	r31, 0x01	; 1
    2314:	80 30       	cpi	r24, 0x00	; 0
    2316:	9f 07       	cpc	r25, r31
    2318:	09 f4       	brne	.+2      	; 0x231c <main+0x9ee>
    231a:	f0 c1       	rjmp	.+992    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    231c:	80 91 b1 09 	lds	r24, 0x09B1
    2320:	85 ff       	sbrs	r24, 5
    2322:	fc cf       	rjmp	.-8      	; 0x231c <main+0x9ee>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2324:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2328:	80 eb       	ldi	r24, 0xB0	; 176
    232a:	99 e0       	ldi	r25, 0x09	; 9
    232c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    2330:	9c 01       	movw	r18, r24
    2332:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	80 30       	cpi	r24, 0x00	; 0
    2338:	94 07       	cpc	r25, r20
    233a:	09 f4       	brne	.+2      	; 0x233e <main+0xa10>
    233c:	df c1       	rjmp	.+958    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    233e:	80 91 b1 09 	lds	r24, 0x09B1
    2342:	85 ff       	sbrs	r24, 5
    2344:	fc cf       	rjmp	.-8      	; 0x233e <main+0xa10>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2346:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Stores the PWM frequency for use by set_pwm()
						pwm_frequency = ((temph)<<8) + templ;
    234a:	90 2f       	mov	r25, r16
    234c:	88 27       	eor	r24, r24
    234e:	28 0f       	add	r18, r24
    2350:	39 1f       	adc	r19, r25
    2352:	20 93 00 20 	sts	0x2000, r18
    2356:	30 93 01 20 	sts	0x2001, r19
    235a:	e6 c1       	rjmp	.+972    	; 0x2728 <main+0xdfa>
    235c:	51 e0       	ldi	r21, 0x01	; 1
    235e:	50 93 00 0a 	sts	0x0A00, r21
	
	// Turn on single slope pwm waveform generation
	TCE0.CTRLB = TC_WGMODE_SS_gc;
    2362:	23 e0       	ldi	r18, 0x03	; 3
    2364:	f2 01       	movw	r30, r4
    2366:	21 83       	std	Z+1, r18	; 0x01
	// Turn off other registers in case they were set by IR read
	TCE0.CTRLD = 0x00;
    2368:	13 82       	std	Z+3, r1	; 0x03
	// Set frequency of the PWM signal
	TCE0.PERBUF = pwm_frequency;
    236a:	80 91 00 20 	lds	r24, 0x2000
    236e:	90 91 01 20 	lds	r25, 0x2001
    2372:	86 ab       	std	Z+54, r24	; 0x36
    2374:	97 ab       	std	Z+55, r25	; 0x37
						break;
					// Set PWM duty cycle for a specific port
					case 'p':
						set_pwm();
						temph = uart_getchar_timeout(&BT_USART);
    2376:	80 eb       	ldi	r24, 0xB0	; 176
    2378:	99 e0       	ldi	r25, 0x09	; 9
    237a:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    237e:	9c 01       	movw	r18, r24
						if(temph == 256) {
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	80 30       	cpi	r24, 0x00	; 0
    2384:	94 07       	cpc	r25, r20
    2386:	09 f4       	brne	.+2      	; 0x238a <main+0xa5c>
    2388:	b9 c1       	rjmp	.+882    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    238a:	80 91 b1 09 	lds	r24, 0x09B1
    238e:	85 ff       	sbrs	r24, 5
    2390:	fc cf       	rjmp	.-8      	; 0x238a <main+0xa5c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2392:	20 93 b0 09 	sts	0x09B0, r18
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
							if(temph == '0') {
    2396:	20 33       	cpi	r18, 0x30	; 48
    2398:	31 05       	cpc	r19, r1
    239a:	89 f5       	brne	.+98     	; 0x23fe <main+0xad0>
								temph = uart_getchar_timeout(&BT_USART);
    239c:	80 eb       	ldi	r24, 0xB0	; 176
    239e:	99 e0       	ldi	r25, 0x09	; 9
    23a0:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    23a4:	8c 01       	movw	r16, r24
								if(temph == 256) {
    23a6:	51 e0       	ldi	r21, 0x01	; 1
    23a8:	80 30       	cpi	r24, 0x00	; 0
    23aa:	95 07       	cpc	r25, r21
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <main+0xa82>
    23ae:	a6 c1       	rjmp	.+844    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23b0:	80 91 b1 09 	lds	r24, 0x09B1
    23b4:	85 ff       	sbrs	r24, 5
    23b6:	fc cf       	rjmp	.-8      	; 0x23b0 <main+0xa82>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23b8:	00 93 b0 09 	sts	0x09B0, r16
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
								}
								templ = uart_getchar_timeout(&BT_USART);
    23bc:	80 eb       	ldi	r24, 0xB0	; 176
    23be:	99 e0       	ldi	r25, 0x09	; 9
    23c0:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    23c4:	9c 01       	movw	r18, r24
    23c6:	6c 01       	movw	r12, r24
								if(templ == 256) {
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	80 30       	cpi	r24, 0x00	; 0
    23cc:	96 07       	cpc	r25, r22
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <main+0xaa4>
    23d0:	95 c1       	rjmp	.+810    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23d2:	80 91 b1 09 	lds	r24, 0x09B1
    23d6:	85 ff       	sbrs	r24, 5
    23d8:	fc cf       	rjmp	.-8      	; 0x23d2 <main+0xaa4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23da:	20 93 b0 09 	sts	0x09B0, r18
									break;
								}
								else {
									uart_putchar(&BT_USART, templ);
								}
								duty = ((temph)<<8) + templ;
    23de:	90 2f       	mov	r25, r16
    23e0:	88 27       	eor	r24, r24
    23e2:	28 0f       	add	r18, r24
    23e4:	39 1f       	adc	r19, r25
}

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm0(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCCEN_bm;
    23e6:	80 91 01 0a 	lds	r24, 0x0A01
    23ea:	80 64       	ori	r24, 0x40	; 64
    23ec:	f2 01       	movw	r30, r4
    23ee:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN2_bm;
    23f0:	f4 e0       	ldi	r31, 0x04	; 4
    23f2:	f0 93 81 06 	sts	0x0681, r31
	TCE0.CCC = duty;
    23f6:	f2 01       	movw	r30, r4
    23f8:	24 a7       	std	Z+44, r18	; 0x2c
    23fa:	35 a7       	std	Z+45, r19	; 0x2d
    23fc:	95 c1       	rjmp	.+810    	; 0x2728 <main+0xdfa>
								set_pwm0(duty);
							}
							else if(temph == '1') {
    23fe:	21 33       	cpi	r18, 0x31	; 49
    2400:	31 05       	cpc	r19, r1
    2402:	09 f0       	breq	.+2      	; 0x2406 <main+0xad8>
    2404:	91 c1       	rjmp	.+802    	; 0x2728 <main+0xdfa>
								temph = uart_getchar_timeout(&BT_USART);
    2406:	80 eb       	ldi	r24, 0xB0	; 176
    2408:	99 e0       	ldi	r25, 0x09	; 9
    240a:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    240e:	8c 01       	movw	r16, r24
								if(temph == 256) {
    2410:	f1 e0       	ldi	r31, 0x01	; 1
    2412:	80 30       	cpi	r24, 0x00	; 0
    2414:	9f 07       	cpc	r25, r31
    2416:	09 f4       	brne	.+2      	; 0x241a <main+0xaec>
    2418:	71 c1       	rjmp	.+738    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    241a:	80 91 b1 09 	lds	r24, 0x09B1
    241e:	85 ff       	sbrs	r24, 5
    2420:	fc cf       	rjmp	.-8      	; 0x241a <main+0xaec>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2422:	00 93 b0 09 	sts	0x09B0, r16
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
								}
								templ = uart_getchar_timeout(&BT_USART);
    2426:	80 eb       	ldi	r24, 0xB0	; 176
    2428:	99 e0       	ldi	r25, 0x09	; 9
    242a:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    242e:	9c 01       	movw	r18, r24
    2430:	6c 01       	movw	r12, r24
								if(templ == 256) {
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	80 30       	cpi	r24, 0x00	; 0
    2436:	94 07       	cpc	r25, r20
    2438:	09 f4       	brne	.+2      	; 0x243c <main+0xb0e>
    243a:	60 c1       	rjmp	.+704    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    243c:	80 91 b1 09 	lds	r24, 0x09B1
    2440:	85 ff       	sbrs	r24, 5
    2442:	fc cf       	rjmp	.-8      	; 0x243c <main+0xb0e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2444:	20 93 b0 09 	sts	0x09B0, r18
									break;
								}
								else {
									uart_putchar(&BT_USART, templ);
								}
								duty = ((temph)<<8) + templ;
    2448:	90 2f       	mov	r25, r16
    244a:	88 27       	eor	r24, r24
    244c:	28 0f       	add	r18, r24
    244e:	39 1f       	adc	r19, r25
}

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm1(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCDEN_bm;
    2450:	80 91 01 0a 	lds	r24, 0x0A01
    2454:	80 68       	ori	r24, 0x80	; 128
    2456:	f2 01       	movw	r30, r4
    2458:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm;
    245a:	f8 e0       	ldi	r31, 0x08	; 8
    245c:	f0 93 81 06 	sts	0x0681, r31
	TCE0.CCD = duty;
    2460:	f2 01       	movw	r30, r4
    2462:	26 a7       	std	Z+46, r18	; 0x2e
    2464:	37 a7       	std	Z+47, r19	; 0x2f
    2466:	60 c1       	rjmp	.+704    	; 0x2728 <main+0xdfa>
							}
						}
						break;
					// Set DAC voltage on one of the two DAC ports
					case 'd':
						temph = uart_getchar_timeout(&BT_USART);
    2468:	80 eb       	ldi	r24, 0xB0	; 176
    246a:	99 e0       	ldi	r25, 0x09	; 9
    246c:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    2470:	9c 01       	movw	r18, r24
						if(temph == 256) {
    2472:	f1 e0       	ldi	r31, 0x01	; 1
    2474:	80 30       	cpi	r24, 0x00	; 0
    2476:	9f 07       	cpc	r25, r31
    2478:	09 f4       	brne	.+2      	; 0x247c <main+0xb4e>
    247a:	40 c1       	rjmp	.+640    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    247c:	80 91 b1 09 	lds	r24, 0x09B1
    2480:	85 ff       	sbrs	r24, 5
    2482:	fc cf       	rjmp	.-8      	; 0x247c <main+0xb4e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2484:	20 93 b0 09 	sts	0x09B0, r18
                                                        err();
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
							if(temph == '0') {
    2488:	20 33       	cpi	r18, 0x30	; 48
    248a:	31 05       	cpc	r19, r1
    248c:	e1 f4       	brne	.+56     	; 0x24c6 <main+0xb98>
								temph = uart_getchar_timeout(&BT_USART);
    248e:	80 eb       	ldi	r24, 0xB0	; 176
    2490:	99 e0       	ldi	r25, 0x09	; 9
    2492:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
								if(temph == 256) {
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	80 30       	cpi	r24, 0x00	; 0
    249a:	94 07       	cpc	r25, r20
    249c:	09 f4       	brne	.+2      	; 0x24a0 <main+0xb72>
    249e:	2e c1       	rjmp	.+604    	; 0x26fc <main+0xdce>
                                                                        err();
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
    24a0:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24a2:	80 91 b1 09 	lds	r24, 0x09B1
    24a6:	85 ff       	sbrs	r24, 5
    24a8:	fc cf       	rjmp	.-8      	; 0x24a2 <main+0xb74>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24aa:	90 93 b0 09 	sts	0x09B0, r25
}

// Sets DAC Ch0
void set_dac0(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
    24ae:	80 91 20 03 	lds	r24, 0x0320
    24b2:	84 60       	ori	r24, 0x04	; 4
    24b4:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
    24b8:	80 91 25 03 	lds	r24, 0x0325
    24bc:	80 ff       	sbrs	r24, 0
    24be:	fc cf       	rjmp	.-8      	; 0x24b8 <main+0xb8a>
	
	DACB.CH0DATAH = val;
    24c0:	90 93 39 03 	sts	0x0339, r25
    24c4:	31 c1       	rjmp	.+610    	; 0x2728 <main+0xdfa>
									set_dac0(temph);
								}
							}
							else if(temph == '1') {
    24c6:	21 33       	cpi	r18, 0x31	; 49
    24c8:	31 05       	cpc	r19, r1
    24ca:	09 f0       	breq	.+2      	; 0x24ce <main+0xba0>
    24cc:	2d c1       	rjmp	.+602    	; 0x2728 <main+0xdfa>
								temph = uart_getchar_timeout(&BT_USART);
    24ce:	80 eb       	ldi	r24, 0xB0	; 176
    24d0:	99 e0       	ldi	r25, 0x09	; 9
    24d2:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
								if(temph == 256) {
    24d6:	51 e0       	ldi	r21, 0x01	; 1
    24d8:	80 30       	cpi	r24, 0x00	; 0
    24da:	95 07       	cpc	r25, r21
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <main+0xbb2>
    24de:	0e c1       	rjmp	.+540    	; 0x26fc <main+0xdce>
                                                                        err();
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
    24e0:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24e2:	80 91 b1 09 	lds	r24, 0x09B1
    24e6:	85 ff       	sbrs	r24, 5
    24e8:	fc cf       	rjmp	.-8      	; 0x24e2 <main+0xbb4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24ea:	90 93 b0 09 	sts	0x09B0, r25
}

// Sets DAC Ch1
void set_dac1(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
    24ee:	80 91 20 03 	lds	r24, 0x0320
    24f2:	88 60       	ori	r24, 0x08	; 8
    24f4:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
    24f8:	80 91 25 03 	lds	r24, 0x0325
    24fc:	81 ff       	sbrs	r24, 1
    24fe:	fc cf       	rjmp	.-8      	; 0x24f8 <main+0xbca>
	
	DACB.CH1DATAH = val;
    2500:	90 93 3b 03 	sts	0x033B, r25
    2504:	11 c1       	rjmp	.+546    	; 0x2728 <main+0xdfa>
					case 'Q':
						exit = 1;
						break;
						// Human-readable uart speed setting
					case 'u':
						temph = uart_getchar_timeout(&BT_USART);
    2506:	80 eb       	ldi	r24, 0xB0	; 176
    2508:	99 e0       	ldi	r25, 0x09	; 9
    250a:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    250e:	8c 01       	movw	r16, r24
						if(temph == 256) {
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	80 30       	cpi	r24, 0x00	; 0
    2514:	96 07       	cpc	r25, r22
    2516:	09 f4       	brne	.+2      	; 0x251a <main+0xbec>
    2518:	f1 c0       	rjmp	.+482    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    251a:	80 91 b1 09 	lds	r24, 0x09B1
    251e:	85 ff       	sbrs	r24, 5
    2520:	fc cf       	rjmp	.-8      	; 0x251a <main+0xbec>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2522:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2526:	80 eb       	ldi	r24, 0xB0	; 176
    2528:	99 e0       	ldi	r25, 0x09	; 9
    252a:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    252e:	9c 01       	movw	r18, r24
    2530:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	20 30       	cpi	r18, 0x00	; 0
    2536:	38 07       	cpc	r19, r24
    2538:	09 f4       	brne	.+2      	; 0x253c <main+0xc0e>
    253a:	e0 c0       	rjmp	.+448    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    253c:	80 91 b1 09 	lds	r24, 0x09B1
    2540:	85 ff       	sbrs	r24, 5
    2542:	fc cf       	rjmp	.-8      	; 0x253c <main+0xc0e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2544:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
						switch(baud) {
    2548:	90 2f       	mov	r25, r16
    254a:	88 27       	eor	r24, r24
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	e1 e3       	ldi	r30, 0x31	; 49
    2552:	89 33       	cpi	r24, 0x39	; 57
    2554:	9e 07       	cpc	r25, r30
    2556:	c1 f0       	breq	.+48     	; 0x2588 <main+0xc5a>
    2558:	f1 e3       	ldi	r31, 0x31	; 49
    255a:	8a 33       	cpi	r24, 0x3A	; 58
    255c:	9f 07       	cpc	r25, r31
    255e:	4c f4       	brge	.+18     	; 0x2572 <main+0xc44>
    2560:	21 e3       	ldi	r18, 0x31	; 49
    2562:	81 33       	cpi	r24, 0x31	; 49
    2564:	92 07       	cpc	r25, r18
    2566:	b1 f0       	breq	.+44     	; 0x2594 <main+0xc66>
    2568:	82 53       	subi	r24, 0x32	; 50
    256a:	91 43       	sbci	r25, 0x31	; 49
    256c:	09 f0       	breq	.+2      	; 0x2570 <main+0xc42>
    256e:	c6 c0       	rjmp	.+396    	; 0x26fc <main+0xdce>
    2570:	15 c0       	rjmp	.+42     	; 0x259c <main+0xc6e>
    2572:	45 e3       	ldi	r20, 0x35	; 53
    2574:	87 33       	cpi	r24, 0x37	; 55
    2576:	94 07       	cpc	r25, r20
    2578:	51 f0       	breq	.+20     	; 0x258e <main+0xc60>
    257a:	86 53       	subi	r24, 0x36	; 54
    257c:	99 43       	sbci	r25, 0x39	; 57
    257e:	09 f0       	breq	.+2      	; 0x2582 <main+0xc54>
    2580:	bd c0       	rjmp	.+378    	; 0x26fc <main+0xdce>
    2582:	4d e3       	ldi	r20, 0x3D	; 61
    2584:	53 e0       	ldi	r21, 0x03	; 3
    2586:	0c c0       	rjmp	.+24     	; 0x25a0 <main+0xc72>
    2588:	49 e3       	ldi	r20, 0x39	; 57
    258a:	53 e0       	ldi	r21, 0x03	; 3
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <main+0xc6a>
                                                        scale = -2;
                                                        break;
                                                    case ('1'<<8) + '9': // 19200
                                                        baud = 825;
                                                        scale = -3;
                                                        break;
    258e:	47 e8       	ldi	r20, 0x87	; 135
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <main+0xc72>
                                                    case ('5'<<8) + '7': // 57600
                                                        baud = 135;
                                                        scale = -2;
                                                        break;
    2594:	43 e8       	ldi	r20, 0x83	; 131
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	2d ef       	ldi	r18, 0xFD	; 253
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <main+0xc74>
                                                        baud = 131;
                                                        scale = -3;
                                                        break;
                                                    default:
                                                        err();
                                                        goto BAUD_DONE;
    259c:	47 e0       	ldi	r20, 0x07	; 7
    259e:	5a e1       	ldi	r21, 0x1A	; 26
    25a0:	2e ef       	ldi	r18, 0xFE	; 254

// Sets the baud rate if the aux serial port is already set up
// Also clear the aux serial buffer as data was probably sent at the wrong rate
void set_aux_baud_rate(int baud, char scale)
{
	AUX_data.buffer.RX_Tail = AUX_data.buffer.RX_Head;
    25a2:	80 91 ed 23 	lds	r24, 0x23ED
    25a6:	80 93 ee 23 	sts	0x23EE, r24

	USART_Baudrate_Set(&AUX_USART, baud, scale);
    25aa:	f3 01       	movw	r30, r6
    25ac:	46 83       	std	Z+6, r20	; 0x06
    25ae:	22 95       	swap	r18
    25b0:	20 7f       	andi	r18, 0xF0	; 240
    25b2:	85 2f       	mov	r24, r21
    25b4:	99 27       	eor	r25, r25
    25b6:	87 fd       	sbrc	r24, 7
    25b8:	9a 95       	dec	r25
    25ba:	28 2b       	or	r18, r24
    25bc:	27 83       	std	Z+7, r18	; 0x07
    25be:	b4 c0       	rjmp	.+360    	; 0x2728 <main+0xdfa>
                                                BAUD_DONE:
                                                break;

					// Configures the baud rate of the auxiliary UART
					case 'C':
						temph = uart_getchar_timeout(&BT_USART);
    25c0:	80 eb       	ldi	r24, 0xB0	; 176
    25c2:	99 e0       	ldi	r25, 0x09	; 9
    25c4:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    25c8:	7c 01       	movw	r14, r24
						if(temph == 256) {
    25ca:	f1 e0       	ldi	r31, 0x01	; 1
    25cc:	80 30       	cpi	r24, 0x00	; 0
    25ce:	9f 07       	cpc	r25, r31
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <main+0xca6>
    25d2:	94 c0       	rjmp	.+296    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25d4:	80 91 b1 09 	lds	r24, 0x09B1
    25d8:	85 ff       	sbrs	r24, 5
    25da:	fc cf       	rjmp	.-8      	; 0x25d4 <main+0xca6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25dc:	e0 92 b0 09 	sts	0x09B0, r14
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    25e0:	80 eb       	ldi	r24, 0xB0	; 176
    25e2:	99 e0       	ldi	r25, 0x09	; 9
    25e4:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    25e8:	8c 01       	movw	r16, r24
    25ea:	6c 01       	movw	r12, r24
						if(templ == 256) {
    25ec:	21 e0       	ldi	r18, 0x01	; 1
    25ee:	80 30       	cpi	r24, 0x00	; 0
    25f0:	92 07       	cpc	r25, r18
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <main+0xcc8>
    25f4:	83 c0       	rjmp	.+262    	; 0x26fc <main+0xdce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25f6:	80 91 b1 09 	lds	r24, 0x09B1
    25fa:	85 ff       	sbrs	r24, 5
    25fc:	fc cf       	rjmp	.-8      	; 0x25f6 <main+0xcc8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25fe:	00 93 b0 09 	sts	0x09B0, r16
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
						templ = uart_getchar_timeout(&BT_USART);
    2602:	80 eb       	ldi	r24, 0xB0	; 176
    2604:	99 e0       	ldi	r25, 0x09	; 9
    2606:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    260a:	ac 01       	movw	r20, r24
						if(templ == 256) {
    260c:	31 e0       	ldi	r19, 0x01	; 1
    260e:	80 30       	cpi	r24, 0x00	; 0
    2610:	93 07       	cpc	r25, r19
    2612:	31 f4       	brne	.+12     	; 0x2620 <main+0xcf2>
                                                        err();
    2614:	0e 94 3b 02 	call	0x476	; 0x476 <err>
    2618:	c1 2c       	mov	r12, r1
    261a:	11 e0       	ldi	r17, 0x01	; 1
    261c:	d1 2e       	mov	r13, r17
    261e:	84 c0       	rjmp	.+264    	; 0x2728 <main+0xdfa>
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    2620:	38 2f       	mov	r19, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2622:	80 91 b1 09 	lds	r24, 0x09B1
    2626:	85 ff       	sbrs	r24, 5
    2628:	fc cf       	rjmp	.-8      	; 0x2622 <main+0xcf4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    262a:	30 93 b0 09 	sts	0x09B0, r19
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    262e:	80 91 b1 09 	lds	r24, 0x09B1
    2632:	85 ff       	sbrs	r24, 5
    2634:	fc cf       	rjmp	.-8      	; 0x262e <main+0xd00>
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
    2636:	9e 2d       	mov	r25, r14
    2638:	88 27       	eor	r24, r24
    263a:	80 0f       	add	r24, r16
    263c:	91 1f       	adc	r25, r17
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    263e:	30 93 b0 09 	sts	0x09B0, r19

// Sets the baud rate if the aux serial port is already set up
// Also clear the aux serial buffer as data was probably sent at the wrong rate
void set_aux_baud_rate(int baud, char scale)
{
	AUX_data.buffer.RX_Tail = AUX_data.buffer.RX_Head;
    2642:	20 91 ed 23 	lds	r18, 0x23ED
    2646:	20 93 ee 23 	sts	0x23EE, r18

	USART_Baudrate_Set(&AUX_USART, baud, scale);
    264a:	f3 01       	movw	r30, r6
    264c:	86 83       	std	Z+6, r24	; 0x06
    264e:	32 95       	swap	r19
    2650:	30 7f       	andi	r19, 0xF0	; 240
    2652:	89 2f       	mov	r24, r25
    2654:	99 0f       	add	r25, r25
    2656:	99 0b       	sbc	r25, r25
    2658:	38 2b       	or	r19, r24
    265a:	37 83       	std	Z+7, r19	; 0x07
    265c:	6a 01       	movw	r12, r20
    265e:	64 c0       	rjmp	.+200    	; 0x2728 <main+0xdfa>
						uart_putchar(&BT_USART, scale);
						set_aux_baud_rate(baud, scale);
						break;
					// BT-serial high speed bridge mode
					case 'Z':
					        serial_bridge();
    2660:	0e 94 cd 01 	call	0x39a	; 0x39a <serial_bridge>
    2664:	61 c0       	rjmp	.+194    	; 0x2728 <main+0xdfa>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    2666:	e0 91 ee 23 	lds	r30, 0x23EE
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	e5 51       	subi	r30, 0x15	; 21
    266e:	fd 4d       	sbci	r31, 0xDD	; 221
    2670:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    2672:	80 91 ee 23 	lds	r24, 0x23EE
    2676:	8f 5f       	subi	r24, 0xFF	; 255
    2678:	80 93 ee 23 	sts	0x23EE, r24
					        break;
					case 'r':
						count_buff = 0;
						while(USART_RXBufferData_Available(&AUX_data)) {
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
    267c:	e1 e0       	ldi	r30, 0x01	; 1
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	ec 0f       	add	r30, r28
    2682:	fd 1f       	adc	r31, r29
    2684:	e2 0f       	add	r30, r18
    2686:	f1 1d       	adc	r31, r1
    2688:	90 83       	st	Z, r25
							count_buff++;
    268a:	2f 5f       	subi	r18, 0xFF	; 255
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    268c:	90 91 ed 23 	lds	r25, 0x23ED
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    2690:	80 91 ee 23 	lds	r24, 0x23EE
					case 'Z':
					        serial_bridge();
					        break;
					case 'r':
						count_buff = 0;
						while(USART_RXBufferData_Available(&AUX_data)) {
    2694:	98 17       	cp	r25, r24
    2696:	39 f7       	brne	.-50     	; 0x2666 <main+0xd38>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2698:	80 91 b1 09 	lds	r24, 0x09B1
    269c:	85 ff       	sbrs	r24, 5
    269e:	fc cf       	rjmp	.-8      	; 0x2698 <main+0xd6a>
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
							count_buff++;
						}
						uart_putchar(&BT_USART, count_buff+1);
    26a0:	2f 5f       	subi	r18, 0xFF	; 255
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26a2:	20 93 b0 09 	sts	0x09B0, r18
    26a6:	21 50       	subi	r18, 0x01	; 1
    26a8:	fe 01       	movw	r30, r28
    26aa:	31 96       	adiw	r30, 0x01	; 1
						for(int i = 0; i < count_buff; i++) {
    26ac:	af 01       	movw	r20, r30
    26ae:	42 0f       	add	r20, r18
    26b0:	51 1d       	adc	r21, r1
    26b2:	9a 01       	movw	r18, r20
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <main+0xd98>
							uart_putchar(&BT_USART, temp_array[i]);
    26b6:	90 81       	ld	r25, Z
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26b8:	80 91 b1 09 	lds	r24, 0x09B1
    26bc:	85 ff       	sbrs	r24, 5
    26be:	fc cf       	rjmp	.-8      	; 0x26b8 <main+0xd8a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26c0:	90 93 b0 09 	sts	0x09B0, r25
    26c4:	31 96       	adiw	r30, 0x01	; 1
						while(USART_RXBufferData_Available(&AUX_data)) {
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
							count_buff++;
						}
						uart_putchar(&BT_USART, count_buff+1);
						for(int i = 0; i < count_buff; i++) {
    26c6:	e2 17       	cp	r30, r18
    26c8:	f3 07       	cpc	r31, r19
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <main+0xd88>
    26cc:	2d c0       	rjmp	.+90     	; 0x2728 <main+0xdfa>
							uart_putchar(&BT_USART, temp_array[i]);
						}
						break;
					// Transmit a stream of characters from bluetooth to auxiliary serial
					case 't':
						temph= uart_getchar_timeout(&BT_USART);
    26ce:	80 eb       	ldi	r24, 0xB0	; 176
    26d0:	99 e0       	ldi	r25, 0x09	; 9
    26d2:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    26d6:	8c 01       	movw	r16, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26d8:	80 91 b1 09 	lds	r24, 0x09B1
    26dc:	85 ff       	sbrs	r24, 5
    26de:	fc cf       	rjmp	.-8      	; 0x26d8 <main+0xdaa>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26e0:	00 93 b0 09 	sts	0x09B0, r16
    26e4:	ee 24       	eor	r14, r14
    26e6:	ff 24       	eor	r15, r15
    26e8:	1c c0       	rjmp	.+56     	; 0x2722 <main+0xdf4>
						uart_putchar(&BT_USART, temph);
						for(int count = 0; count < temph; count++) {
							templ= uart_getchar_timeout(&BT_USART);
    26ea:	80 eb       	ldi	r24, 0xB0	; 176
    26ec:	99 e0       	ldi	r25, 0x09	; 9
    26ee:	0e 94 96 01 	call	0x32c	; 0x32c <uart_getchar_timeout>
    26f2:	6c 01       	movw	r12, r24

							if(templ == 256) {
    26f4:	51 e0       	ldi	r21, 0x01	; 1
    26f6:	80 30       	cpi	r24, 0x00	; 0
    26f8:	95 07       	cpc	r25, r21
    26fa:	19 f4       	brne	.+6      	; 0x2702 <main+0xdd4>
                                                                err();
    26fc:	0e 94 3b 02 	call	0x476	; 0x476 <err>
    2700:	13 c0       	rjmp	.+38     	; 0x2728 <main+0xdfa>
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
    2702:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2704:	80 91 b1 09 	lds	r24, 0x09B1
    2708:	85 ff       	sbrs	r24, 5
    270a:	fc cf       	rjmp	.-8      	; 0x2704 <main+0xdd6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    270c:	90 93 b0 09 	sts	0x09B0, r25
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2710:	80 91 a1 08 	lds	r24, 0x08A1
    2714:	85 ff       	sbrs	r24, 5
    2716:	fc cf       	rjmp	.-8      	; 0x2710 <main+0xde2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2718:	90 93 a0 08 	sts	0x08A0, r25
						break;
					// Transmit a stream of characters from bluetooth to auxiliary serial
					case 't':
						temph= uart_getchar_timeout(&BT_USART);
						uart_putchar(&BT_USART, temph);
						for(int count = 0; count < temph; count++) {
    271c:	08 94       	sec
    271e:	e1 1c       	adc	r14, r1
    2720:	f1 1c       	adc	r15, r1
    2722:	e0 16       	cp	r14, r16
    2724:	f1 06       	cpc	r15, r17
    2726:	08 f3       	brcs	.-62     	; 0x26ea <main+0xdbc>
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	04 c0       	rjmp	.+8      	; 0x273a <main+0xe0c>
    2732:	88 a1       	ldd	r24, Y+32	; 0x20
    2734:	99 a1       	ldd	r25, Y+33	; 0x21
    2736:	aa a1       	ldd	r26, Y+34	; 0x22
    2738:	bb a1       	ldd	r27, Y+35	; 0x23
			if (choice != 42)
                            _delay_ms(500);
		}

		// Active part of the program - listens for commands and responds as necessary
		while(exit == 0) {
    273a:	28 a1       	ldd	r18, Y+32	; 0x20
    273c:	39 a1       	ldd	r19, Y+33	; 0x21
    273e:	4a a1       	ldd	r20, Y+34	; 0x22
    2740:	5b a1       	ldd	r21, Y+35	; 0x23
    2742:	21 58       	subi	r18, 0x81	; 129
    2744:	3b 45       	sbci	r19, 0x5B	; 91
    2746:	44 40       	sbci	r20, 0x04	; 4
    2748:	52 40       	sbci	r21, 0x02	; 2
    274a:	0c f0       	brlt	.+2      	; 0x274e <main+0xe20>
    274c:	29 c9       	rjmp	.-3502   	; 0x19a0 <main+0x72>
    274e:	99 c9       	rjmp	.-3278   	; 0x1a82 <main+0x154>

00002750 <__divmodhi4>:
    2750:	97 fb       	bst	r25, 7
    2752:	09 2e       	mov	r0, r25
    2754:	07 26       	eor	r0, r23
    2756:	0a d0       	rcall	.+20     	; 0x276c <__divmodhi4_neg1>
    2758:	77 fd       	sbrc	r23, 7
    275a:	04 d0       	rcall	.+8      	; 0x2764 <__divmodhi4_neg2>
    275c:	0c d0       	rcall	.+24     	; 0x2776 <__udivmodhi4>
    275e:	06 d0       	rcall	.+12     	; 0x276c <__divmodhi4_neg1>
    2760:	00 20       	and	r0, r0
    2762:	1a f4       	brpl	.+6      	; 0x276a <__divmodhi4_exit>

00002764 <__divmodhi4_neg2>:
    2764:	70 95       	com	r23
    2766:	61 95       	neg	r22
    2768:	7f 4f       	sbci	r23, 0xFF	; 255

0000276a <__divmodhi4_exit>:
    276a:	08 95       	ret

0000276c <__divmodhi4_neg1>:
    276c:	f6 f7       	brtc	.-4      	; 0x276a <__divmodhi4_exit>
    276e:	90 95       	com	r25
    2770:	81 95       	neg	r24
    2772:	9f 4f       	sbci	r25, 0xFF	; 255
    2774:	08 95       	ret

00002776 <__udivmodhi4>:
    2776:	aa 1b       	sub	r26, r26
    2778:	bb 1b       	sub	r27, r27
    277a:	51 e1       	ldi	r21, 0x11	; 17
    277c:	07 c0       	rjmp	.+14     	; 0x278c <__udivmodhi4_ep>

0000277e <__udivmodhi4_loop>:
    277e:	aa 1f       	adc	r26, r26
    2780:	bb 1f       	adc	r27, r27
    2782:	a6 17       	cp	r26, r22
    2784:	b7 07       	cpc	r27, r23
    2786:	10 f0       	brcs	.+4      	; 0x278c <__udivmodhi4_ep>
    2788:	a6 1b       	sub	r26, r22
    278a:	b7 0b       	sbc	r27, r23

0000278c <__udivmodhi4_ep>:
    278c:	88 1f       	adc	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	5a 95       	dec	r21
    2792:	a9 f7       	brne	.-22     	; 0x277e <__udivmodhi4_loop>
    2794:	80 95       	com	r24
    2796:	90 95       	com	r25
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	08 95       	ret

0000279e <_exit>:
    279e:	f8 94       	cli

000027a0 <__stop_program>:
    27a0:	ff cf       	rjmp	.-2      	; 0x27a0 <__stop_program>
