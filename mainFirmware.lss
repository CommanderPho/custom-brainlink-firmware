
mainFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000003f2  00802000  00802000  00002cc8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000073d  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005acb  00000000  00000000  00003425  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000466  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000315b  00000000  00000000  00009356  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000550  00000000  00000000  0000c4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002d43  00000000  00000000  0000ca04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001a3b  00000000  00000000  0000f747  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000180  00000000  00000000  00011182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 37 03 	jmp	0x66e	; 0x66e <__vector_20>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_25>
      68:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      6c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      70:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      74:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      7c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      80:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      84:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      8c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      90:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      94:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      98:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      9c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      ac:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b8:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_46>
      bc:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_47>
      c0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      c4:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_49>
      c8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      cc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      dc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      ec:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      fc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     100:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     104:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     108:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     10c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     110:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     114:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     118:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     11c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     120:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     124:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     128:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     12c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     130:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     134:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     138:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     13c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     140:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     144:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     148:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     14c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     150:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     154:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     158:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     15c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     160:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     164:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     168:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     16c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_91>
     170:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     174:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_clear_bss>:
     184:	13 e2       	ldi	r17, 0x23	; 35
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a2 3f       	cpi	r26, 0xF2	; 242
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <main>
     198:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <init_clock>:

// Just sets up the Xmega clock to 32 MHz (defaults to 2 MHz without this)
void init_clock()
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);		// turn on 32MHz internal RC oscillator
     1a0:	80 91 50 00 	lds	r24, 0x0050
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
     1aa:	80 91 51 00 	lds	r24, 0x0051
     1ae:	81 ff       	sbrs	r24, 1
     1b0:	fc cf       	rjmp	.-8      	; 0x1aa <init_clock+0xa>
	CCP= CCP_IOREG_gc;			// allow modification of protected register
     1b2:	88 ed       	ldi	r24, 0xD8	; 216
     1b4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL |= CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
     1b6:	80 91 40 00 	lds	r24, 0x0040
     1ba:	81 60       	ori	r24, 0x01	; 1
     1bc:	80 93 40 00 	sts	0x0040, r24
}
     1c0:	08 95       	ret

000001c2 <init_led>:
// Helper functions to control Brainlink's full color LED

void init_led() {
	// Set clock to 4 MHz
	TCD0.CTRLA = TC_CLKSEL_DIV8_gc;
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b9 e0       	ldi	r27, 0x09	; 9
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	8c 93       	st	X, r24
	
	// Turn on single slope pwm waveform generation on CCA, B, and C (LED pins)
	TCD0.CTRLB = (TC0_CCCEN_bm | TC0_CCBEN_bm | TC0_CCAEN_bm) | TC_WGMODE_SS_gc;
     1ca:	83 e7       	ldi	r24, 0x73	; 115
     1cc:	11 96       	adiw	r26, 0x01	; 1
     1ce:	8c 93       	st	X, r24
     1d0:	11 97       	sbiw	r26, 0x01	; 1

	// Set period to 0xFFFF
	TCD0.PERBUF = 0xFFFF;
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	9f ef       	ldi	r25, 0xFF	; 255
     1d6:	d6 96       	adiw	r26, 0x36	; 54
     1d8:	8d 93       	st	X+, r24
     1da:	9c 93       	st	X, r25
     1dc:	d7 97       	sbiw	r26, 0x37	; 55

	// Set LED pins to output
	LEDPORT.DIRSET |= REDLED | GREENLED | BLUELED;
     1de:	e0 e6       	ldi	r30, 0x60	; 96
     1e0:	f6 e0       	ldi	r31, 0x06	; 6
     1e2:	81 81       	ldd	r24, Z+1	; 0x01
     1e4:	87 60       	ori	r24, 0x07	; 7
     1e6:	81 83       	std	Z+1, r24	; 0x01

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	d9 96       	adiw	r26, 0x39	; 57
     1ec:	8c 93       	st	X, r24
     1ee:	d9 97       	sbiw	r26, 0x39	; 57
	TCD0.CCBBUFH = 255-blue;
     1f0:	db 96       	adiw	r26, 0x3b	; 59
     1f2:	8c 93       	st	X, r24
	TCD0.CCCBUFH = 255-green;
     1f4:	80 93 3d 09 	sts	0x093D, r24

	// Set LED pins to output
	LEDPORT.DIRSET |= REDLED | GREENLED | BLUELED;
	// Set the LED to 0, just in case
	set_led(0,0,0);
}
     1f8:	08 95       	ret

000001fa <set_led>:

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
     1fa:	80 95       	com	r24
     1fc:	e0 e0       	ldi	r30, 0x00	; 0
     1fe:	f9 e0       	ldi	r31, 0x09	; 9
     200:	81 af       	std	Z+57, r24	; 0x39
	TCD0.CCBBUFH = 255-blue;
     202:	40 95       	com	r20
     204:	43 af       	std	Z+59, r20	; 0x3b
	TCD0.CCCBUFH = 255-green;
     206:	60 95       	com	r22
     208:	60 93 3d 09 	sts	0x093D, r22

     20c:	08 95       	ret

0000020e <init_bt_uart>:
/* Source file with functions for Brainlink's bluetooth and auxiliary serial ports. */

// Initializes the serial port attached to Brainlink's bluetooth module
void init_bt_uart() {
	// set rx and tx pin directionality
	PORTD.DIRSET = PIN7_bm;
     20e:	e0 e6       	ldi	r30, 0x60	; 96
     210:	f6 e0       	ldi	r31, 0x06	; 6
     212:	80 e8       	ldi	r24, 0x80	; 128
     214:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN6_bm;
     216:	80 e4       	ldi	r24, 0x40	; 64
     218:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&BT_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     21a:	e0 eb       	ldi	r30, 0xB0	; 176
     21c:	f9 e0       	ldi	r31, 0x09	; 9
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	85 83       	std	Z+5, r24	; 0x05
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
	usart_data->usart = usart;
     222:	e0 93 05 20 	sts	0x2005, r30
     226:	f0 93 06 20 	sts	0x2006, r31
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     22a:	10 92 08 21 	sts	0x2108, r1
	usart_data->buffer.RX_Head = 0;
     22e:	10 92 07 21 	sts	0x2107, r1

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&BT_data, &BT_USART);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(BT_data.usart, USART_RXCINTLVL_MED_gc);
     232:	83 81       	ldd	r24, Z+3	; 0x03
     234:	8f 7c       	andi	r24, 0xCF	; 207
     236:	80 62       	ori	r24, 0x20	; 32
     238:	83 83       	std	Z+3, r24	; 0x03
	/* Enable PMIC interrupt level medium. */
	PMIC.CTRL |= PMIC_MEDLVLEX_bm;
     23a:	a0 ea       	ldi	r26, 0xA0	; 160
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	12 96       	adiw	r26, 0x02	; 2
     240:	8c 91       	ld	r24, X
     242:	12 97       	sbiw	r26, 0x02	; 2
     244:	82 60       	ori	r24, 0x02	; 2
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	8c 93       	st	X, r24

	// Set baud rate to 115,200 using -3 for scale, 131 for setting.  Yields 0.08% error
	USART_Baudrate_Set(&BT_USART, 131 , -3);
     24a:	83 e8       	ldi	r24, 0x83	; 131
     24c:	86 83       	std	Z+6, r24	; 0x06
     24e:	80 ed       	ldi	r24, 0xD0	; 208
     250:	87 83       	std	Z+7, r24	; 0x07

	// Enable pins
	USART_Rx_Enable(&BT_USART);
     252:	84 81       	ldd	r24, Z+4	; 0x04
     254:	80 61       	ori	r24, 0x10	; 16
     256:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&BT_USART);
     258:	84 81       	ldd	r24, Z+4	; 0x04
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	84 83       	std	Z+4, r24	; 0x04
}
     25e:	08 95       	ret

00000260 <init_aux_uart>:

// Initializes auxiliary serial port - variables required to set baud rate are passed to the function
void init_aux_uart(int baud, char scale) {
	// set rx and tx directionality
	PORTC.DIRSET = PIN3_bm;
     260:	e0 e4       	ldi	r30, 0x40	; 64
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	28 e0       	ldi	r18, 0x08	; 8
     266:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRCLR = PIN2_bm;
     268:	24 e0       	ldi	r18, 0x04	; 4
     26a:	22 83       	std	Z+2, r18	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&AUX_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     26c:	e0 ea       	ldi	r30, 0xA0	; 160
     26e:	f8 e0       	ldi	r31, 0x08	; 8
     270:	23 e0       	ldi	r18, 0x03	; 3
     272:	25 83       	std	Z+5, r18	; 0x05
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
	usart_data->usart = usart;
     274:	e0 93 eb 22 	sts	0x22EB, r30
     278:	f0 93 ec 22 	sts	0x22EC, r31
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     27c:	10 92 ee 23 	sts	0x23EE, r1
	usart_data->buffer.RX_Head = 0;
     280:	10 92 ed 23 	sts	0x23ED, r1

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&AUX_data, &AUX_USART);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(AUX_data.usart, USART_RXCINTLVL_MED_gc);
     284:	23 81       	ldd	r18, Z+3	; 0x03
     286:	2f 7c       	andi	r18, 0xCF	; 207
     288:	20 62       	ori	r18, 0x20	; 32
     28a:	23 83       	std	Z+3, r18	; 0x03
	/* Enable PMIC interrupt level medium. */
	PMIC.CTRL |= PMIC_MEDLVLEX_bm;
     28c:	a0 ea       	ldi	r26, 0xA0	; 160
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	12 96       	adiw	r26, 0x02	; 2
     292:	2c 91       	ld	r18, X
     294:	12 97       	sbiw	r26, 0x02	; 2
     296:	22 60       	ori	r18, 0x02	; 2
     298:	12 96       	adiw	r26, 0x02	; 2
     29a:	2c 93       	st	X, r18
	// Set baud rate to that selected by user (defaults to 115200)
	USART_Baudrate_Set(&AUX_USART, baud, scale);
     29c:	86 83       	std	Z+6, r24	; 0x06
     29e:	62 95       	swap	r22
     2a0:	60 7f       	andi	r22, 0xF0	; 240
     2a2:	89 2f       	mov	r24, r25
     2a4:	99 0f       	add	r25, r25
     2a6:	99 0b       	sbc	r25, r25
     2a8:	68 2b       	or	r22, r24
     2aa:	67 83       	std	Z+7, r22	; 0x07

	// Enable pins
	USART_Rx_Enable(&AUX_USART);
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	80 61       	ori	r24, 0x10	; 16
     2b0:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&AUX_USART);
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	88 60       	ori	r24, 0x08	; 8
     2b6:	84 83       	std	Z+4, r24	; 0x04
	
}
     2b8:	08 95       	ret

000002ba <set_aux_baud_rate>:

// Sets the baud rate if the aux serial port is already set up
void set_aux_baud_rate(int baud, char scale) 
{
	USART_Baudrate_Set(&AUX_USART, baud, scale);
     2ba:	e0 ea       	ldi	r30, 0xA0	; 160
     2bc:	f8 e0       	ldi	r31, 0x08	; 8
     2be:	86 83       	std	Z+6, r24	; 0x06
     2c0:	62 95       	swap	r22
     2c2:	60 7f       	andi	r22, 0xF0	; 240
     2c4:	89 2f       	mov	r24, r25
     2c6:	99 0f       	add	r25, r25
     2c8:	99 0b       	sbc	r25, r25
     2ca:	68 2b       	or	r22, r24
     2cc:	67 83       	std	Z+7, r22	; 0x07
}
     2ce:	08 95       	ret

000002d0 <uart_putchar>:

// Used to send a byte over a serial port
void uart_putchar(USART_t * usart, char c) {
     2d0:	fc 01       	movw	r30, r24

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     2d2:	81 81       	ldd	r24, Z+1	; 0x01
     2d4:	85 ff       	sbrs	r24, 5
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <uart_putchar+0x2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     2d8:	60 83       	st	Z, r22
}
     2da:	08 95       	ret

000002dc <uart_getchar_nb>:

// Gets a character without blocking
char uart_getchar_nb(USART_t * usart) {
     2dc:	fc 01       	movw	r30, r24
     2de:	28 ee       	ldi	r18, 0xE8	; 232
     2e0:	33 e0       	ldi	r19, 0x03	; 3

	int timeout = 1000;
	do{
	/* Wait until data received or a timeout.*/
	timeout--;
     2e2:	21 50       	subi	r18, 0x01	; 1
     2e4:	30 40       	sbci	r19, 0x00	; 0
	}while(((usart->STATUS & USART_RXCIF_bm) == 0) && timeout!=0);
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
     2e8:	87 fd       	sbrc	r24, 7
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <uart_getchar_nb+0x18>
     2ec:	21 15       	cp	r18, r1
     2ee:	31 05       	cpc	r19, r1
     2f0:	c1 f7       	brne	.-16     	; 0x2e2 <uart_getchar_nb+0x6>
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <uart_getchar_nb+0x20>
	
	if(timeout==0) {
     2f4:	23 2b       	or	r18, r19
     2f6:	11 f0       	breq	.+4      	; 0x2fc <uart_getchar_nb+0x20>
		return 0;
	}
	else {
		return usart->DATA;
     2f8:	80 81       	ld	r24, Z
     2fa:	08 95       	ret
     2fc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     2fe:	08 95       	ret

00000300 <uart_getchar>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     300:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     304:	80 91 08 21 	lds	r24, 0x2108
	
//	do{
//	}while((usart->STATUS & USART_RXCIF_bm) == 0);
//	uart_putchar(usart, (usart->STATUS&0x18));//
	do{
    }while(!USART_RXBufferData_Available(&BT_data));
     308:	98 17       	cp	r25, r24
     30a:	d1 f3       	breq	.-12     	; 0x300 <uart_getchar>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     30c:	e0 91 08 21 	lds	r30, 0x2108
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	eb 5f       	subi	r30, 0xFB	; 251
     314:	ff 4d       	sbci	r31, 0xDF	; 223
     316:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     318:	90 91 08 21 	lds	r25, 0x2108
     31c:	9f 5f       	subi	r25, 0xFF	; 255
     31e:	90 93 08 21 	sts	0x2108, r25
//	uart_putchar(usart, (usart->STATUS&0x18));//
	do{
    }while(!USART_RXBufferData_Available(&BT_data));
	//uart_putchar(usart, (usart->STATUS&0x18));//
	return USART_RXBuffer_GetByte(&BT_data);
}
     322:	08 95       	ret

00000324 <uart_getchar_timeout>:


// Gets a character from the bluetooth buffer, blocks if none exists for roughly 300 ms, then times out and returns 256
// Bug alert  - "USART_t * usart" is unnecessary and not used
int uart_getchar_timeout(USART_t * usart) {
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     328:	40 e4       	ldi	r20, 0x40	; 64
     32a:	5f e1       	ldi	r21, 0x1F	; 31
     32c:	05 c0       	rjmp	.+10     	; 0x338 <uart_getchar_timeout+0x14>
	
	int timeout=0;
	while(!USART_RXBufferData_Available(&BT_data) && timeout < 500) {
		timeout++;
     32e:	2f 5f       	subi	r18, 0xFF	; 255
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	ca 01       	movw	r24, r20
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <uart_getchar_timeout+0x10>
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     338:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     33c:	80 91 08 21 	lds	r24, 0x2108
// Gets a character from the bluetooth buffer, blocks if none exists for roughly 300 ms, then times out and returns 256
// Bug alert  - "USART_t * usart" is unnecessary and not used
int uart_getchar_timeout(USART_t * usart) {
	
	int timeout=0;
	while(!USART_RXBufferData_Available(&BT_data) && timeout < 500) {
     340:	98 17       	cp	r25, r24
     342:	29 f4       	brne	.+10     	; 0x34e <uart_getchar_timeout+0x2a>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	24 3f       	cpi	r18, 0xF4	; 244
     348:	38 07       	cpc	r19, r24
     34a:	89 f7       	brne	.-30     	; 0x32e <uart_getchar_timeout+0xa>
     34c:	11 c0       	rjmp	.+34     	; 0x370 <uart_getchar_timeout+0x4c>
		timeout++;
		_delay_ms(1);
	}
	if(timeout >= 500)
     34e:	24 5f       	subi	r18, 0xF4	; 244
     350:	31 40       	sbci	r19, 0x01	; 1
     352:	74 f4       	brge	.+28     	; 0x370 <uart_getchar_timeout+0x4c>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     354:	e0 91 08 21 	lds	r30, 0x2108
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	eb 5f       	subi	r30, 0xFB	; 251
     35c:	ff 4d       	sbci	r31, 0xDF	; 223
     35e:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     360:	80 91 08 21 	lds	r24, 0x2108
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 08 21 	sts	0x2108, r24
		_delay_ms(1);
	}
	if(timeout >= 500)
		return 256;
	else
		return USART_RXBuffer_GetByte(&BT_data);
     36a:	29 2f       	mov	r18, r25
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	02 c0       	rjmp	.+4      	; 0x374 <uart_getchar_timeout+0x50>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	31 e0       	ldi	r19, 0x01	; 1
}
     374:	c9 01       	movw	r24, r18
     376:	08 95       	ret

00000378 <aux_uart_getchar>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     378:	80 91 ee 23 	lds	r24, 0x23EE
     37c:	eb ee       	ldi	r30, 0xEB	; 235
     37e:	f2 e2       	ldi	r31, 0x22	; 34
     380:	e8 0f       	add	r30, r24
     382:	f1 1d       	adc	r31, r1
     384:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     386:	90 91 ee 23 	lds	r25, 0x23EE
     38a:	9f 5f       	subi	r25, 0xFF	; 255
     38c:	90 93 ee 23 	sts	0x23EE, r25

// Gets a character from the auxiliary uart buffer, not currently used.
char aux_uart_getchar(USART_t * usart) {
	
	return USART_RXBuffer_GetByte(&AUX_data);
}
     390:	08 95       	ret

00000392 <serial_bridge>:

// serial to Bluetooth bridge
// currently does not return
void serial_bridge(void) {
     392:	11 c0       	rjmp	.+34     	; 0x3b6 <serial_bridge+0x24>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     394:	e0 91 ee 23 	lds	r30, 0x23EE
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	e5 51       	subi	r30, 0x15	; 21
     39c:	fd 4d       	sbci	r31, 0xDD	; 221
     39e:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     3a0:	80 91 ee 23 	lds	r24, 0x23EE
     3a4:	8f 5f       	subi	r24, 0xFF	; 255
     3a6:	80 93 ee 23 	sts	0x23EE, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     3aa:	80 91 b1 09 	lds	r24, 0x09B1
     3ae:	85 ff       	sbrs	r24, 5
     3b0:	fc cf       	rjmp	.-8      	; 0x3aa <serial_bridge+0x18>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     3b2:	90 93 b0 09 	sts	0x09B0, r25
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     3b6:	90 91 ed 23 	lds	r25, 0x23ED
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     3ba:	80 91 ee 23 	lds	r24, 0x23EE

// serial to Bluetooth bridge
// currently does not return
void serial_bridge(void) {
    while(1) {
        while (USART_RXBufferData_Available(&AUX_data)) {
     3be:	98 17       	cp	r25, r24
     3c0:	49 f7       	brne	.-46     	; 0x394 <serial_bridge+0x2>
     3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <serial_bridge+0x54>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     3c4:	e0 91 08 21 	lds	r30, 0x2108
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	eb 5f       	subi	r30, 0xFB	; 251
     3cc:	ff 4d       	sbci	r31, 0xDF	; 223
     3ce:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     3d0:	80 91 08 21 	lds	r24, 0x2108
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	80 93 08 21 	sts	0x2108, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     3da:	80 91 a1 08 	lds	r24, 0x08A1
     3de:	85 ff       	sbrs	r24, 5
     3e0:	fc cf       	rjmp	.-8      	; 0x3da <serial_bridge+0x48>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     3e2:	90 93 a0 08 	sts	0x08A0, r25
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     3e6:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     3ea:	80 91 08 21 	lds	r24, 0x2108
void serial_bridge(void) {
    while(1) {
        while (USART_RXBufferData_Available(&AUX_data)) {
              uart_putchar(&BT_USART, USART_RXBuffer_GetByte(&AUX_data));
        }
        while (USART_RXBufferData_Available(&BT_data)) {
     3ee:	98 17       	cp	r25, r24
     3f0:	11 f3       	breq	.-60     	; 0x3b6 <serial_bridge+0x24>
     3f2:	e8 cf       	rjmp	.-48     	; 0x3c4 <serial_bridge+0x32>

000003f4 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
     3f4:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     3f6:	60 83       	st	Z, r22
     3f8:	71 83       	std	Z+1, r23	; 0x01
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     3fa:	ed 5f       	subi	r30, 0xFD	; 253
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	10 82       	st	Z, r1
	usart_data->buffer.RX_Head = 0;
     400:	12 92       	st	-Z, r1
	//usart_data->buffer.TX_Tail = 0;
	//usart_data->buffer.TX_Head = 0;
}
     402:	08 95       	ret

00000404 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
     404:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     406:	ee 5f       	subi	r30, 0xFE	; 254
     408:	fe 4f       	sbci	r31, 0xFE	; 254
     40a:	91 91       	ld	r25, Z+
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     40c:	80 81       	ld	r24, Z
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	98 13       	cpse	r25, r24
     412:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
     414:	82 2f       	mov	r24, r18
     416:	08 95       	ret

00000418 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
     418:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     41a:	dc 01       	movw	r26, r24
     41c:	ad 5f       	subi	r26, 0xFD	; 253
     41e:	be 4f       	sbci	r27, 0xFE	; 254
     420:	8c 91       	ld	r24, X
     422:	e8 0f       	add	r30, r24
     424:	f1 1d       	adc	r31, r1
     426:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     428:	9c 91       	ld	r25, X
     42a:	9f 5f       	subi	r25, 0xFF	; 255
     42c:	9c 93       	st	X, r25

	return ans;
}
     42e:	08 95       	ret

00000430 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;
	
	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     436:	ec 01       	movw	r28, r24
     438:	ce 5f       	subi	r28, 0xFE	; 254
     43a:	de 4f       	sbci	r29, 0xFE	; 254
     43c:	98 81       	ld	r25, Y
     43e:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     440:	ad 5f       	subi	r26, 0xFD	; 253
     442:	be 4f       	sbci	r27, 0xFE	; 254
     444:	8c 91       	ld	r24, X
     446:	a3 50       	subi	r26, 0x03	; 3
     448:	b1 40       	sbci	r27, 0x01	; 1
	uint8_t data = usart_data->usart->DATA;
     44a:	ed 91       	ld	r30, X+
     44c:	fc 91       	ld	r31, X
     44e:	11 97       	sbiw	r26, 0x01	; 1
     450:	e0 81       	ld	r30, Z

	if (tempRX_Head == tempRX_Tail) {
     452:	98 17       	cp	r25, r24
     454:	11 f4       	brne	.+4      	; 0x45a <USART_RXComplete+0x2a>
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	07 c0       	rjmp	.+14     	; 0x468 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     45a:	88 81       	ld	r24, Y
     45c:	a8 0f       	add	r26, r24
     45e:	b1 1d       	adc	r27, r1
     460:	12 96       	adiw	r26, 0x02	; 2
     462:	ec 93       	st	X, r30
		usart_data->buffer.RX_Head = tempRX_Head;
     464:	98 83       	st	Y, r25
     466:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <__vector_91>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	2f 93       	push	r18
     47a:	8f 93       	push	r24
     47c:	9f 93       	push	r25
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
	USART_Buffer_t * bufPtr;
	bool ans;
	
	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     482:	90 91 07 21 	lds	r25, 0x2107
     486:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     488:	80 91 08 21 	lds	r24, 0x2108
	uint8_t data = usart_data->usart->DATA;
     48c:	e0 91 05 20 	lds	r30, 0x2005
     490:	f0 91 06 20 	lds	r31, 0x2006
     494:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
     496:	98 17       	cp	r25, r24
     498:	41 f0       	breq	.+16     	; 0x4aa <__vector_91+0x3c>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     49a:	e0 91 07 21 	lds	r30, 0x2107
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	eb 5f       	subi	r30, 0xFB	; 251
     4a2:	ff 4d       	sbci	r31, 0xDF	; 223
     4a4:	22 83       	std	Z+2, r18	; 0x02
		usart_data->buffer.RX_Head = tempRX_Head;
     4a6:	90 93 07 21 	sts	0x2107, r25
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
	USART_RXComplete(&BT_data);
}
     4aa:	ff 91       	pop	r31
     4ac:	ef 91       	pop	r30
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	2f 91       	pop	r18
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	2f 93       	push	r18
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	ef 93       	push	r30
     4d0:	ff 93       	push	r31
	USART_Buffer_t * bufPtr;
	bool ans;
	
	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     4d2:	90 91 ed 23 	lds	r25, 0x23ED
     4d6:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     4d8:	80 91 ee 23 	lds	r24, 0x23EE
	uint8_t data = usart_data->usart->DATA;
     4dc:	e0 91 eb 22 	lds	r30, 0x22EB
     4e0:	f0 91 ec 22 	lds	r31, 0x22EC
     4e4:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
     4e6:	98 17       	cp	r25, r24
     4e8:	41 f0       	breq	.+16     	; 0x4fa <__vector_25+0x3c>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     4ea:	e0 91 ed 23 	lds	r30, 0x23ED
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	e5 51       	subi	r30, 0x15	; 21
     4f2:	fd 4d       	sbci	r31, 0xDD	; 221
     4f4:	22 83       	std	Z+2, r18	; 0x02
		usart_data->buffer.RX_Head = tempRX_Head;
     4f6:	90 93 ed 23 	sts	0x23ED, r25
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
	USART_RXComplete(&AUX_data);
}
     4fa:	ff 91       	pop	r31
     4fc:	ef 91       	pop	r30
     4fe:	9f 91       	pop	r25
     500:	8f 91       	pop	r24
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <init_adc>:

void init_adc() {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29

	ADC_ConvMode_and_Resolution_Config(&ADCA,  ADC_ConvMode_Unsigned, ADC_RESOLUTION_8BIT_gc);
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	81 81       	ldd	r24, Z+1	; 0x01
     518:	89 7e       	andi	r24, 0xE9	; 233
     51a:	84 60       	ori	r24, 0x04	; 4
     51c:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV512_gc);
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	87 60       	ori	r24, 0x07	; 7
     522:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADC A to be AREFB (VCC).*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_AREFB_gc); 
     524:	82 81       	ldd	r24, Z+2	; 0x02
     526:	80 63       	ori	r24, 0x30	; 48
     528:	82 83       	std	Z+2, r24	; 0x02
	
	/* Setup channel 1 and 2 with different inputs. */

	// Channel 1 for the temperature sensor
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     52a:	28 e2       	ldi	r18, 0x28	; 40
     52c:	32 e0       	ldi	r19, 0x02	; 2
     52e:	d9 01       	movw	r26, r18
     530:	8c 91       	ld	r24, X
     532:	80 7e       	andi	r24, 0xE0	; 224
     534:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_INTERNAL_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	// Channel 2 for all other ADC
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH2,
     536:	a0 e3       	ldi	r26, 0x30	; 48
     538:	b2 e0       	ldi	r27, 0x02	; 2
     53a:	8c 91       	ld	r24, X
     53c:	80 7e       	andi	r24, 0xE0	; 224
     53e:	81 60       	ori	r24, 0x01	; 1
     540:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
                                     ADC_DRIVER_CH_GAIN_NONE);
								 
		/* Set input to the channels in ADC A */
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXINT_TEMP_gc, 0);
     542:	e9 01       	movw	r28, r18
     544:	19 82       	std	Y+1, r1	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH2, BATT_VOLT, 0);
     546:	88 e3       	ldi	r24, 0x38	; 56
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	8c 93       	st	X, r24

	/*  Setup internal temperature reference */
	ADC_TempReference_Enable(&ADCA);
     54c:	82 81       	ldd	r24, Z+2	; 0x02
     54e:	81 60       	ori	r24, 0x01	; 1
     550:	82 83       	std	Z+2, r24	; 0x02

	// Enable the ADC
	ADC_Enable(&ADCA);
     552:	80 81       	ld	r24, Z
     554:	81 60       	ori	r24, 0x01	; 1
     556:	80 83       	st	Z, r24
     558:	80 e4       	ldi	r24, 0x40	; 64
     55a:	9f e1       	ldi	r25, 0x1F	; 31
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <init_adc+0x4e>
	_delay_ms(1);

}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <read_analog>:

// Used by mainFirmware to read the analog sensors - light, battery voltage, and auxiliary
int read_analog(ADC_CH_MUXPOS_t sensor) {
	// Set MUX to the right input
	ADC_Ch_InputMux_Config(&ADCA.CH2, sensor, 0);
     566:	e0 e3       	ldi	r30, 0x30	; 48
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	81 83       	std	Z+1, r24	; 0x01
	//Start conversion
	ADCA.CH2.CTRL |= START_CH;
     56c:	80 91 30 02 	lds	r24, 0x0230
     570:	80 68       	ori	r24, 0x80	; 128
     572:	e0 e0       	ldi	r30, 0x00	; 0
     574:	f2 e0       	ldi	r31, 0x02	; 2
     576:	80 ab       	std	Z+48, r24	; 0x30
	do{
	//i++;
			/* If the conversion on the ADCA channel 2 never is
			 * complete this will be a deadlock. */
	}while(!(ADCA.CH2.INTFLAGS & 0x01)&& !(ADCA.INTFLAGS & 0x04));
     578:	80 91 33 02 	lds	r24, 0x0233
     57c:	80 fd       	sbrc	r24, 0
     57e:	04 c0       	rjmp	.+8      	; 0x588 <read_analog+0x22>
     580:	80 91 06 02 	lds	r24, 0x0206
     584:	82 ff       	sbrs	r24, 2
     586:	f8 cf       	rjmp	.-16     	; 0x578 <read_analog+0x12>
	
	// Reset interrupt flag for next conversion
	ADCA.CH2.INTFLAGS = ADC_CH_CHIF_bm;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	e0 e0       	ldi	r30, 0x00	; 0
     58c:	f2 e0       	ldi	r31, 0x02	; 2
     58e:	83 ab       	std	Z+51, r24	; 0x33
	//ADCA.INTFLAGS |= 0x04;
	
	// Return 8-bit value of sensor
	return ADCA.CH2.RESL;
     590:	80 91 34 02 	lds	r24, 0x0234
	
}
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	08 95       	ret

00000598 <read_internal_temperature>:

// Not currently documented as internal temperature is not properly calibrated.
int read_internal_temperature() {
	// Start conversion
	ADCA.CH1.CTRL |= START_CH;
     598:	80 91 28 02 	lds	r24, 0x0228
     59c:	80 68       	ori	r24, 0x80	; 128
     59e:	e0 e0       	ldi	r30, 0x00	; 0
     5a0:	f2 e0       	ldi	r31, 0x02	; 2
     5a2:	80 a7       	std	Z+40, r24	; 0x28
	do{
			/* If the conversion on the ADCA channel 1 never is
			 * complete this will be a deadlock. */
	}while(!(ADCA.CH1.INTFLAGS & 0x01));
     5a4:	80 91 2b 02 	lds	r24, 0x022B
     5a8:	80 ff       	sbrs	r24, 0
     5aa:	fc cf       	rjmp	.-8      	; 0x5a4 <read_internal_temperature+0xc>
	
	// Reset interrupt flag for next conversion
	ADCA.CH1.INTFLAGS = ADC_CH_CHIF_bm;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	e0 e0       	ldi	r30, 0x00	; 0
     5b0:	f2 e0       	ldi	r31, 0x02	; 2
     5b2:	83 a7       	std	Z+43, r24	; 0x2b
	
	// Return the sensor's value
	return ADCA.CH1.RESL;
     5b4:	80 91 2c 02 	lds	r24, 0x022C
}
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	08 95       	ret

000005bc <init_ir>:
/* Source file for functions controlling transmission of infrared signals. */

// Initializes the timers used to control the IR carrier and the IR signal
void init_ir() {
	// Set timer 0 clock to 32 MHz
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
     5bc:	e0 e0       	ldi	r30, 0x00	; 0
     5be:	f8 e0       	ldi	r31, 0x08	; 8
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	20 83       	st	Z, r18
	
	// Turn on single slope pwm waveform generation on CCA (IR Pin)
	TCC0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_SS_gc;
     5c4:	83 e1       	ldi	r24, 0x13	; 19
     5c6:	81 83       	std	Z+1, r24	; 0x01

	// Set period to 0x0349 for 38000 Hz operation
	// This easily adjusts the frequency of the carrier wave
	TCC0.PERBUF = 0x0349;
     5c8:	89 e4       	ldi	r24, 0x49	; 73
     5ca:	93 e0       	ldi	r25, 0x03	; 3
     5cc:	86 ab       	std	Z+54, r24	; 0x36
     5ce:	97 ab       	std	Z+55, r25	; 0x37

	// Set IR pin to output
	PORTC.DIRSET = IR_OUT;
     5d0:	e0 e4       	ldi	r30, 0x40	; 64
     5d2:	f6 e0       	ldi	r31, 0x06	; 6
     5d4:	21 83       	std	Z+1, r18	; 0x01
	
	
	// Set timer to count at 500 KHz - this timer is used to construct the IR signal
	TCC1.CTRLA = TC_CLKSEL_DIV64_gc;
     5d6:	e0 e4       	ldi	r30, 0x40	; 64
     5d8:	f8 e0       	ldi	r31, 0x08	; 8
     5da:	85 e0       	ldi	r24, 0x05	; 5
     5dc:	80 83       	st	Z, r24
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     5de:	16 82       	std	Z+6, r1	; 0x06
	
}
     5e0:	08 95       	ret

000005e2 <set_ir50>:

// Set the IR_LED to regular carrier frequency
void set_ir50() {
	cli();
     5e2:	f8 94       	cli
	TCC0.CCA = (TCC0.PER/2);
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f8 e0       	ldi	r31, 0x08	; 8
     5e8:	86 a1       	ldd	r24, Z+38	; 0x26
     5ea:	97 a1       	ldd	r25, Z+39	; 0x27
     5ec:	96 95       	lsr	r25
     5ee:	87 95       	ror	r24
     5f0:	80 a7       	std	Z+40, r24	; 0x28
     5f2:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     5f4:	78 94       	sei
}
     5f6:	08 95       	ret

000005f8 <set_ir100>:


// Set the IR_LED to full on
void set_ir100() {
	cli();
     5f8:	f8 94       	cli
	TCC0.CCA = TCC0.PER;
     5fa:	e0 e0       	ldi	r30, 0x00	; 0
     5fc:	f8 e0       	ldi	r31, 0x08	; 8
     5fe:	86 a1       	ldd	r24, Z+38	; 0x26
     600:	97 a1       	ldd	r25, Z+39	; 0x27
     602:	80 a7       	std	Z+40, r24	; 0x28
     604:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     606:	78 94       	sei
}
     608:	08 95       	ret

0000060a <set_ir0>:

// Turn the IR LED off
void set_ir0() {
	cli();
     60a:	f8 94       	cli
	TCC0.CCA = 0x0000;
     60c:	e0 e0       	ldi	r30, 0x00	; 0
     60e:	f8 e0       	ldi	r31, 0x08	; 8
     610:	10 a6       	std	Z+40, r1	; 0x28
     612:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     614:	78 94       	sei
}
     616:	08 95       	ret

00000618 <set_ir_carrier>:

// Sets the frequency of the IR carrier
void set_ir_carrier(int frequency) {
	
	cli();
     618:	f8 94       	cli
	TCC0.PERBUF = frequency;
     61a:	e0 e0       	ldi	r30, 0x00	; 0
     61c:	f8 e0       	ldi	r31, 0x08	; 8
     61e:	86 ab       	std	Z+54, r24	; 0x36
     620:	97 ab       	std	Z+55, r25	; 0x37
	sei();
     622:	78 94       	sei
}
     624:	08 95       	ret

00000626 <start_ir_timer>:

// Starts timer 1, used to construct the IR signal
void start_ir_timer() {
    // Reset counters
	startUpCounter = 0; 
     626:	10 92 ca 22 	sts	0x22CA, r1
     62a:	10 92 cb 22 	sts	0x22CB, r1
	onOffTracker = 0;
     62e:	10 92 f0 23 	sts	0x23F0, r1
     632:	10 92 f1 23 	sts	0x23F1, r1
	bitCounter = 0;
     636:	10 92 ef 23 	sts	0x23EF, r1

	cli();
     63a:	f8 94       	cli
	TCC1.CNT = 0x0000; // Set timer 1 counter to 0
     63c:	e0 e4       	ldi	r30, 0x40	; 64
     63e:	f8 e0       	ldi	r31, 0x08	; 8
     640:	10 a2       	std	Z+32, r1	; 0x20
     642:	11 a2       	std	Z+33, r1	; 0x21
 	sei();
     644:	78 94       	sei
	// Enable interrupts on timer
	TCC1.INTCTRLA = TC_OVFINTLVL_HI_gc;
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	e0 e4       	ldi	r30, 0x40	; 64
     64a:	f8 e0       	ldi	r31, 0x08	; 8
     64c:	86 83       	std	Z+6, r24	; 0x06
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     64e:	e0 ea       	ldi	r30, 0xA0	; 160
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	84 60       	ori	r24, 0x04	; 4
     656:	82 83       	std	Z+2, r24	; 0x02
}
     658:	08 95       	ret

0000065a <stop_ir_timer>:

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     65a:	e0 e4       	ldi	r30, 0x40	; 64
     65c:	f8 e0       	ldi	r31, 0x08	; 8
     65e:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     660:	f8 94       	cli
	TCC0.CCA = 0x0000;
     662:	e0 e0       	ldi	r30, 0x00	; 0
     664:	f8 e0       	ldi	r31, 0x08	; 8
     666:	10 a6       	std	Z+40, r1	; 0x28
     668:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     66a:	78 94       	sei
// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
	// Turn off IR LED just in case it was left on
	set_ir0();
}
     66c:	08 95       	ret

0000066e <__vector_20>:


// The timer overflow on TCC1 - this is where most of the action is.
ISR(TCC1_OVF_vect) {
     66e:	1f 92       	push	r1
     670:	0f 92       	push	r0
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	0f 92       	push	r0
     676:	11 24       	eor	r1, r1
     678:	2f 93       	push	r18
     67a:	3f 93       	push	r19
     67c:	4f 93       	push	r20
     67e:	5f 93       	push	r21
     680:	6f 93       	push	r22
     682:	7f 93       	push	r23
     684:	8f 93       	push	r24
     686:	9f 93       	push	r25
     688:	af 93       	push	r26
     68a:	bf 93       	push	r27
     68c:	ef 93       	push	r30
     68e:	ff 93       	push	r31
	
	// The following if-else basically alternates the signal each time the interrupt is triggered
	// If the signal should be low right now, set it that way
	if(onOffTracker == 1) {
     690:	80 91 f0 23 	lds	r24, 0x23F0
     694:	90 91 f1 23 	lds	r25, 0x23F1
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	59 f4       	brne	.+22     	; 0x6b2 <__vector_20+0x44>
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     69c:	f8 94       	cli
	TCC0.CCA = 0x0000;
     69e:	e0 e0       	ldi	r30, 0x00	; 0
     6a0:	f8 e0       	ldi	r31, 0x08	; 8
     6a2:	10 a6       	std	Z+40, r1	; 0x28
     6a4:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     6a6:	78 94       	sei
	
	// The following if-else basically alternates the signal each time the interrupt is triggered
	// If the signal should be low right now, set it that way
	if(onOffTracker == 1) {
		set_ir0();
		onOffTracker = 0;
     6a8:	10 92 f0 23 	sts	0x23F0, r1
     6ac:	10 92 f1 23 	sts	0x23F1, r1
     6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <__vector_20+0x54>
	}
	// Else turn on the signal using a 50% duty cycle (50% at carrier frequency)
	else {
		set_ir50();
     6b2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <set_ir50>
		onOffTracker = 1;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	80 93 f0 23 	sts	0x23F0, r24
     6be:	90 93 f1 23 	sts	0x23F1, r25
	}

	// Checks if we've transmitted all the signal's bits. If so, turns off IR or sets the timer to interrupt again in time specified by robotData.repeatTime
	if((bitCounter >= robotData.numBits) && ((onOffTracker==0)||(robotData.bitEncoding == 0x03))) {
     6c2:	40 91 ef 23 	lds	r20, 0x23EF
     6c6:	80 91 3f 21 	lds	r24, 0x213F
     6ca:	48 17       	cp	r20, r24
     6cc:	98 f1       	brcs	.+102    	; 0x734 <__vector_20+0xc6>
     6ce:	80 91 f0 23 	lds	r24, 0x23F0
     6d2:	90 91 f1 23 	lds	r25, 0x23F1
     6d6:	89 2b       	or	r24, r25
     6d8:	21 f0       	breq	.+8      	; 0x6e2 <__vector_20+0x74>
     6da:	80 91 3e 21 	lds	r24, 0x213E
     6de:	83 30       	cpi	r24, 0x03	; 3
     6e0:	49 f5       	brne	.+82     	; 0x734 <__vector_20+0xc6>
		// iRobot's encoding is funky in the last bit and needs to be turned off right away
		if(robotData.bitEncoding == 0x03) {
     6e2:	80 91 3e 21 	lds	r24, 0x213E
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	31 f4       	brne	.+12     	; 0x6f6 <__vector_20+0x88>
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     6ea:	f8 94       	cli
	TCC0.CCA = 0x0000;
     6ec:	e0 e0       	ldi	r30, 0x00	; 0
     6ee:	f8 e0       	ldi	r31, 0x08	; 8
     6f0:	10 a6       	std	Z+40, r1	; 0x28
     6f2:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     6f4:	78 94       	sei
		// iRobot's encoding is funky in the last bit and needs to be turned off right away
		if(robotData.bitEncoding == 0x03) {
			set_ir0();
		}
		// If repeatFlag = 0, stop the IR timer, effectively ending transmission of the signal
		if(!robotData.repeatFlag) {
     6f6:	80 91 09 22 	lds	r24, 0x2209
     6fa:	90 91 0a 22 	lds	r25, 0x220A
     6fe:	89 2b       	or	r24, r25
     700:	51 f4       	brne	.+20     	; 0x716 <__vector_20+0xa8>
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     702:	e0 e4       	ldi	r30, 0x40	; 64
     704:	f8 e0       	ldi	r31, 0x08	; 8
     706:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     708:	f8 94       	cli
	TCC0.CCA = 0x0000;
     70a:	e0 e0       	ldi	r30, 0x00	; 0
     70c:	f8 e0       	ldi	r31, 0x08	; 8
     70e:	10 a6       	std	Z+40, r1	; 0x28
     710:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     712:	78 94       	sei
     714:	d5 c0       	rjmp	.+426    	; 0x8c0 <__vector_20+0x252>
		if(!robotData.repeatFlag) {
			stop_ir_timer();
		}
		// Otherwise, set the timer to interrupt again in robotData.repeatTime and reset all counters. At that time it will repeat the signal.
		else {
			startUpCounter = 0;
     716:	10 92 ca 22 	sts	0x22CA, r1
     71a:	10 92 cb 22 	sts	0x22CB, r1
			onOffTracker = 0;
     71e:	10 92 f0 23 	sts	0x23F0, r1
     722:	10 92 f1 23 	sts	0x23F1, r1
			bitCounter = 0;
     726:	10 92 ef 23 	sts	0x23EF, r1
			TCC1.PER = robotData.repeatTime;
     72a:	80 91 07 22 	lds	r24, 0x2207
     72e:	90 91 08 22 	lds	r25, 0x2208
     732:	43 c0       	rjmp	.+134    	; 0x7ba <__vector_20+0x14c>
		}
	}
	// If we're still transmitting, do the following
	else {
		// If we're still in the "start pulse" phase of the signal, then set the timer to interrupt again in the time specified by startUpPulse[startUpCounter]
		if(startUpCounter < robotData.startUpPulseLength)
     734:	20 91 ca 22 	lds	r18, 0x22CA
     738:	30 91 cb 22 	lds	r19, 0x22CB
     73c:	80 91 1d 21 	lds	r24, 0x211D
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	94 f4       	brge	.+36     	; 0x76c <__vector_20+0xfe>
		{
			TCC1.PER = robotData.startUpPulse[startUpCounter];
     748:	f9 01       	movw	r30, r18
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e5 5e       	subi	r30, 0xE5	; 229
     750:	fe 4d       	sbci	r31, 0xDE	; 222
     752:	83 81       	ldd	r24, Z+3	; 0x03
     754:	94 81       	ldd	r25, Z+4	; 0x04
     756:	e0 e4       	ldi	r30, 0x40	; 64
     758:	f8 e0       	ldi	r31, 0x08	; 8
     75a:	86 a3       	std	Z+38, r24	; 0x26
     75c:	97 a3       	std	Z+39, r25	; 0x27
			startUpCounter++; // increment counter
     75e:	2f 5f       	subi	r18, 0xFF	; 255
     760:	3f 4f       	sbci	r19, 0xFF	; 255
     762:	20 93 ca 22 	sts	0x22CA, r18
     766:	30 93 cb 22 	sts	0x22CB, r19
     76a:	aa c0       	rjmp	.+340    	; 0x8c0 <__vector_20+0x252>
		}
		// Else, send data according to encoding format
		else {
			// If format is alternating (0): 
			if(robotData.bitEncoding == 0x00) {
     76c:	80 91 3e 21 	lds	r24, 0x213E
     770:	88 23       	and	r24, r24
     772:	41 f0       	breq	.+16     	; 0x784 <__vector_20+0x116>
					TCC1.PER = robotData.lowBitTime;
				}
				bitCounter++;
			}
			// If format is up-time (1):
			else if(robotData.bitEncoding == 0x01) {
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	31 f5       	brne	.+76     	; 0x7c4 <__vector_20+0x156>
				// If this tracker is a 1, then we just set IR on
				// If the tracker is showing a 1, then the next pulse is used to encode a bit by pulse length
				if(onOffTracker == 1) {
     778:	80 91 f0 23 	lds	r24, 0x23F0
     77c:	90 91 f1 23 	lds	r25, 0x23F1
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	b9 f4       	brne	.+46     	; 0x7b2 <__vector_20+0x144>
					// If the bit will be a logical 1, use highBitTime, else, use lowBitTime
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     784:	e4 2f       	mov	r30, r20
     786:	e6 95       	lsr	r30
     788:	e6 95       	lsr	r30
     78a:	e6 95       	lsr	r30
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	e5 5e       	subi	r30, 0xE5	; 229
     790:	fe 4d       	sbci	r31, 0xDE	; 222
     792:	24 a5       	ldd	r18, Z+44	; 0x2c
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	84 2f       	mov	r24, r20
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	80 95       	com	r24
     79c:	90 95       	com	r25
     79e:	87 70       	andi	r24, 0x07	; 7
     7a0:	90 70       	andi	r25, 0x00	; 0
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <__vector_20+0x13a>
     7a4:	35 95       	asr	r19
     7a6:	27 95       	ror	r18
     7a8:	8a 95       	dec	r24
     7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <__vector_20+0x136>
     7ac:	20 ff       	sbrs	r18, 0
     7ae:	4d c0       	rjmp	.+154    	; 0x84a <__vector_20+0x1dc>
     7b0:	51 c0       	rjmp	.+162    	; 0x854 <__vector_20+0x1e6>
					}
					bitCounter++;
				}
				// If the onOffTracker is 0, the next time is used to space bits, so use "offTime"
				else {
					TCC1.PER = robotData.offTime;
     7b2:	80 91 45 21 	lds	r24, 0x2145
     7b6:	90 91 46 21 	lds	r25, 0x2146
     7ba:	e0 e4       	ldi	r30, 0x40	; 64
     7bc:	f8 e0       	ldi	r31, 0x08	; 8
     7be:	86 a3       	std	Z+38, r24	; 0x26
     7c0:	97 a3       	std	Z+39, r25	; 0x27
     7c2:	7e c0       	rjmp	.+252    	; 0x8c0 <__vector_20+0x252>
				}
			}
			// If format is down-time (2):
			else if(robotData.bitEncoding == 0x02) {
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	11 f5       	brne	.+68     	; 0x80c <__vector_20+0x19e>
				// If this tracker is a 0, then we just set IR off
				// If the tracker is showing a 0, then the next signal off period is used to encode a bit by time
				if(onOffTracker == 0) {
     7c8:	80 91 f0 23 	lds	r24, 0x23F0
     7cc:	90 91 f1 23 	lds	r25, 0x23F1
     7d0:	89 2b       	or	r24, r25
     7d2:	b9 f4       	brne	.+46     	; 0x802 <__vector_20+0x194>
				/// If the bit will be a logical 1, use highBitTime, else, use lowBitTime
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     7d4:	e4 2f       	mov	r30, r20
     7d6:	e6 95       	lsr	r30
     7d8:	e6 95       	lsr	r30
     7da:	e6 95       	lsr	r30
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e5 5e       	subi	r30, 0xE5	; 229
     7e0:	fe 4d       	sbci	r31, 0xDE	; 222
     7e2:	24 a5       	ldd	r18, Z+44	; 0x2c
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	84 2f       	mov	r24, r20
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	80 95       	com	r24
     7ec:	90 95       	com	r25
     7ee:	87 70       	andi	r24, 0x07	; 7
     7f0:	90 70       	andi	r25, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__vector_20+0x18a>
     7f4:	35 95       	asr	r19
     7f6:	27 95       	ror	r18
     7f8:	8a 95       	dec	r24
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <__vector_20+0x186>
     7fc:	20 ff       	sbrs	r18, 0
     7fe:	49 c0       	rjmp	.+146    	; 0x892 <__vector_20+0x224>
     800:	43 c0       	rjmp	.+134    	; 0x888 <__vector_20+0x21a>
						TCC1.PER = robotData.lowBitTime;
					}
				}
				// If the onOffTracker is 1, the next pulse time is used to space bits, so use "offTime"
				else {
					TCC1.PER = robotData.offTime;
     802:	80 91 45 21 	lds	r24, 0x2145
     806:	90 91 46 21 	lds	r25, 0x2146
     80a:	28 c0       	rjmp	.+80     	; 0x85c <__vector_20+0x1ee>
					bitCounter++;

				}
			}
			// If iRobot encoding (3):
			else if(robotData.bitEncoding == 0x03) {
     80c:	83 30       	cpi	r24, 0x03	; 3
     80e:	09 f0       	breq	.+2      	; 0x812 <__vector_20+0x1a4>
     810:	45 c0       	rjmp	.+138    	; 0x89c <__vector_20+0x22e>
				// If this tracker is a 0, then we just set IR off
				if(onOffTracker == 0) {
     812:	80 91 f0 23 	lds	r24, 0x23F0
     816:	90 91 f1 23 	lds	r25, 0x23F1
     81a:	e4 2f       	mov	r30, r20
     81c:	e6 95       	lsr	r30
     81e:	e6 95       	lsr	r30
     820:	e6 95       	lsr	r30
     822:	24 2f       	mov	r18, r20
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	89 2b       	or	r24, r25
     828:	f9 f4       	brne	.+62     	; 0x868 <__vector_20+0x1fa>
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	e5 5e       	subi	r30, 0xE5	; 229
     82e:	fe 4d       	sbci	r31, 0xDE	; 222
     830:	84 a5       	ldd	r24, Z+44	; 0x2c
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	20 95       	com	r18
     836:	30 95       	com	r19
     838:	27 70       	andi	r18, 0x07	; 7
     83a:	30 70       	andi	r19, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__vector_20+0x1d4>
     83e:	95 95       	asr	r25
     840:	87 95       	ror	r24
     842:	2a 95       	dec	r18
     844:	e2 f7       	brpl	.-8      	; 0x83e <__vector_20+0x1d0>
     846:	80 ff       	sbrs	r24, 0
     848:	05 c0       	rjmp	.+10     	; 0x854 <__vector_20+0x1e6>
						TCC1.PER = robotData.lowBitTime;
     84a:	80 91 43 21 	lds	r24, 0x2143
     84e:	90 91 44 21 	lds	r25, 0x2144
     852:	04 c0       	rjmp	.+8      	; 0x85c <__vector_20+0x1ee>
					}
					else {
						TCC1.PER = robotData.highBitTime;
     854:	80 91 41 21 	lds	r24, 0x2141
     858:	90 91 42 21 	lds	r25, 0x2142
     85c:	e0 e4       	ldi	r30, 0x40	; 64
     85e:	f8 e0       	ldi	r31, 0x08	; 8
     860:	86 a3       	std	Z+38, r24	; 0x26
     862:	97 a3       	std	Z+39, r25	; 0x27
					}					
					bitCounter++;
     864:	4f 5f       	subi	r20, 0xFF	; 255
     866:	2a c0       	rjmp	.+84     	; 0x8bc <__vector_20+0x24e>
				}
				else {
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	e5 5e       	subi	r30, 0xE5	; 229
     86c:	fe 4d       	sbci	r31, 0xDE	; 222
     86e:	84 a5       	ldd	r24, Z+44	; 0x2c
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	20 95       	com	r18
     874:	30 95       	com	r19
     876:	27 70       	andi	r18, 0x07	; 7
     878:	30 70       	andi	r19, 0x00	; 0
     87a:	02 c0       	rjmp	.+4      	; 0x880 <__vector_20+0x212>
     87c:	95 95       	asr	r25
     87e:	87 95       	ror	r24
     880:	2a 95       	dec	r18
     882:	e2 f7       	brpl	.-8      	; 0x87c <__vector_20+0x20e>
     884:	80 ff       	sbrs	r24, 0
     886:	05 c0       	rjmp	.+10     	; 0x892 <__vector_20+0x224>
						TCC1.PER = robotData.highBitTime;
     888:	80 91 41 21 	lds	r24, 0x2141
     88c:	90 91 42 21 	lds	r25, 0x2142
     890:	94 cf       	rjmp	.-216    	; 0x7ba <__vector_20+0x14c>
					}
					else {
						TCC1.PER = robotData.lowBitTime;
     892:	80 91 43 21 	lds	r24, 0x2143
     896:	90 91 44 21 	lds	r25, 0x2144
     89a:	8f cf       	rjmp	.-226    	; 0x7ba <__vector_20+0x14c>

				}
			}
			// Raw time encoding - data is stored a bit differently in irBytes in raw encoding. Each pair of bytes represents
			// one time measurement - so turn the signal on or off by that amount of time.
			else if(robotData.bitEncoding == 0x04) {
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	81 f4       	brne	.+32     	; 0x8c0 <__vector_20+0x252>
				TCC1.PER = ((robotData.irBytes[bitCounter])<<8) + robotData.irBytes[bitCounter+1];
     8a0:	e4 2f       	mov	r30, r20
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	e5 5e       	subi	r30, 0xE5	; 229
     8a6:	fe 4d       	sbci	r31, 0xDE	; 222
     8a8:	25 a5       	ldd	r18, Z+45	; 0x2d
     8aa:	94 a5       	ldd	r25, Z+44	; 0x2c
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	82 0f       	add	r24, r18
     8b0:	91 1d       	adc	r25, r1
     8b2:	e0 e4       	ldi	r30, 0x40	; 64
     8b4:	f8 e0       	ldi	r31, 0x08	; 8
     8b6:	86 a3       	std	Z+38, r24	; 0x26
     8b8:	97 a3       	std	Z+39, r25	; 0x27
				bitCounter+=2;
     8ba:	4e 5f       	subi	r20, 0xFE	; 254
     8bc:	40 93 ef 23 	sts	0x23EF, r20
			}
		}
	}
}
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	7f 91       	pop	r23
     8ce:	6f 91       	pop	r22
     8d0:	5f 91       	pop	r21
     8d2:	4f 91       	pop	r20
     8d4:	3f 91       	pop	r19
     8d6:	2f 91       	pop	r18
     8d8:	0f 90       	pop	r0
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	0f 90       	pop	r0
     8de:	1f 90       	pop	r1
     8e0:	18 95       	reti

000008e2 <BT_default_reset>:

// Restores factory default settings on the module, not currently used
void BT_default_reset() {

	// Turns the pin on, and then does the reset by toggling the pin three times
	BT_DEFAULT_RESET_PORT.OUTSET = BT_DEFAULT_RESET_PIN;
     8e2:	80 e2       	ldi	r24, 0x20	; 32
     8e4:	e0 e6       	ldi	r30, 0x60	; 96
     8e6:	f6 e0       	ldi	r31, 0x06	; 6
     8e8:	85 83       	std	Z+5, r24	; 0x05
     8ea:	84 e6       	ldi	r24, 0x64	; 100
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	20 e2       	ldi	r18, 0x20	; 32
     8f0:	33 e0       	ldi	r19, 0x03	; 3
     8f2:	f9 01       	movw	r30, r18
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <BT_default_reset+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fa:	d9 f7       	brne	.-10     	; 0x8f2 <BT_default_reset+0x10>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(10);
	for(int i = 0; i < 6; i++) {
		BT_DEFAULT_RESET_PORT.OUTTGL = BT_DEFAULT_RESET_PIN;
     900:	a0 e6       	ldi	r26, 0x60	; 96
     902:	b6 e0       	ldi	r27, 0x06	; 6
     904:	60 e2       	ldi	r22, 0x20	; 32
     906:	40 e2       	ldi	r20, 0x20	; 32
     908:	53 e0       	ldi	r21, 0x03	; 3
     90a:	17 96       	adiw	r26, 0x07	; 7
     90c:	6c 93       	st	X, r22
     90e:	17 97       	sbiw	r26, 0x07	; 7
     910:	84 e6       	ldi	r24, 0x64	; 100
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	fa 01       	movw	r30, r20
     916:	31 97       	sbiw	r30, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <BT_default_reset+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	d9 f7       	brne	.-10     	; 0x914 <BT_default_reset+0x32>
void BT_default_reset() {

	// Turns the pin on, and then does the reset by toggling the pin three times
	BT_DEFAULT_RESET_PORT.OUTSET = BT_DEFAULT_RESET_PIN;
	_delay_ms(10);
	for(int i = 0; i < 6; i++) {
     91e:	2f 5f       	subi	r18, 0xFF	; 255
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	26 30       	cpi	r18, 0x06	; 6
     924:	31 05       	cpc	r19, r1
     926:	89 f7       	brne	.-30     	; 0x90a <BT_default_reset+0x28>
		BT_DEFAULT_RESET_PORT.OUTTGL = BT_DEFAULT_RESET_PIN;
		_delay_ms(10);
	}
	BT_DEFAULT_RESET_PORT.OUTCLR = BT_DEFAULT_RESET_PIN;
     928:	80 e2       	ldi	r24, 0x20	; 32
     92a:	e0 e6       	ldi	r30, 0x60	; 96
     92c:	f6 e0       	ldi	r31, 0x06	; 6
     92e:	86 83       	std	Z+6, r24	; 0x06

}
     930:	08 95       	ret

00000932 <BT_reset>:

// Resets the module
void BT_reset() {

	BT_RESET_PORT.OUTCLR = BT_RESET_PIN;
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	e0 e4       	ldi	r30, 0x40	; 64
     936:	f6 e0       	ldi	r31, 0x06	; 6
     938:	86 83       	std	Z+6, r24	; 0x06
     93a:	84 e6       	ldi	r24, 0x64	; 100
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	20 e2       	ldi	r18, 0x20	; 32
     940:	33 e0       	ldi	r19, 0x03	; 3
     942:	f9 01       	movw	r30, r18
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <BT_reset+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     948:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	d9 f7       	brne	.-10     	; 0x942 <BT_reset+0x10>
	_delay_ms(10);
	BT_RESET_PORT.OUTSET = BT_RESET_PIN;
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	e0 e4       	ldi	r30, 0x40	; 64
     950:	f6 e0       	ldi	r31, 0x06	; 6
     952:	85 83       	std	Z+5, r24	; 0x05
     954:	08 95       	ret

00000956 <init_BT>:
/** For use with Brainlink's RN-42 module. Just includes a few helper functions, most of the serial comm stuff is in uart.c. */


// Resets the module, and then initializes the Xmega's UART that is attached to the module
void init_BT() {
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
	// Set the pins
	BT_RESET_PORT.DIRSET = BT_RESET_PIN;
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	e0 e4       	ldi	r30, 0x40	; 64
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	81 83       	std	Z+1, r24	; 0x01
	BT_DEFAULT_RESET_PORT.DIRSET = BT_DEFAULT_RESET_PIN;
     964:	00 e6       	ldi	r16, 0x60	; 96
     966:	16 e0       	ldi	r17, 0x06	; 6
     968:	60 e2       	ldi	r22, 0x20	; 32
     96a:	f6 2e       	mov	r15, r22
     96c:	f8 01       	movw	r30, r16
     96e:	f1 82       	std	Z+1, r15	; 0x01

	// Reset once
	BT_reset();
     970:	0e 94 99 04 	call	0x932	; 0x932 <BT_reset>
	BT_DEFAULT_RESET_PORT.OUTCLR = BT_DEFAULT_RESET_PIN;	
     974:	f8 01       	movw	r30, r16
     976:	f6 82       	std	Z+6, r15	; 0x06

	// Set up uart connected to bluetooth
	init_bt_uart();
     978:	0e 94 07 01 	call	0x20e	; 0x20e <init_bt_uart>

}
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	08 95       	ret

00000984 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
     984:	dc 01       	movw	r26, r24
     986:	fb 01       	movw	r30, r22
	twi->interface = module;
     988:	6d 93       	st	X+, r22
     98a:	7c 93       	st	X, r23
     98c:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
     98e:	48 63       	ori	r20, 0x38	; 56
     990:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
     992:	ed 91       	ld	r30, X+
     994:	fc 91       	ld	r31, X
     996:	11 97       	sbiw	r26, 0x01	; 1
     998:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	84 83       	std	Z+4, r24	; 0x04
}
     9a2:	08 95       	ret

000009a4 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
     9a4:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
     9a6:	01 90       	ld	r0, Z+
     9a8:	f0 81       	ld	r31, Z
     9aa:	e0 2d       	mov	r30, r0
     9ac:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
     9ae:	83 70       	andi	r24, 0x03	; 3
     9b0:	08 95       	ret

000009b2 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
     9b2:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status & TWIM_STATUS_READY);
     9b4:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	08 95       	ret

000009ba <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
     9ba:	0f 93       	push	r16
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	dc 01       	movw	r26, r24
     9c2:	72 2f       	mov	r23, r18
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
     9c4:	25 30       	cpi	r18, 0x05	; 5
     9c6:	08 f0       	brcs	.+2      	; 0x9ca <TWI_MasterWriteRead+0x10>
     9c8:	44 c0       	rjmp	.+136    	; 0xa52 <TWI_MasterWriteRead+0x98>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
     9ca:	05 30       	cpi	r16, 0x05	; 5
     9cc:	08 f0       	brcs	.+2      	; 0x9d0 <TWI_MasterWriteRead+0x16>
     9ce:	41 c0       	rjmp	.+130    	; 0xa52 <TWI_MasterWriteRead+0x98>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
     9d0:	1f 96       	adiw	r26, 0x0f	; 15
     9d2:	8c 91       	ld	r24, X
     9d4:	1f 97       	sbiw	r26, 0x0f	; 15
     9d6:	88 23       	and	r24, r24
     9d8:	e1 f5       	brne	.+120    	; 0xa52 <TWI_MasterWriteRead+0x98>
		twi->status = TWIM_STATUS_BUSY;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	1f 96       	adiw	r26, 0x0f	; 15
     9de:	8c 93       	st	X, r24
     9e0:	1f 97       	sbiw	r26, 0x0f	; 15
		twi->result = TWIM_RESULT_UNKNOWN;
     9e2:	50 96       	adiw	r26, 0x10	; 16
     9e4:	1c 92       	st	X, r1
     9e6:	50 97       	sbiw	r26, 0x10	; 16

		twi->address = address<<1;
     9e8:	66 0f       	add	r22, r22
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	6c 93       	st	X, r22
     9ee:	12 97       	sbiw	r26, 0x02	; 2
     9f0:	ea 01       	movw	r28, r20
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <TWI_MasterWriteRead+0x4c>

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
			twi->writeData[bufferIndex] = writeData[bufferIndex];
     9f8:	89 91       	ld	r24, Y+
     9fa:	fd 01       	movw	r30, r26
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	83 83       	std	Z+3, r24	; 0x03
     a02:	2f 5f       	subi	r18, 0xFF	; 255
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
     a06:	27 17       	cp	r18, r23
     a08:	b8 f3       	brcs	.-18     	; 0x9f8 <TWI_MasterWriteRead+0x3e>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
     a0a:	1b 96       	adiw	r26, 0x0b	; 11
     a0c:	7c 93       	st	X, r23
     a0e:	1b 97       	sbiw	r26, 0x0b	; 11
		twi->bytesToRead = bytesToRead;
     a10:	1c 96       	adiw	r26, 0x0c	; 12
     a12:	0c 93       	st	X, r16
     a14:	1c 97       	sbiw	r26, 0x0c	; 12
		twi->bytesWritten = 0;
     a16:	1d 96       	adiw	r26, 0x0d	; 13
     a18:	1c 92       	st	X, r1
     a1a:	1d 97       	sbiw	r26, 0x0d	; 13
		twi->bytesRead = 0;
     a1c:	1e 96       	adiw	r26, 0x0e	; 14
     a1e:	1c 92       	st	X, r1
     a20:	1e 97       	sbiw	r26, 0x0e	; 14

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
     a22:	1b 96       	adiw	r26, 0x0b	; 11
     a24:	8c 91       	ld	r24, X
     a26:	1b 97       	sbiw	r26, 0x0b	; 11
     a28:	88 23       	and	r24, r24
     a2a:	29 f0       	breq	.+10     	; 0xa36 <TWI_MasterWriteRead+0x7c>
			uint8_t writeAddress = twi->address & ~0x01;
     a2c:	12 96       	adiw	r26, 0x02	; 2
     a2e:	8c 91       	ld	r24, X
     a30:	12 97       	sbiw	r26, 0x02	; 2
     a32:	8e 7f       	andi	r24, 0xFE	; 254
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <TWI_MasterWriteRead+0x8e>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
     a36:	1c 96       	adiw	r26, 0x0c	; 12
     a38:	8c 91       	ld	r24, X
     a3a:	1c 97       	sbiw	r26, 0x0c	; 12
     a3c:	88 23       	and	r24, r24
     a3e:	39 f0       	breq	.+14     	; 0xa4e <TWI_MasterWriteRead+0x94>
			uint8_t readAddress = twi->address | 0x01;
     a40:	12 96       	adiw	r26, 0x02	; 2
     a42:	8c 91       	ld	r24, X
     a44:	12 97       	sbiw	r26, 0x02	; 2
     a46:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
     a48:	ed 91       	ld	r30, X+
     a4a:	fc 91       	ld	r31, X
     a4c:	86 83       	std	Z+6, r24	; 0x06
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <TWI_MasterWriteRead+0x9a>
     a52:	80 e0       	ldi	r24, 0x00	; 0
		}
		return true;
	} else {
		return false;
	}
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
     a5c:	0f 93       	push	r16
     a5e:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	return twi_status;
}
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
     a6e:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
     a70:	00 e0       	ldi	r16, 0x00	; 0
     a72:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	return twi_status;
}
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     a7a:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     a7c:	ed 91       	ld	r30, X+
     a7e:	fc 91       	ld	r31, X
     a80:	11 97       	sbiw	r26, 0x01	; 1
     a82:	94 81       	ldd	r25, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     a84:	92 ff       	sbrs	r25, 2
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <TWI_MasterArbitrationLostBusErrorHandler+0x12>
		twi->result = TWIM_RESULT_BUS_ERROR;
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <TWI_MasterArbitrationLostBusErrorHandler+0x14>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	50 96       	adiw	r26, 0x10	; 16
     a90:	8c 93       	st	X, r24
     a92:	50 97       	sbiw	r26, 0x10	; 16
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	11 97       	sbiw	r26, 0x01	; 1
     a9a:	98 60       	ori	r25, 0x08	; 8
     a9c:	94 83       	std	Z+4, r25	; 0x04

	twi->status = TWIM_STATUS_READY;
     a9e:	1f 96       	adiw	r26, 0x0f	; 15
     aa0:	1c 92       	st	X, r1
}
     aa2:	08 95       	ret

00000aa4 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	dc 01       	movw	r26, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     aaa:	1b 96       	adiw	r26, 0x0b	; 11
     aac:	9c 91       	ld	r25, X
     aae:	1b 97       	sbiw	r26, 0x0b	; 11
	uint8_t bytesToRead   = twi->bytesToRead;
     ab0:	1c 96       	adiw	r26, 0x0c	; 12
     ab2:	2c 91       	ld	r18, X
     ab4:	1c 97       	sbiw	r26, 0x0c	; 12

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     ab6:	cd 91       	ld	r28, X+
     ab8:	dc 91       	ld	r29, X
     aba:	11 97       	sbiw	r26, 0x01	; 1
     abc:	8c 81       	ldd	r24, Y+4	; 0x04
     abe:	84 ff       	sbrs	r24, 4
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     ac6:	85 e0       	ldi	r24, 0x05	; 5
     ac8:	21 c0       	rjmp	.+66     	; 0xb0c <TWI_MasterWriteHandler+0x68>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     aca:	1d 96       	adiw	r26, 0x0d	; 13
     acc:	8c 91       	ld	r24, X
     ace:	1d 97       	sbiw	r26, 0x0d	; 13
     ad0:	89 17       	cp	r24, r25
     ad2:	78 f4       	brcc	.+30     	; 0xaf2 <TWI_MasterWriteHandler+0x4e>
		uint8_t data = twi->writeData[twi->bytesWritten];
     ad4:	1d 96       	adiw	r26, 0x0d	; 13
     ad6:	8c 91       	ld	r24, X
     ad8:	1d 97       	sbiw	r26, 0x0d	; 13
     ada:	fd 01       	movw	r30, r26
     adc:	e8 0f       	add	r30, r24
     ade:	f1 1d       	adc	r31, r1
     ae0:	83 81       	ldd	r24, Z+3	; 0x03
		twi->interface->MASTER.DATA = data;
     ae2:	8f 83       	std	Y+7, r24	; 0x07
		++twi->bytesWritten;
     ae4:	1d 96       	adiw	r26, 0x0d	; 13
     ae6:	8c 91       	ld	r24, X
     ae8:	1d 97       	sbiw	r26, 0x0d	; 13
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	1d 96       	adiw	r26, 0x0d	; 13
     aee:	8c 93       	st	X, r24
     af0:	12 c0       	rjmp	.+36     	; 0xb16 <TWI_MasterWriteHandler+0x72>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     af2:	1e 96       	adiw	r26, 0x0e	; 14
     af4:	8c 91       	ld	r24, X
     af6:	1e 97       	sbiw	r26, 0x0e	; 14
     af8:	82 17       	cp	r24, r18
     afa:	28 f4       	brcc	.+10     	; 0xb06 <TWI_MasterWriteHandler+0x62>
		uint8_t readAddress = twi->address | 0x01;
     afc:	12 96       	adiw	r26, 0x02	; 2
     afe:	8c 91       	ld	r24, X
     b00:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
     b02:	8e 83       	std	Y+6, r24	; 0x06
     b04:	08 c0       	rjmp	.+16     	; 0xb16 <TWI_MasterWriteHandler+0x72>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	8b 83       	std	Y+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	50 96       	adiw	r26, 0x10	; 16
     b0e:	8c 93       	st	X, r24
     b10:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b12:	1f 96       	adiw	r26, 0x0f	; 15
     b14:	1c 92       	st	X, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     b1c:	dc 01       	movw	r26, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     b1e:	1e 96       	adiw	r26, 0x0e	; 14
     b20:	8c 91       	ld	r24, X
     b22:	1e 97       	sbiw	r26, 0x0e	; 14
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	80 f4       	brcc	.+32     	; 0xb4e <TWI_MasterReadHandler+0x32>
		uint8_t data = twi->interface->MASTER.DATA;
     b2e:	97 81       	ldd	r25, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
     b30:	1e 96       	adiw	r26, 0x0e	; 14
     b32:	8c 91       	ld	r24, X
     b34:	1e 97       	sbiw	r26, 0x0e	; 14
     b36:	fd 01       	movw	r30, r26
     b38:	e8 0f       	add	r30, r24
     b3a:	f1 1d       	adc	r31, r1
     b3c:	97 83       	std	Z+7, r25	; 0x07
		twi->bytesRead++;
     b3e:	1e 96       	adiw	r26, 0x0e	; 14
     b40:	8c 91       	ld	r24, X
     b42:	1e 97       	sbiw	r26, 0x0e	; 14
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	1e 96       	adiw	r26, 0x0e	; 14
     b48:	8c 93       	st	X, r24
     b4a:	1e 97       	sbiw	r26, 0x0e	; 14
     b4c:	09 c0       	rjmp	.+18     	; 0xb60 <TWI_MasterReadHandler+0x44>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	50 96       	adiw	r26, 0x10	; 16
     b56:	8c 93       	st	X, r24
     b58:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b5a:	1f 96       	adiw	r26, 0x0f	; 15
     b5c:	1c 92       	st	X, r1
     b5e:	1f 97       	sbiw	r26, 0x0f	; 15
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     b60:	1c 96       	adiw	r26, 0x0c	; 12
     b62:	9c 91       	ld	r25, X
     b64:	1c 97       	sbiw	r26, 0x0c	; 12

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     b66:	1e 96       	adiw	r26, 0x0e	; 14
     b68:	8c 91       	ld	r24, X
     b6a:	1e 97       	sbiw	r26, 0x0e	; 14
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	89 17       	cp	r24, r25
     b74:	18 f4       	brcc	.+6      	; 0xb7c <TWI_MasterReadHandler+0x60>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	83 83       	std	Z+3, r24	; 0x03
     b7a:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     b7c:	87 e0       	ldi	r24, 0x07	; 7
     b7e:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	50 96       	adiw	r26, 0x10	; 16
     b84:	8c 93       	st	X, r24
     b86:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b88:	1f 96       	adiw	r26, 0x0f	; 15
     b8a:	1c 92       	st	X, r1
     b8c:	08 95       	ret

00000b8e <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
     b8e:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     b90:	ed 91       	ld	r30, X+
     b92:	fc 91       	ld	r31, X
     b94:	11 97       	sbiw	r26, 0x01	; 1
     b96:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     b98:	24 2f       	mov	r18, r20
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	c9 01       	movw	r24, r18
     b9e:	8c 70       	andi	r24, 0x0C	; 12
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	89 2b       	or	r24, r25
     ba4:	21 f0       	breq	.+8      	; 0xbae <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <TWI_MasterArbitrationLostBusErrorHandler>
     bac:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     bae:	46 ff       	sbrs	r20, 6
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <TWI_MasterInterruptHandler+0x2c>
		TWI_MasterWriteHandler(twi);
     bb2:	cd 01       	movw	r24, r26
     bb4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <TWI_MasterWriteHandler>
     bb8:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     bba:	47 ff       	sbrs	r20, 7
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <TWI_MasterInterruptHandler+0x38>
		TWI_MasterReadHandler(twi);
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <TWI_MasterReadHandler>
     bc4:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	50 96       	adiw	r26, 0x10	; 16
     bca:	8c 93       	st	X, r24
     bcc:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     bce:	1f 96       	adiw	r26, 0x0f	; 15
     bd0:	1c 92       	st	X, r1
     bd2:	08 95       	ret

00000bd4 <TWI_MasterTransactionFinished>:
 *
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
     bd4:	fc 01       	movw	r30, r24
	twi->result = result;
     bd6:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
     bd8:	17 86       	std	Z+15, r1	; 0x0f
}
     bda:	08 95       	ret

00000bdc <getAccelData>:


// Function to return the data - must call updateAccel() first
AccelData getAccelData()
{
	return _acc;
     bdc:	60 91 09 21 	lds	r22, 0x2109
     be0:	70 91 0a 21 	lds	r23, 0x210A
}
     be4:	80 91 0b 21 	lds	r24, 0x210B
     be8:	90 91 0c 21 	lds	r25, 0x210C
     bec:	08 95       	ret

00000bee <newAccelData>:

// Tells you if new data is ready
int newAccelData()
{
	
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
     bee:	80 91 dc 22 	lds	r24, 0x22DC
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	19 f0       	breq	.+6      	; 0xbfc <newAccelData+0xe>
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	09 c0       	rjmp	.+18     	; 0xc0e <newAccelData+0x20>
     bfc:	80 91 db 22 	lds	r24, 0x22DB
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	81 11       	cpse	r24, r1
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	98 27       	eor	r25, r24
     c0a:	29 2f       	mov	r18, r25
     c0c:	30 e0       	ldi	r19, 0x00	; 0
}
     c0e:	c9 01       	movw	r24, r18
     c10:	08 95       	ret

00000c12 <updateAccel>:

// this is currently non-blocking. Blocking was attempted (commented out) but seemed to block forever.
void updateAccel()
{
     c12:	0f 93       	push	r16
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	0f 92       	push	r0
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
//	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
//	{ 
		//char oldstatus = _acc.status & ACC_O_MASK;
		uint8_t buf = 0x00;// read 4 bytes, starting at 0x00 (x,y,z,status)
     c1e:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
     c20:	8c ec       	ldi	r24, 0xCC	; 204
     c22:	92 e2       	ldi	r25, 0x22	; 34
     c24:	6c e4       	ldi	r22, 0x4C	; 76
     c26:	ae 01       	movw	r20, r28
     c28:	4f 5f       	subi	r20, 0xFF	; 255
     c2a:	5f 4f       	sbci	r21, 0xFF	; 255
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	04 e0       	ldi	r16, 0x04	; 4
     c30:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
		
		while (twiMaster.status != TWIM_STATUS_READY);
     c34:	80 91 db 22 	lds	r24, 0x22DB
     c38:	88 23       	and	r24, r24
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <updateAccel+0x22>
		_acc.x = twiMaster.readData[0];
     c3c:	80 91 d3 22 	lds	r24, 0x22D3
     c40:	80 93 09 21 	sts	0x2109, r24
		_acc.y = twiMaster.readData[1];
     c44:	80 91 d4 22 	lds	r24, 0x22D4
     c48:	80 93 0a 21 	sts	0x210A, r24
		_acc.z = twiMaster.readData[2];
     c4c:	80 91 d5 22 	lds	r24, 0x22D5
     c50:	80 93 0b 21 	sts	0x210B, r24
		_acc.status = twiMaster.readData[3];
     c54:	80 91 d6 22 	lds	r24, 0x22D6
     c58:	80 93 0c 21 	sts	0x210C, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
     c5c:	10 92 dc 22 	sts	0x22DC, r1
		
//	}
}
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <initAccel>:

// Initializes the accelerometer
// Doesn't *really* need to be blocking, just checked for success
void initAccel()
{
     c6a:	0f 93       	push	r16
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	00 d0       	rcall	.+0      	; 0xc72 <initAccel+0x8>
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
	cli();
     c76:	f8 94       	cli
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
	twi->interface = module;
     c78:	e0 ea       	ldi	r30, 0xA0	; 160
     c7a:	f4 e0       	ldi	r31, 0x04	; 4
     c7c:	e0 93 cc 22 	sts	0x22CC, r30
     c80:	f0 93 cd 22 	sts	0x22CD, r31
	twi->interface->MASTER.CTRLA = intLevel |
     c84:	88 e7       	ldi	r24, 0x78	; 120
     c86:	81 83       	std	Z+1, r24	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
     c88:	8b e9       	ldi	r24, 0x9B	; 155
     c8a:	85 83       	std	Z+5, r24	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	84 83       	std	Z+4, r24	; 0x04
	               &TWIE,
	               TWI_MASTER_INTLVL_LO_gc,
	               TWI_BAUDSETTING);

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
     c90:	80 91 a2 00 	lds	r24, 0x00A2
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	e0 ea       	ldi	r30, 0xA0	; 160
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	82 83       	std	Z+2, r24	; 0x02
	sei();
     c9c:	78 94       	sei

	// prepare configuration data for the accelerometer
	uint8_t buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b01010000;  // set interrupt to push-pull, mode to standby (mode and Ton are both 0), auto-sleep to enable
     ca2:	80 e5       	ldi	r24, 0x50	; 80
     ca4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     ca6:	8c ec       	ldi	r24, 0xCC	; 204
     ca8:	92 e2       	ldi	r25, 0x22	; 34
     caa:	6c e4       	ldi	r22, 0x4C	; 76
     cac:	ae 01       	movw	r20, r28
     cae:	4f 5f       	subi	r20, 0xFF	; 255
     cb0:	5f 4f       	sbci	r21, 0xFF	; 255
     cb2:	22 e0       	ldi	r18, 0x02	; 2
     cb4:	00 e0       	ldi	r16, 0x00	; 0
     cb6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	
	while (twiMaster.status != TWIM_STATUS_READY);
     cba:	80 91 db 22 	lds	r24, 0x22DB
     cbe:	88 23       	and	r24, r24
     cc0:	e1 f7       	brne	.-8      	; 0xcba <initAccel+0x50>


	// set sleep mode
	buf[0] = 0x05;
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
     cc6:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cc8:	8c ec       	ldi	r24, 0xCC	; 204
     cca:	92 e2       	ldi	r25, 0x22	; 34
     ccc:	6c e4       	ldi	r22, 0x4C	; 76
     cce:	ae 01       	movw	r20, r28
     cd0:	4f 5f       	subi	r20, 0xFF	; 255
     cd2:	5f 4f       	sbci	r21, 0xFF	; 255
     cd4:	22 e0       	ldi	r18, 0x02	; 2
     cd6:	00 e0       	ldi	r16, 0x00	; 0
     cd8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     cdc:	80 91 db 22 	lds	r24, 0x22DB
     ce0:	88 23       	and	r24, r24
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <initAccel+0x72>

	// set interrupts
	buf[0] = 0x06;
     ce4:	86 e0       	ldi	r24, 0x06	; 6
     ce6:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b11100100;  // set interrupts to occur with a tap or shake (PDINT, SHINTX/Y/Z)
     ce8:	84 ee       	ldi	r24, 0xE4	; 228
     cea:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cec:	8c ec       	ldi	r24, 0xCC	; 204
     cee:	92 e2       	ldi	r25, 0x22	; 34
     cf0:	6c e4       	ldi	r22, 0x4C	; 76
     cf2:	ae 01       	movw	r20, r28
     cf4:	4f 5f       	subi	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	22 e0       	ldi	r18, 0x02	; 2
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d00:	80 91 db 22 	lds	r24, 0x22DB
     d04:	88 23       	and	r24, r24
     d06:	e1 f7       	brne	.-8      	; 0xd00 <initAccel+0x96>

	// set filter rate
	buf[0] = 0x08;
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;		// Set filter rate to 8 samples, set number of samples to 120 in waking state, 32 in sleeping (hopefully we avoid sleep)
     d0c:	80 ee       	ldi	r24, 0xE0	; 224
     d0e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d10:	8c ec       	ldi	r24, 0xCC	; 204
     d12:	92 e2       	ldi	r25, 0x22	; 34
     d14:	6c e4       	ldi	r22, 0x4C	; 76
     d16:	ae 01       	movw	r20, r28
     d18:	4f 5f       	subi	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	22 e0       	ldi	r18, 0x02	; 2
     d1e:	00 e0       	ldi	r16, 0x00	; 0
     d20:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d24:	80 91 db 22 	lds	r24, 0x22DB
     d28:	88 23       	and	r24, r24
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <initAccel+0xba>
	
	// set tap detection
	buf[0] = 0x09;
     d2c:	89 e0       	ldi	r24, 0x09	; 9
     d2e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b00001000;  	// 0x09	Pulse detection -> +- 8 counts, all axes
     d30:	88 e0       	ldi	r24, 0x08	; 8
     d32:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d34:	8c ec       	ldi	r24, 0xCC	; 204
     d36:	92 e2       	ldi	r25, 0x22	; 34
     d38:	6c e4       	ldi	r22, 0x4C	; 76
     d3a:	ae 01       	movw	r20, r28
     d3c:	4f 5f       	subi	r20, 0xFF	; 255
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
     d40:	22 e0       	ldi	r18, 0x02	; 2
     d42:	00 e0       	ldi	r16, 0x00	; 0
     d44:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d48:	80 91 db 22 	lds	r24, 0x22DB
     d4c:	88 23       	and	r24, r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <initAccel+0xde>

	// set tap debounce
	buf[0] = 0x0A;
     d50:	8a e0       	ldi	r24, 0x0A	; 10
     d52:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// Tap debounce ->	16 detections
     d54:	80 e1       	ldi	r24, 0x10	; 16
     d56:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d58:	8c ec       	ldi	r24, 0xCC	; 204
     d5a:	92 e2       	ldi	r25, 0x22	; 34
     d5c:	6c e4       	ldi	r22, 0x4C	; 76
     d5e:	ae 01       	movw	r20, r28
     d60:	4f 5f       	subi	r20, 0xFF	; 255
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	22 e0       	ldi	r18, 0x02	; 2
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
     d6c:	80 91 db 22 	lds	r24, 0x22DB
     d70:	88 23       	and	r24, r24
     d72:	e1 f7       	brne	.-8      	; 0xd6c <initAccel+0x102>
	
	// enable the accelerometer
	buf[0] = 0x07;
     d74:	87 e0       	ldi	r24, 0x07	; 7
     d76:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b01010001; 
     d78:	81 e5       	ldi	r24, 0x51	; 81
     d7a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d7c:	8c ec       	ldi	r24, 0xCC	; 204
     d7e:	92 e2       	ldi	r25, 0x22	; 34
     d80:	6c e4       	ldi	r22, 0x4C	; 76
     d82:	ae 01       	movw	r20, r28
     d84:	4f 5f       	subi	r20, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	22 e0       	ldi	r18, 0x02	; 2
     d8a:	00 e0       	ldi	r16, 0x00	; 0
     d8c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d90:	80 91 db 22 	lds	r24, 0x22DB
     d94:	88 23       	and	r24, r24
     d96:	e1 f7       	brne	.-8      	; 0xd90 <initAccel+0x126>
	
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     dc6:	8c ec       	ldi	r24, 0xCC	; 204
     dc8:	92 e2       	ldi	r25, 0x22	; 34
     dca:	0e 94 c7 05 	call	0xb8e	; 0xb8e <TWI_MasterInterruptHandler>
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <init_dac>:
/* Functions for manipulating the Xmega's DAC, for use with Brainlink's auxiliary ports */


// Set up the DAC to dual channel mode, 8 bit operation, VCC reference.
void init_dac() {
	DACB.CTRLB = DAC_CHSEL_DUAL_gc; // Dual channel mode
     df0:	e0 e2       	ldi	r30, 0x20	; 32
     df2:	f3 e0       	ldi	r31, 0x03	; 3
     df4:	80 e4       	ldi	r24, 0x40	; 64
     df6:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | 0x01;  // Set Analog voltage to reference, Left adjust to use just top 8 bits
     df8:	89 e0       	ldi	r24, 0x09	; 9
     dfa:	82 83       	std	Z+2, r24	; 0x02
	DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_64CLK_gc; // 64 clock cycles per conversion, 256 per refresh
     dfc:	82 e5       	ldi	r24, 0x52	; 82
     dfe:	84 83       	std	Z+4, r24	; 0x04
	DACB.CTRLA = DAC_ENABLE_bm;	// Enable channels 0 and 1 and enable DAC
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 20 03 	sts	0x0320, r24
}

// Sets DAC Ch0
void set_dac0(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
     e06:	80 91 20 03 	lds	r24, 0x0320
     e0a:	84 60       	ori	r24, 0x04	; 4
     e0c:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
     e10:	80 91 25 03 	lds	r24, 0x0325
     e14:	80 ff       	sbrs	r24, 0
     e16:	fc cf       	rjmp	.-8      	; 0xe10 <init_dac+0x20>
	
	DACB.CH0DATAH = val;
     e18:	e0 e2       	ldi	r30, 0x20	; 32
     e1a:	f3 e0       	ldi	r31, 0x03	; 3
     e1c:	11 8e       	std	Z+25, r1	; 0x19
}

// Sets DAC Ch1
void set_dac1(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
     e1e:	80 91 20 03 	lds	r24, 0x0320
     e22:	88 60       	ori	r24, 0x08	; 8
     e24:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
     e28:	80 91 25 03 	lds	r24, 0x0325
     e2c:	81 ff       	sbrs	r24, 1
     e2e:	fc cf       	rjmp	.-8      	; 0xe28 <init_dac+0x38>
	
	DACB.CH1DATAH = val;
     e30:	e0 e2       	ldi	r30, 0x20	; 32
     e32:	f3 e0       	ldi	r31, 0x03	; 3
     e34:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | 0x01;  // Set Analog voltage to reference, Left adjust to use just top 8 bits
	DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_64CLK_gc; // 64 clock cycles per conversion, 256 per refresh
	DACB.CTRLA = DAC_ENABLE_bm;	// Enable channels 0 and 1 and enable DAC
	set_dac0(0); // Set both DACs to 0
	set_dac1(0);
}
     e36:	08 95       	ret

00000e38 <set_dac0>:

// Sets DAC Ch0
void set_dac0(uint8_t val) {
     e38:	98 2f       	mov	r25, r24
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
     e3a:	80 91 20 03 	lds	r24, 0x0320
     e3e:	84 60       	ori	r24, 0x04	; 4
     e40:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
     e44:	80 91 25 03 	lds	r24, 0x0325
     e48:	80 ff       	sbrs	r24, 0
     e4a:	fc cf       	rjmp	.-8      	; 0xe44 <set_dac0+0xc>
	
	DACB.CH0DATAH = val;
     e4c:	e0 e2       	ldi	r30, 0x20	; 32
     e4e:	f3 e0       	ldi	r31, 0x03	; 3
     e50:	91 8f       	std	Z+25, r25	; 0x19
}
     e52:	08 95       	ret

00000e54 <set_dac1>:

// Sets DAC Ch1
void set_dac1(uint8_t val) {
     e54:	98 2f       	mov	r25, r24
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
     e56:	80 91 20 03 	lds	r24, 0x0320
     e5a:	88 60       	ori	r24, 0x08	; 8
     e5c:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
     e60:	80 91 25 03 	lds	r24, 0x0325
     e64:	81 ff       	sbrs	r24, 1
     e66:	fc cf       	rjmp	.-8      	; 0xe60 <set_dac1+0xc>
	
	DACB.CH1DATAH = val;
     e68:	e0 e2       	ldi	r30, 0x20	; 32
     e6a:	f3 e0       	ldi	r31, 0x03	; 3
     e6c:	93 8f       	std	Z+27, r25	; 0x1b
}
     e6e:	08 95       	ret

00000e70 <disable_dac0>:

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
     e70:	e0 e2       	ldi	r30, 0x20	; 32
     e72:	f3 e0       	ldi	r31, 0x03	; 3
     e74:	80 81       	ld	r24, Z
     e76:	8b 7f       	andi	r24, 0xFB	; 251
     e78:	80 83       	st	Z, r24
}
     e7a:	08 95       	ret

00000e7c <disable_dac1>:

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
     e7c:	e0 e2       	ldi	r30, 0x20	; 32
     e7e:	f3 e0       	ldi	r31, 0x03	; 3
     e80:	80 81       	ld	r24, Z
     e82:	87 7f       	andi	r24, 0xF7	; 247
     e84:	80 83       	st	Z, r24
}
     e86:	08 95       	ret

00000e88 <init_buzzer>:


// Configures the buzzer
void init_buzzer() {
	// Set frequency maximum to 62,500 - clockspeed/256
	TCD1.CTRLA = TC_CLKSEL_DIV256_gc;
     e88:	e0 e4       	ldi	r30, 0x40	; 64
     e8a:	f9 e0       	ldi	r31, 0x09	; 9
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	80 83       	st	Z, r24
	// Set counter to frequency mode, this lets us vary frequency and keeps duty cycle at 50%
	TCD1.CTRLB = TC_WGMODE_FRQ_gc;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	81 83       	std	Z+1, r24	; 0x01
	// Set pin to output
	PORTD.DIRSET |= PIN4_bm;
     e94:	e0 e6       	ldi	r30, 0x60	; 96
     e96:	f6 e0       	ldi	r31, 0x06	; 6
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	80 61       	ori	r24, 0x10	; 16
     e9c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR |= PIN4_bm;
     e9e:	86 81       	ldd	r24, Z+6	; 0x06
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	86 83       	std	Z+6, r24	; 0x06
}
     ea4:	08 95       	ret

00000ea6 <set_buzzer>:

// Set buzzer enables the waveform and sets it to a given frequency
void set_buzzer(int frequency) {
	// Enable waveform output
	TCD1.CTRLB |= TC1_CCAEN_bm;
     ea6:	e0 e4       	ldi	r30, 0x40	; 64
     ea8:	f9 e0       	ldi	r31, 0x09	; 9
     eaa:	21 81       	ldd	r18, Z+1	; 0x01
     eac:	20 61       	ori	r18, 0x10	; 16
     eae:	21 83       	std	Z+1, r18	; 0x01
	// Set the frequency
	cli();
     eb0:	f8 94       	cli
	TCD1.CCA = frequency;
     eb2:	e0 e4       	ldi	r30, 0x40	; 64
     eb4:	f9 e0       	ldi	r31, 0x09	; 9
     eb6:	80 a7       	std	Z+40, r24	; 0x28
     eb8:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     eba:	78 94       	sei
}
     ebc:	08 95       	ret

00000ebe <turn_off_buzzer>:

// Disables the buzzer, and if the output is on, turns it off
void turn_off_buzzer() {
	// Disable the Waveform output
	TCD1.CTRLB &= (~TC1_CCAEN_bm);
     ebe:	e0 e4       	ldi	r30, 0x40	; 64
     ec0:	f9 e0       	ldi	r31, 0x09	; 9
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	8f 7e       	andi	r24, 0xEF	; 239
     ec6:	81 83       	std	Z+1, r24	; 0x01
	// Turn off the pin just in case
	PORTD.OUTCLR |= PIN4_bm;
     ec8:	e0 e6       	ldi	r30, 0x60	; 96
     eca:	f6 e0       	ldi	r31, 0x06	; 6
     ecc:	86 81       	ldd	r24, Z+6	; 0x06
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	86 83       	std	Z+6, r24	; 0x06
}
     ed2:	08 95       	ret

00000ed4 <set_pwm>:

// Sets up PWM to a given frequency (both channels must share the same frequency)
void set_pwm() {

	// Set clock to 32 MHz
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     ed4:	e0 e0       	ldi	r30, 0x00	; 0
     ed6:	fa e0       	ldi	r31, 0x0A	; 10
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 83       	st	Z, r24
	
	// Turn on single slope pwm waveform generation
	TCE0.CTRLB = TC_WGMODE_SS_gc;
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	81 83       	std	Z+1, r24	; 0x01
	// Turn off other registers in case they were set by IR read
	TCE0.CTRLD = 0x00;
     ee0:	13 82       	std	Z+3, r1	; 0x03
	// Set frequency of the PWM signal
	TCE0.PERBUF = pwm_frequency;
     ee2:	80 91 00 20 	lds	r24, 0x2000
     ee6:	90 91 01 20 	lds	r25, 0x2001
     eea:	86 ab       	std	Z+54, r24	; 0x36
     eec:	97 ab       	std	Z+55, r25	; 0x37

}
     eee:	08 95       	ret

00000ef0 <turn_off_pwm0>:

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
     ef0:	e0 e0       	ldi	r30, 0x00	; 0
     ef2:	fa e0       	ldi	r31, 0x0A	; 10
     ef4:	81 81       	ldd	r24, Z+1	; 0x01
     ef6:	8f 7b       	andi	r24, 0xBF	; 191
     ef8:	81 83       	std	Z+1, r24	; 0x01
}
     efa:	08 95       	ret

00000efc <turn_off_pwm1>:

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
     efc:	e0 e0       	ldi	r30, 0x00	; 0
     efe:	fa e0       	ldi	r31, 0x0A	; 10
     f00:	81 81       	ldd	r24, Z+1	; 0x01
     f02:	8f 77       	andi	r24, 0x7F	; 127
     f04:	81 83       	std	Z+1, r24	; 0x01
}
     f06:	08 95       	ret

00000f08 <set_pwm0>:

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm0(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCCEN_bm;
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	ba e0       	ldi	r27, 0x0A	; 10
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	2c 91       	ld	r18, X
     f10:	11 97       	sbiw	r26, 0x01	; 1
     f12:	20 64       	ori	r18, 0x40	; 64
     f14:	11 96       	adiw	r26, 0x01	; 1
     f16:	2c 93       	st	X, r18
     f18:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = PIN2_bm;
     f1a:	24 e0       	ldi	r18, 0x04	; 4
     f1c:	e0 e8       	ldi	r30, 0x80	; 128
     f1e:	f6 e0       	ldi	r31, 0x06	; 6
     f20:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CCC = duty;
     f22:	9c 96       	adiw	r26, 0x2c	; 44
     f24:	8d 93       	st	X+, r24
     f26:	9c 93       	st	X, r25
     f28:	9d 97       	sbiw	r26, 0x2d	; 45
}
     f2a:	08 95       	ret

00000f2c <set_pwm1>:

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm1(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCDEN_bm;
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	ba e0       	ldi	r27, 0x0A	; 10
     f30:	11 96       	adiw	r26, 0x01	; 1
     f32:	2c 91       	ld	r18, X
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	20 68       	ori	r18, 0x80	; 128
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	2c 93       	st	X, r18
     f3c:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = PIN3_bm;
     f3e:	28 e0       	ldi	r18, 0x08	; 8
     f40:	e0 e8       	ldi	r30, 0x80	; 128
     f42:	f6 e0       	ldi	r31, 0x06	; 6
     f44:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CCD = duty;
     f46:	9e 96       	adiw	r26, 0x2e	; 46
     f48:	8d 93       	st	X+, r24
     f4a:	9c 93       	st	X, r25
     f4c:	9f 97       	sbiw	r26, 0x2f	; 47
}
     f4e:	08 95       	ret

00000f50 <set_output>:
// Helper functions for setting outputs and reading inputs on the auxiliary digital I/O.

//turns any of the external DIO into an ouput and sets its value
void set_output(char port, char value) {
	switch(port) {
     f50:	84 33       	cpi	r24, 0x34	; 52
     f52:	71 f1       	breq	.+92     	; 0xfb0 <set_output+0x60>
     f54:	85 33       	cpi	r24, 0x35	; 53
     f56:	70 f4       	brcc	.+28     	; 0xf74 <set_output+0x24>
     f58:	81 33       	cpi	r24, 0x31	; 49
     f5a:	01 f1       	breq	.+64     	; 0xf9c <set_output+0x4c>
     f5c:	82 33       	cpi	r24, 0x32	; 50
     f5e:	20 f4       	brcc	.+8      	; 0xf68 <set_output+0x18>
     f60:	80 33       	cpi	r24, 0x30	; 48
     f62:	09 f0       	breq	.+2      	; 0xf66 <set_output+0x16>
     f64:	5b c0       	rjmp	.+182    	; 0x101c <set_output+0xcc>
     f66:	16 c0       	rjmp	.+44     	; 0xf94 <set_output+0x44>
     f68:	82 33       	cpi	r24, 0x32	; 50
     f6a:	e1 f0       	breq	.+56     	; 0xfa4 <set_output+0x54>
     f6c:	83 33       	cpi	r24, 0x33	; 51
     f6e:	09 f0       	breq	.+2      	; 0xf72 <set_output+0x22>
     f70:	55 c0       	rjmp	.+170    	; 0x101c <set_output+0xcc>
     f72:	1b c0       	rjmp	.+54     	; 0xfaa <set_output+0x5a>
     f74:	87 33       	cpi	r24, 0x37	; 55
     f76:	61 f1       	breq	.+88     	; 0xfd0 <set_output+0x80>
     f78:	88 33       	cpi	r24, 0x38	; 56
     f7a:	30 f4       	brcc	.+12     	; 0xf88 <set_output+0x38>
     f7c:	85 33       	cpi	r24, 0x35	; 53
     f7e:	e1 f0       	breq	.+56     	; 0xfb8 <set_output+0x68>
     f80:	86 33       	cpi	r24, 0x36	; 54
     f82:	09 f0       	breq	.+2      	; 0xf86 <set_output+0x36>
     f84:	4b c0       	rjmp	.+150    	; 0x101c <set_output+0xcc>
     f86:	1c c0       	rjmp	.+56     	; 0xfc0 <set_output+0x70>
     f88:	88 33       	cpi	r24, 0x38	; 56
     f8a:	59 f1       	breq	.+86     	; 0xfe2 <set_output+0x92>
     f8c:	89 33       	cpi	r24, 0x39	; 57
     f8e:	09 f0       	breq	.+2      	; 0xf92 <set_output+0x42>
     f90:	45 c0       	rjmp	.+138    	; 0x101c <set_output+0xcc>
     f92:	35 c0       	rjmp	.+106    	; 0xffe <set_output+0xae>
		case '0':
			PORTA.DIRSET = PIN0_bm;
     f94:	e0 e0       	ldi	r30, 0x00	; 0
     f96:	f6 e0       	ldi	r31, 0x06	; 6
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	2c c0       	rjmp	.+88     	; 0xff4 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN0_bm;
			}
			break;
		case '1':
			PORTA.DIRSET = PIN1_bm;
     f9c:	e0 e0       	ldi	r30, 0x00	; 0
     f9e:	f6 e0       	ldi	r31, 0x06	; 6
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	28 c0       	rjmp	.+80     	; 0xff4 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN1_bm;
			}
			break;
		case '2':
			PORTA.DIRSET = PIN2_bm;
     fa4:	e0 e0       	ldi	r30, 0x00	; 0
     fa6:	f6 e0       	ldi	r31, 0x06	; 6
     fa8:	24 c0       	rjmp	.+72     	; 0xff2 <set_output+0xa2>
			else {
				PORTA.OUTCLR = PIN2_bm;
			}
			break;
		case '3':
			PORTA.DIRSET = PIN3_bm;
     faa:	e0 e0       	ldi	r30, 0x00	; 0
     fac:	f6 e0       	ldi	r31, 0x06	; 6
     fae:	17 c0       	rjmp	.+46     	; 0xfde <set_output+0x8e>
			else {
				PORTA.OUTCLR = PIN3_bm;
			}
			break;
		case '4':
			PORTA.DIRSET = PIN4_bm;
     fb0:	e0 e0       	ldi	r30, 0x00	; 0
     fb2:	f6 e0       	ldi	r31, 0x06	; 6
     fb4:	80 e1       	ldi	r24, 0x10	; 16
     fb6:	1e c0       	rjmp	.+60     	; 0xff4 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN4_bm;
			}
			break;
		case '5':
			PORTA.DIRSET = PIN5_bm;
     fb8:	e0 e0       	ldi	r30, 0x00	; 0
     fba:	f6 e0       	ldi	r31, 0x06	; 6
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	1a c0       	rjmp	.+52     	; 0xff4 <set_output+0xa4>
	DACB.CH1DATAH = val;
}

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
     fc0:	80 91 20 03 	lds	r24, 0x0320
     fc4:	8b 7f       	andi	r24, 0xFB	; 251
     fc6:	80 93 20 03 	sts	0x0320, r24
			}
			break;
		case '6':
			// Disable the DAC ch0 in case it's on
			disable_dac0();
			PORTB.DIRSET = PIN2_bm;
     fca:	e0 e2       	ldi	r30, 0x20	; 32
     fcc:	f6 e0       	ldi	r31, 0x06	; 6
     fce:	11 c0       	rjmp	.+34     	; 0xff2 <set_output+0xa2>
}

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
     fd0:	80 91 20 03 	lds	r24, 0x0320
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	80 93 20 03 	sts	0x0320, r24
			}
			break;
		case '7':
			// Disable the DAC ch1 in case it's on
			disable_dac1();
			PORTB.DIRSET = PIN3_bm;
     fda:	e0 e2       	ldi	r30, 0x20	; 32
     fdc:	f6 e0       	ldi	r31, 0x06	; 6
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <set_output+0xa4>

}

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
     fe2:	80 91 01 0a 	lds	r24, 0x0A01
     fe6:	8f 7b       	andi	r24, 0xBF	; 191
     fe8:	e0 e0       	ldi	r30, 0x00	; 0
     fea:	fa e0       	ldi	r31, 0x0A	; 10
     fec:	81 83       	std	Z+1, r24	; 0x01
			}
			break;
		case '8':
			// Disable PWM ch0 in case it's on
			turn_off_pwm0();
			PORTE.DIRSET = PIN2_bm;
     fee:	e0 e8       	ldi	r30, 0x80	; 128
     ff0:	f6 e0       	ldi	r31, 0x06	; 6
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	81 83       	std	Z+1, r24	; 0x01
			if(value) {
     ff6:	66 23       	and	r22, r22
     ff8:	71 f4       	brne	.+28     	; 0x1016 <set_output+0xc6>
				PORTE.OUTSET = PIN2_bm;
			}
			else {
				PORTE.OUTCLR = PIN2_bm;
     ffa:	86 83       	std	Z+6, r24	; 0x06
     ffc:	08 95       	ret
}

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
     ffe:	80 91 01 0a 	lds	r24, 0x0A01
    1002:	8f 77       	andi	r24, 0x7F	; 127
    1004:	e0 e0       	ldi	r30, 0x00	; 0
    1006:	fa e0       	ldi	r31, 0x0A	; 10
    1008:	81 83       	std	Z+1, r24	; 0x01
			}
			break;
		case '9':
			// Disable PWM ch1 in case it's on
			turn_off_pwm1();
			PORTE.DIRSET = PIN3_bm;
    100a:	e0 e8       	ldi	r30, 0x80	; 128
    100c:	f6 e0       	ldi	r31, 0x06	; 6
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	81 83       	std	Z+1, r24	; 0x01
			if(value) {
    1012:	66 23       	and	r22, r22
    1014:	11 f0       	breq	.+4      	; 0x101a <set_output+0xca>
				PORTE.OUTSET = PIN3_bm;
    1016:	85 83       	std	Z+5, r24	; 0x05
    1018:	08 95       	ret
			}
			else {
				PORTE.OUTCLR = PIN3_bm;
    101a:	86 83       	std	Z+6, r24	; 0x06
    101c:	08 95       	ret

0000101e <read_input>:

}

// Turns any of the external DIO into an input and reads the value
char read_input(char port) {
	switch(port) {
    101e:	84 33       	cpi	r24, 0x34	; 52
    1020:	09 f4       	brne	.+2      	; 0x1024 <read_input+0x6>
    1022:	42 c0       	rjmp	.+132    	; 0x10a8 <read_input+0x8a>
    1024:	85 33       	cpi	r24, 0x35	; 53
    1026:	60 f4       	brcc	.+24     	; 0x1040 <read_input+0x22>
    1028:	81 33       	cpi	r24, 0x31	; 49
    102a:	21 f1       	breq	.+72     	; 0x1074 <read_input+0x56>
    102c:	82 33       	cpi	r24, 0x32	; 50
    102e:	18 f4       	brcc	.+6      	; 0x1036 <read_input+0x18>
    1030:	80 33       	cpi	r24, 0x30	; 48
    1032:	b1 f4       	brne	.+44     	; 0x1060 <read_input+0x42>
    1034:	17 c0       	rjmp	.+46     	; 0x1064 <read_input+0x46>
    1036:	82 33       	cpi	r24, 0x32	; 50
    1038:	49 f1       	breq	.+82     	; 0x108c <read_input+0x6e>
    103a:	83 33       	cpi	r24, 0x33	; 51
    103c:	89 f4       	brne	.+34     	; 0x1060 <read_input+0x42>
    103e:	2d c0       	rjmp	.+90     	; 0x109a <read_input+0x7c>
    1040:	87 33       	cpi	r24, 0x37	; 55
    1042:	09 f4       	brne	.+2      	; 0x1046 <read_input+0x28>
    1044:	5b c0       	rjmp	.+182    	; 0x10fc <read_input+0xde>
    1046:	88 33       	cpi	r24, 0x38	; 56
    1048:	28 f4       	brcc	.+10     	; 0x1054 <read_input+0x36>
    104a:	85 33       	cpi	r24, 0x35	; 53
    104c:	e1 f1       	breq	.+120    	; 0x10c6 <read_input+0xa8>
    104e:	86 33       	cpi	r24, 0x36	; 54
    1050:	39 f4       	brne	.+14     	; 0x1060 <read_input+0x42>
    1052:	48 c0       	rjmp	.+144    	; 0x10e4 <read_input+0xc6>
    1054:	88 33       	cpi	r24, 0x38	; 56
    1056:	09 f4       	brne	.+2      	; 0x105a <read_input+0x3c>
    1058:	65 c0       	rjmp	.+202    	; 0x1124 <read_input+0x106>
    105a:	89 33       	cpi	r24, 0x39	; 57
    105c:	09 f4       	brne	.+2      	; 0x1060 <read_input+0x42>
    105e:	76 c0       	rjmp	.+236    	; 0x114c <read_input+0x12e>
    1060:	80 ed       	ldi	r24, 0xD0	; 208
    1062:	08 95       	ret
		case '0':
			PORTA.DIRCLR = PIN0_bm;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	f6 e0       	ldi	r31, 0x06	; 6
    106a:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN0_bm)>>0;
    106c:	80 91 08 06 	lds	r24, 0x0608
    1070:	81 70       	andi	r24, 0x01	; 1
    1072:	08 95       	ret
			break;
		case '1':
			PORTA.DIRCLR = PIN1_bm;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	e0 e0       	ldi	r30, 0x00	; 0
    1078:	f6 e0       	ldi	r31, 0x06	; 6
    107a:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN1_bm)>>1;
    107c:	80 91 08 06 	lds	r24, 0x0608
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	82 70       	andi	r24, 0x02	; 2
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	95 95       	asr	r25
    1088:	87 95       	ror	r24
    108a:	08 95       	ret
			break;
		case '2':
			PORTA.DIRCLR= PIN2_bm;
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	e0 e0       	ldi	r30, 0x00	; 0
    1090:	f6 e0       	ldi	r31, 0x06	; 6
    1092:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN2_bm)>>2;
    1094:	80 91 08 06 	lds	r24, 0x0608
    1098:	51 c0       	rjmp	.+162    	; 0x113c <read_input+0x11e>
			break;
		case '3':
			PORTA.DIRCLR= PIN3_bm;
    109a:	88 e0       	ldi	r24, 0x08	; 8
    109c:	e0 e0       	ldi	r30, 0x00	; 0
    109e:	f6 e0       	ldi	r31, 0x06	; 6
    10a0:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN3_bm)>>3;
    10a2:	80 91 08 06 	lds	r24, 0x0608
    10a6:	35 c0       	rjmp	.+106    	; 0x1112 <read_input+0xf4>
			break;
		case '4':
			PORTA.DIRCLR = PIN4_bm;
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	e0 e0       	ldi	r30, 0x00	; 0
    10ac:	f6 e0       	ldi	r31, 0x06	; 6
    10ae:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN4_bm)>>4;
    10b0:	80 91 08 06 	lds	r24, 0x0608
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	80 71       	andi	r24, 0x10	; 16
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	b4 e0       	ldi	r27, 0x04	; 4
    10bc:	95 95       	asr	r25
    10be:	87 95       	ror	r24
    10c0:	ba 95       	dec	r27
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <read_input+0x9e>
    10c4:	08 95       	ret
			break;
		case '5':
			PORTA.DIRCLR = PIN5_bm;
    10c6:	80 e2       	ldi	r24, 0x20	; 32
    10c8:	e0 e0       	ldi	r30, 0x00	; 0
    10ca:	f6 e0       	ldi	r31, 0x06	; 6
    10cc:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN5_bm)>>5;
    10ce:	80 91 08 06 	lds	r24, 0x0608
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	80 72       	andi	r24, 0x20	; 32
    10d6:	90 70       	andi	r25, 0x00	; 0
    10d8:	a5 e0       	ldi	r26, 0x05	; 5
    10da:	95 95       	asr	r25
    10dc:	87 95       	ror	r24
    10de:	aa 95       	dec	r26
    10e0:	e1 f7       	brne	.-8      	; 0x10da <read_input+0xbc>
    10e2:	08 95       	ret
	DACB.CH1DATAH = val;
}

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
    10e4:	80 91 20 03 	lds	r24, 0x0320
    10e8:	8b 7f       	andi	r24, 0xFB	; 251
    10ea:	80 93 20 03 	sts	0x0320, r24
			break;
		case '6':
			// Disable DAC ch0 in case it's on
			disable_dac0();
			PORTB.DIRCLR = PIN2_bm;
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	e0 e2       	ldi	r30, 0x20	; 32
    10f2:	f6 e0       	ldi	r31, 0x06	; 6
    10f4:	82 83       	std	Z+2, r24	; 0x02
			return (PORTB.IN & PIN2_bm)>>2;
    10f6:	80 91 28 06 	lds	r24, 0x0628
    10fa:	20 c0       	rjmp	.+64     	; 0x113c <read_input+0x11e>
}

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
    10fc:	80 91 20 03 	lds	r24, 0x0320
    1100:	87 7f       	andi	r24, 0xF7	; 247
    1102:	80 93 20 03 	sts	0x0320, r24
			break;
		case '7':
			// Disable DAC ch0 in case it's on
			disable_dac1();
			PORTB.DIRCLR = PIN3_bm;
    1106:	88 e0       	ldi	r24, 0x08	; 8
    1108:	e0 e2       	ldi	r30, 0x20	; 32
    110a:	f6 e0       	ldi	r31, 0x06	; 6
    110c:	82 83       	std	Z+2, r24	; 0x02
			return (PORTB.IN & PIN3_bm)>>3;
    110e:	80 91 28 06 	lds	r24, 0x0628
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	88 70       	andi	r24, 0x08	; 8
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	f3 e0       	ldi	r31, 0x03	; 3
    111a:	95 95       	asr	r25
    111c:	87 95       	ror	r24
    111e:	fa 95       	dec	r31
    1120:	e1 f7       	brne	.-8      	; 0x111a <read_input+0xfc>
    1122:	08 95       	ret

}

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
    1124:	80 91 01 0a 	lds	r24, 0x0A01
    1128:	8f 7b       	andi	r24, 0xBF	; 191
    112a:	e0 e0       	ldi	r30, 0x00	; 0
    112c:	fa e0       	ldi	r31, 0x0A	; 10
    112e:	81 83       	std	Z+1, r24	; 0x01
			break;
		case '8':
			// Disable PWM ch0 in case it's on
			turn_off_pwm0();
			PORTE.DIRCLR = PIN2_bm;
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	f6 e0       	ldi	r31, 0x06	; 6
    1136:	82 83       	std	Z+2, r24	; 0x02
			return (PORTE.IN & PIN2_bm)>>2;
    1138:	80 91 88 06 	lds	r24, 0x0688
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	84 70       	andi	r24, 0x04	; 4
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	95 95       	asr	r25
    1144:	87 95       	ror	r24
    1146:	95 95       	asr	r25
    1148:	87 95       	ror	r24
    114a:	08 95       	ret
}

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
    114c:	80 91 01 0a 	lds	r24, 0x0A01
    1150:	8f 77       	andi	r24, 0x7F	; 127
    1152:	e0 e0       	ldi	r30, 0x00	; 0
    1154:	fa e0       	ldi	r31, 0x0A	; 10
    1156:	81 83       	std	Z+1, r24	; 0x01
			break;
		case '9':
			// Disable PWM ch1 in case it's on
			turn_off_pwm1();
			PORTE.DIRCLR = PIN3_bm;
    1158:	88 e0       	ldi	r24, 0x08	; 8
    115a:	e0 e8       	ldi	r30, 0x80	; 128
    115c:	f6 e0       	ldi	r31, 0x06	; 6
    115e:	82 83       	std	Z+2, r24	; 0x02
			return (PORTE.IN & PIN3_bm)>>3;
    1160:	80 91 88 06 	lds	r24, 0x0688
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	88 70       	andi	r24, 0x08	; 8
    1168:	90 70       	andi	r25, 0x00	; 0
    116a:	73 e0       	ldi	r23, 0x03	; 3
    116c:	95 95       	asr	r25
    116e:	87 95       	ror	r24
    1170:	7a 95       	dec	r23
    1172:	e1 f7       	brne	.-8      	; 0x116c <read_input+0x14e>
		default:
			return -48;
			break;
	}

    1174:	08 95       	ret

00001176 <init_ir_read>:
/* Used for capturing IR signals. */

// Initializes the IR capture capability, must be done each time a signal needs to be captured.
void init_ir_read() {
	
	ir_read_flag = 1; // Stays high until we return success or failure
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	80 93 04 20 	sts	0x2004, r24
	//divide clock by 64, so timer clock is 500 KHz
	TCE0.CTRLA = TC_CLKSEL_DIV64_gc; 
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	ba e0       	ldi	r27, 0x0A	; 10
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	8c 93       	st	X, r24

	//normal operation with capture compare port enabled
	TCE0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
    1184:	90 e1       	ldi	r25, 0x10	; 16
    1186:	11 96       	adiw	r26, 0x01	; 1
    1188:	9c 93       	st	X, r25
    118a:	11 97       	sbiw	r26, 0x01	; 1

	//pin change event from any pin triggers setting
	// Set up input capture when event channel 0 fires
	TCE0.CTRLD = TC_EVACT_CAPT_gc | TC_EVSEL_CH0_gc;
    118c:	88 e2       	ldi	r24, 0x28	; 40
    118e:	13 96       	adiw	r26, 0x03	; 3
    1190:	8c 93       	st	X, r24
    1192:	13 97       	sbiw	r26, 0x03	; 3
	// Clear the direction of the pin to make it an input
	PORTC.DIRCLR = PIN4_bm;
    1194:	e0 e4       	ldi	r30, 0x40	; 64
    1196:	f6 e0       	ldi	r31, 0x06	; 6
    1198:	92 83       	std	Z+2, r25	; 0x02
	// Invert the signal so we start with a rising edge
	// Defaults to sensing both edges, which is what we want
	PORTC.PIN4CTRL |= PORT_INVEN_bm;
    119a:	84 89       	ldd	r24, Z+20	; 0x14
    119c:	80 64       	ori	r24, 0x40	; 64
    119e:	84 8b       	std	Z+20, r24	; 0x14
	// Set event channel 0 to register events from port C pin 4
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    11a0:	84 e6       	ldi	r24, 0x64	; 100
    11a2:	80 93 80 01 	sts	0x0180, r24

	//set PER to a value that will cut things off if no signal after 16 MS or so
	TCE0.PERBUF = 0x1F40;//TCE0.PERBUF = 0x7FFF;
    11a6:	80 e4       	ldi	r24, 0x40	; 64
    11a8:	9f e1       	ldi	r25, 0x1F	; 31
    11aa:	d6 96       	adiw	r26, 0x36	; 54
    11ac:	8d 93       	st	X+, r24
    11ae:	9c 93       	st	X, r25
    11b0:	d7 97       	sbiw	r26, 0x37	; 55
	
	// Reset signal_count and time out
	signal_count = 0;
    11b2:	10 92 02 20 	sts	0x2002, r1
	ir_read_time_out = 0;
    11b6:	10 92 03 20 	sts	0x2003, r1
	
	// Enable interrupts on CCA and Overflow
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	8c 93       	st	X, r24
    11c0:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.INTCTRLB = TC_CCAINTLVL_HI_gc; 
    11c2:	17 96       	adiw	r26, 0x07	; 7
    11c4:	8c 93       	st	X, r24
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    11c6:	e0 ea       	ldi	r30, 0xA0	; 160
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	84 60       	ori	r24, 0x04	; 4
    11ce:	82 83       	std	Z+2, r24	; 0x02
	Buzzer: TCD1
	LED: TCD0
	PWM: TCE0
	IR Reading: TCE0 */
	
}
    11d0:	08 95       	ret

000011d2 <ir_fail>:
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    11d2:	80 91 b1 09 	lds	r24, 0x09B1
    11d6:	85 ff       	sbrs	r24, 5
    11d8:	fc cf       	rjmp	.-8      	; 0x11d2 <ir_fail>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    11da:	85 e4       	ldi	r24, 0x45	; 69
    11dc:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    11e0:	80 91 b1 09 	lds	r24, 0x09B1
    11e4:	85 ff       	sbrs	r24, 5
    11e6:	fc cf       	rjmp	.-8      	; 0x11e0 <ir_fail+0xe>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    11e8:	82 e5       	ldi	r24, 0x52	; 82
    11ea:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    11ee:	80 91 b1 09 	lds	r24, 0x09B1
    11f2:	85 ff       	sbrs	r24, 5
    11f4:	fc cf       	rjmp	.-8      	; 0x11ee <ir_fail+0x1c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    11f6:	82 e5       	ldi	r24, 0x52	; 82
    11f8:	80 93 b0 09 	sts	0x09B0, r24
void ir_fail() 
{
	uart_putchar(&BT_USART, 'E');
	uart_putchar(&BT_USART, 'R');
	uart_putchar(&BT_USART, 'R');
	ir_read_flag = 0;
    11fc:	10 92 04 20 	sts	0x2004, r1
}
    1200:	08 95       	ret

00001202 <disable_ir_read>:

// Disables the interrupts/event system used to capture IR signal
void disable_ir_read() 
{
	// Turn off interrupts:
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1202:	e0 e0       	ldi	r30, 0x00	; 0
    1204:	fa e0       	ldi	r31, 0x0A	; 10
    1206:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc; 
    1208:	17 82       	std	Z+7, r1	; 0x07
	// Turn off event system
	EVSYS.CH0MUX  = 0;
    120a:	10 92 80 01 	sts	0x0180, r1
	TCE0.CTRLD = 0;
    120e:	13 82       	std	Z+3, r1	; 0x03
	//Turn off Timer-counter
	TCE0.CTRLB = 0;
    1210:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = 0;
    1212:	10 82       	st	Z, r1
}
    1214:	08 95       	ret

00001216 <dump_data>:

// Dumps the captured data over serial
void dump_data()
{
	// If signal_count is 2 or 4, we picked up some spurious signal, so don't print those out, instead, send ir_fail()
	if(signal_count > 4) {
    1216:	80 91 02 20 	lds	r24, 0x2002
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	f0 f0       	brcs	.+60     	; 0x125a <dump_data+0x44>
		uart_putchar(&BT_USART, signal_count-1); // print the length of the signal including the signal length byte. Does not include first two bytes
    121e:	90 91 02 20 	lds	r25, 0x2002
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1222:	80 91 b1 09 	lds	r24, 0x09B1
    1226:	85 ff       	sbrs	r24, 5
    1228:	fc cf       	rjmp	.-8      	; 0x1222 <dump_data+0xc>
    122a:	91 50       	subi	r25, 0x01	; 1
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    122c:	90 93 b0 09 	sts	0x09B0, r25
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	0c c0       	rjmp	.+24     	; 0x124c <dump_data+0x36>
		// First two bytes don't get considered part of the signal because they represent a random value (random time to the time of the first edge)
		for(uint8_t i = 2; i < signal_count; i++)
		{
			uart_putchar(&BT_USART, captured_signal[i]);
    1234:	e9 2f       	mov	r30, r25
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	e5 5f       	subi	r30, 0xF5	; 245
    123a:	fd 4d       	sbci	r31, 0xDD	; 221
    123c:	e0 81       	ld	r30, Z
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    123e:	80 91 b1 09 	lds	r24, 0x09B1
    1242:	85 ff       	sbrs	r24, 5
    1244:	fc cf       	rjmp	.-8      	; 0x123e <dump_data+0x28>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1246:	e0 93 b0 09 	sts	0x09B0, r30
{
	// If signal_count is 2 or 4, we picked up some spurious signal, so don't print those out, instead, send ir_fail()
	if(signal_count > 4) {
		uart_putchar(&BT_USART, signal_count-1); // print the length of the signal including the signal length byte. Does not include first two bytes
		// First two bytes don't get considered part of the signal because they represent a random value (random time to the time of the first edge)
		for(uint8_t i = 2; i < signal_count; i++)
    124a:	9f 5f       	subi	r25, 0xFF	; 255
    124c:	80 91 02 20 	lds	r24, 0x2002
    1250:	98 17       	cp	r25, r24
    1252:	80 f3       	brcs	.-32     	; 0x1234 <dump_data+0x1e>
		{
			uart_putchar(&BT_USART, captured_signal[i]);
		}
		ir_read_flag = 0;
    1254:	10 92 04 20 	sts	0x2004, r1
    1258:	08 95       	ret
	}
	else {
		ir_fail();
    125a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <ir_fail>
    125e:	08 95       	ret

00001260 <__vector_47>:
	}
	signal_count+=2; // Count by 2s because the signal time data takes two bytes
}

// If we get to an overflow (roughly every 16 ms if no captures occur), then either no signal has been seen yet, or one has been seen and has ended
ISR(TCE0_OVF_vect) {
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
	// If the signal_count is non zero, we've seen a signal, so dump it over serial
	if(signal_count != 0) {
    1282:	80 91 02 20 	lds	r24, 0x2002
    1286:	88 23       	and	r24, r24
    1288:	29 f0       	breq	.+10     	; 0x1294 <__vector_47+0x34>
		disable_ir_read();
    128a:	0e 94 01 09 	call	0x1202	; 0x1202 <disable_ir_read>
		dump_data();
    128e:	0e 94 0b 09 	call	0x1216	; 0x1216 <dump_data>
    1292:	0d c0       	rjmp	.+26     	; 0x12ae <__vector_47+0x4e>
	}
	// Otherwise, increment the time out counter - if we overflow 250 or more times, report failure to read a signal
	else {
		ir_read_time_out++;
    1294:	80 91 03 20 	lds	r24, 0x2003
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 93 03 20 	sts	0x2003, r24
		if(ir_read_time_out > 250) {
    129e:	80 91 03 20 	lds	r24, 0x2003
    12a2:	8b 3f       	cpi	r24, 0xFB	; 251
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <__vector_47+0x4e>
			disable_ir_read();
    12a6:	0e 94 01 09 	call	0x1202	; 0x1202 <disable_ir_read>
			ir_fail();
    12aa:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <ir_fail>
		}
	}
}
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_49>:
	IR Reading: TCE0 */
	
}

// All the fun stuff happens here - this interrupt is triggered when the input signal rises or falls
ISR(TCE0_CCA_vect) {
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
	TCE0.CNT = 0; // Reset the counter
    12f2:	e0 e0       	ldi	r30, 0x00	; 0
    12f4:	fa e0       	ldi	r31, 0x0A	; 10
    12f6:	10 a2       	std	Z+32, r1	; 0x20
    12f8:	11 a2       	std	Z+33, r1	; 0x21
	
	// If the number of edges is greater than 191, the signal is longer than we can store - so stop and return failure
	if(signal_count > 191) {
    12fa:	80 91 02 20 	lds	r24, 0x2002
    12fe:	80 3c       	cpi	r24, 0xC0	; 192
    1300:	28 f0       	brcs	.+10     	; 0x130c <__vector_49+0x3c>
		disable_ir_read();
    1302:	0e 94 01 09 	call	0x1202	; 0x1202 <disable_ir_read>
		ir_fail();
    1306:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <ir_fail>
    130a:	39 c0       	rjmp	.+114    	; 0x137e <__vector_49+0xae>
		return;
	}
	// Read the captured signal's time value (CCA register without the highest bit) into our array
	captured_signal[signal_count+1] = TCE0.CCAL;
    130c:	e0 91 02 20 	lds	r30, 0x2002
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 91 28 0a 	lds	r24, 0x0A28
    1316:	e4 5f       	subi	r30, 0xF4	; 244
    1318:	fd 4d       	sbci	r31, 0xDD	; 221
    131a:	80 83       	st	Z, r24
	captured_signal[signal_count] = TCE0.CCAH&0b01111111;
    131c:	e0 91 02 20 	lds	r30, 0x2002
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 91 29 0a 	lds	r24, 0x0A29
    1326:	8f 77       	andi	r24, 0x7F	; 127
    1328:	e5 5f       	subi	r30, 0xF5	; 245
    132a:	fd 4d       	sbci	r31, 0xDD	; 221
    132c:	80 83       	st	Z, r24
	// Ignore spurious signals - software control for glitches from lighting, other remotes, etc - basically, ignores anything that's shorter than 200 microseconds and resets the counter
	if((captured_signal[signal_count+1] < 0x40) && (captured_signal[signal_count] == 0)) 
    132e:	e0 91 02 20 	lds	r30, 0x2002
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	e4 5f       	subi	r30, 0xF4	; 244
    1336:	fd 4d       	sbci	r31, 0xDD	; 221
    1338:	80 81       	ld	r24, Z
    133a:	80 34       	cpi	r24, 0x40	; 64
    133c:	50 f4       	brcc	.+20     	; 0x1352 <__vector_49+0x82>
    133e:	e0 91 02 20 	lds	r30, 0x2002
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	e5 5f       	subi	r30, 0xF5	; 245
    1346:	fd 4d       	sbci	r31, 0xDD	; 221
    1348:	80 81       	ld	r24, Z
    134a:	88 23       	and	r24, r24
    134c:	11 f4       	brne	.+4      	; 0x1352 <__vector_49+0x82>
	{
		signal_count = 0;
    134e:	10 92 02 20 	sts	0x2002, r1
	}
	// If the signal count increases past a typical "start-up" section, tighten the spacing between
	// rising and falling edges to 8 ms to prevent multiple consecutive reads of the same signal
	if((signal_count > 16) & (captured_signal[signal_count] > 0x10)) {
    1352:	80 91 02 20 	lds	r24, 0x2002
    1356:	e0 91 02 20 	lds	r30, 0x2002
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	e5 5f       	subi	r30, 0xF5	; 245
    135e:	fd 4d       	sbci	r31, 0xDD	; 221
    1360:	e0 81       	ld	r30, Z
    1362:	81 31       	cpi	r24, 0x11	; 17
    1364:	38 f0       	brcs	.+14     	; 0x1374 <__vector_49+0xa4>
    1366:	e1 31       	cpi	r30, 0x11	; 17
    1368:	28 f0       	brcs	.+10     	; 0x1374 <__vector_49+0xa4>
		disable_ir_read();
    136a:	0e 94 01 09 	call	0x1202	; 0x1202 <disable_ir_read>
		dump_data(); // Prints all of the data over serial
    136e:	0e 94 0b 09 	call	0x1216	; 0x1216 <dump_data>
    1372:	05 c0       	rjmp	.+10     	; 0x137e <__vector_49+0xae>
		return;	
	}
	signal_count+=2; // Count by 2s because the signal time data takes two bytes
    1374:	80 91 02 20 	lds	r24, 0x2002
    1378:	8e 5f       	subi	r24, 0xFE	; 254
    137a:	80 93 02 20 	sts	0x2002, r24
}
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <read_data_from_serial>:
	}
}

// Reads raw data from the host into the robotData structure, where it can be used to re-transmit the data.
int read_data_from_serial()
{
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
	int signal_length = uart_getchar_timeout(&BT_USART);
    13aa:	80 eb       	ldi	r24, 0xB0	; 176
    13ac:	99 e0       	ldi	r25, 0x09	; 9
    13ae:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    13b2:	9c 01       	movw	r18, r24
	int temp = 0;

	uart_putchar(&BT_USART, signal_length);
    13b4:	18 2f       	mov	r17, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    13b6:	80 91 b1 09 	lds	r24, 0x09B1
    13ba:	85 ff       	sbrs	r24, 5
    13bc:	fc cf       	rjmp	.-8      	; 0x13b6 <read_data_from_serial+0x16>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    13be:	10 93 b0 09 	sts	0x09B0, r17
    13c2:	c0 e0       	ldi	r28, 0x00	; 0
    13c4:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int i = 0; i < signal_length-1; i++) {
    13c6:	79 01       	movw	r14, r18
    13c8:	08 94       	sec
    13ca:	e1 08       	sbc	r14, r1
    13cc:	f1 08       	sbc	r15, r1
    13ce:	17 c0       	rjmp	.+46     	; 0x13fe <read_data_from_serial+0x5e>
		temp = uart_getchar_timeout(&BT_USART);
    13d0:	80 eb       	ldi	r24, 0xB0	; 176
    13d2:	99 e0       	ldi	r25, 0x09	; 9
    13d4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
		if(temp == 256) {
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	80 30       	cpi	r24, 0x00	; 0
    13dc:	92 07       	cpc	r25, r18
    13de:	19 f4       	brne	.+6      	; 0x13e6 <read_data_from_serial+0x46>
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <read_data_from_serial+0x6e>
			return 0;
		}
		else {
			uart_putchar(&BT_USART, temp);
    13e6:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    13e8:	80 91 b1 09 	lds	r24, 0x09B1
    13ec:	85 ff       	sbrs	r24, 5
    13ee:	fc cf       	rjmp	.-8      	; 0x13e8 <read_data_from_serial+0x48>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    13f0:	90 93 b0 09 	sts	0x09B0, r25
			robotData.irBytes[i] = (char)temp;
    13f4:	fe 01       	movw	r30, r28
    13f6:	e5 5e       	subi	r30, 0xE5	; 229
    13f8:	fe 4d       	sbci	r31, 0xDE	; 222
    13fa:	94 a7       	std	Z+44, r25	; 0x2c
	int signal_length = uart_getchar_timeout(&BT_USART);
	int temp = 0;

	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < signal_length-1; i++) {
    13fc:	21 96       	adiw	r28, 0x01	; 1
    13fe:	ce 15       	cp	r28, r14
    1400:	df 05       	cpc	r29, r15
    1402:	34 f3       	brlt	.-52     	; 0x13d0 <read_data_from_serial+0x30>
			uart_putchar(&BT_USART, temp);
			robotData.irBytes[i] = (char)temp;
		}
	}
	
	robotData.numBits = signal_length-1;
    1404:	11 50       	subi	r17, 0x01	; 1
    1406:	10 93 3f 21 	sts	0x213F, r17
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
}	
    140e:	c9 01       	movw	r24, r18
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	08 95       	ret

0000141c <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    141c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    141e:	e0 ec       	ldi	r30, 0xC0	; 192
    1420:	f1 e0       	ldi	r31, 0x01	; 1
    1422:	80 91 cf 01 	lds	r24, 0x01CF
    1426:	87 fd       	sbrc	r24, 7
    1428:	fa cf       	rjmp	.-12     	; 0x141e <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    142a:	26 2f       	mov	r18, r22
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	2f 71       	andi	r18, 0x1F	; 31
    1430:	30 70       	andi	r19, 0x00	; 0
    1432:	89 2f       	mov	r24, r25
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	45 e0       	ldi	r20, 0x05	; 5
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	4a 95       	dec	r20
    143e:	e1 f7       	brne	.-8      	; 0x1438 <EEPROM_ReadByte+0x1c>
    1440:	28 2b       	or	r18, r24
    1442:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    1444:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1448:	83 2f       	mov	r24, r19
    144a:	8f 71       	andi	r24, 0x1F	; 31
    144c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    144e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    1450:	86 e0       	ldi	r24, 0x06	; 6
    1452:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1454:	ef 93       	push	r30
    1456:	ff 93       	push	r31
    1458:	0f 93       	push	r16
    145a:	2f 93       	push	r18
    145c:	eb ec       	ldi	r30, 0xCB	; 203
    145e:	f1 e0       	ldi	r31, 0x01	; 1
    1460:	08 ed       	ldi	r16, 0xD8	; 216
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	04 bf       	out	0x34, r16	; 52
    1466:	20 83       	st	Z, r18
    1468:	2f 91       	pop	r18
    146a:	0f 91       	pop	r16
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30

	return NVM.DATA0;
    1470:	80 91 c4 01 	lds	r24, 0x01C4
}
    1474:	08 95       	ret

00001476 <print_data_from_eeprom>:
	robotData.numBits = signal_length-1;
}	

// Sends the data in EEPROM over bluetooth to the host
void print_data_from_eeprom(int position)
{
    1476:	af 92       	push	r10
    1478:	bf 92       	push	r11
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
	int signal_length = EEPROM_ReadByte(position*6, 0);
    148a:	9c 01       	movw	r18, r24
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	28 0f       	add	r18, r24
    1492:	39 1f       	adc	r19, r25
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	c2 2e       	mov	r12, r18
    149a:	82 2f       	mov	r24, r18
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	0e 94 0e 0a 	call	0x141c	; 0x141c <EEPROM_ReadByte>
    14a2:	28 2f       	mov	r18, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
	int pages = signal_length/32;
    14a6:	7c 01       	movw	r14, r24
    14a8:	65 e0       	ldi	r22, 0x05	; 5
    14aa:	f5 94       	asr	r15
    14ac:	e7 94       	ror	r14
    14ae:	6a 95       	dec	r22
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <print_data_from_eeprom+0x34>
	int remainder = signal_length%32;
    14b2:	5f e1       	ldi	r21, 0x1F	; 31
    14b4:	a5 2e       	mov	r10, r21
    14b6:	b1 2c       	mov	r11, r1
    14b8:	a8 22       	and	r10, r24
    14ba:	b9 22       	and	r11, r25
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    14bc:	80 91 b1 09 	lds	r24, 0x09B1
    14c0:	85 ff       	sbrs	r24, 5
    14c2:	fc cf       	rjmp	.-8      	; 0x14bc <print_data_from_eeprom+0x46>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    14c4:	20 93 b0 09 	sts	0x09B0, r18
    14c8:	c1 e0       	ldi	r28, 0x01	; 1
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	15 c0       	rjmp	.+42     	; 0x14fc <print_data_from_eeprom+0x86>
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + i, j));
    14d2:	dc 2c       	mov	r13, r12
    14d4:	d0 0e       	add	r13, r16
    14d6:	8d 2d       	mov	r24, r13
    14d8:	6c 2f       	mov	r22, r28
    14da:	0e 94 0e 0a 	call	0x141c	; 0x141c <EEPROM_ReadByte>
    14de:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    14e0:	80 91 b1 09 	lds	r24, 0x09B1
    14e4:	85 ff       	sbrs	r24, 5
    14e6:	fc cf       	rjmp	.-8      	; 0x14e0 <print_data_from_eeprom+0x6a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    14e8:	90 93 b0 09 	sts	0x09B0, r25
			j++;
    14ec:	21 96       	adiw	r28, 0x01	; 1
	int j = 1;
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    14ee:	c0 32       	cpi	r28, 0x20	; 32
    14f0:	d1 05       	cpc	r29, r1
    14f2:	8c f3       	brlt	.-30     	; 0x14d6 <print_data_from_eeprom+0x60>
	int remainder = signal_length%32;
	int j = 1;
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
    14f4:	0f 5f       	subi	r16, 0xFF	; 255
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	c0 e0       	ldi	r28, 0x00	; 0
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
    14fc:	0e 15       	cp	r16, r14
    14fe:	1f 05       	cpc	r17, r15
    1500:	44 f3       	brlt	.-48     	; 0x14d2 <print_data_from_eeprom+0x5c>
    1502:	0d c0       	rjmp	.+26     	; 0x151e <print_data_from_eeprom+0xa8>
		}
		j = 0;
	}
	
	while(j < remainder) {
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
    1504:	81 2f       	mov	r24, r17
    1506:	6c 2f       	mov	r22, r28
    1508:	0e 94 0e 0a 	call	0x141c	; 0x141c <EEPROM_ReadByte>
    150c:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    150e:	80 91 b1 09 	lds	r24, 0x09B1
    1512:	85 ff       	sbrs	r24, 5
    1514:	fc cf       	rjmp	.-8      	; 0x150e <print_data_from_eeprom+0x98>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1516:	90 93 b0 09 	sts	0x09B0, r25
		j++;
    151a:	21 96       	adiw	r28, 0x01	; 1
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <print_data_from_eeprom+0xac>
		}
		j = 0;
	}
	
	while(j < remainder) {
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
    151e:	1c 2d       	mov	r17, r12
    1520:	1e 0d       	add	r17, r14
			j++;
		}
		j = 0;
	}
	
	while(j < remainder) {
    1522:	ca 15       	cp	r28, r10
    1524:	db 05       	cpc	r29, r11
    1526:	74 f3       	brlt	.-36     	; 0x1504 <print_data_from_eeprom+0x8e>
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
		j++;
	}
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	bf 90       	pop	r11
    153a:	af 90       	pop	r10
    153c:	08 95       	ret

0000153e <read_data_from_eeprom>:
	}
}	

// Reads the data in a given EEPROM position into the robotData structure, from where it can be used to re-transmit the signal
void read_data_from_eeprom(int position)
{
    153e:	5f 92       	push	r5
    1540:	6f 92       	push	r6
    1542:	7f 92       	push	r7
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
	int signal_length = EEPROM_ReadByte(position*6, 0);
    155c:	9c 01       	movw	r18, r24
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	28 0f       	add	r18, r24
    1564:	39 1f       	adc	r19, r25
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	52 2e       	mov	r5, r18
    156c:	82 2f       	mov	r24, r18
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	0e 94 0e 0a 	call	0x141c	; 0x141c <EEPROM_ReadByte>
    1574:	b8 2e       	mov	r11, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
	int pages = signal_length/32;
    1578:	4c 01       	movw	r8, r24
    157a:	b5 e0       	ldi	r27, 0x05	; 5
    157c:	95 94       	asr	r9
    157e:	87 94       	ror	r8
    1580:	ba 95       	dec	r27
    1582:	e1 f7       	brne	.-8      	; 0x157c <read_data_from_eeprom+0x3e>
	int remainder = signal_length%32;
    1584:	af e1       	ldi	r26, 0x1F	; 31
    1586:	6a 2e       	mov	r6, r26
    1588:	71 2c       	mov	r7, r1
    158a:	68 22       	and	r6, r24
    158c:	79 22       	and	r7, r25
    158e:	ee 24       	eor	r14, r14
    1590:	ff 24       	eor	r15, r15
    1592:	c1 e0       	ldi	r28, 0x01	; 1
    1594:	d0 e0       	ldi	r29, 0x00	; 0
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	12 c0       	rjmp	.+36     	; 0x15c0 <read_data_from_eeprom+0x82>
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + i, j);
    159c:	8a 2d       	mov	r24, r10
    159e:	6c 2f       	mov	r22, r28
    15a0:	0e 94 0e 0a 	call	0x141c	; 0x141c <EEPROM_ReadByte>
    15a4:	f6 01       	movw	r30, r12
    15a6:	81 93       	st	Z+, r24
    15a8:	6f 01       	movw	r12, r30
			array_counter++;
    15aa:	08 94       	sec
    15ac:	e1 1c       	adc	r14, r1
    15ae:	f1 1c       	adc	r15, r1
			j++;
    15b0:	21 96       	adiw	r28, 0x01	; 1
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    15b2:	c0 32       	cpi	r28, 0x20	; 32
    15b4:	d1 05       	cpc	r29, r1
    15b6:	94 f3       	brlt	.-28     	; 0x159c <read_data_from_eeprom+0x5e>
	int pages = signal_length/32;
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
    15b8:	0f 5f       	subi	r16, 0xFF	; 255
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	c0 e0       	ldi	r28, 0x00	; 0
    15be:	d0 e0       	ldi	r29, 0x00	; 0
    15c0:	c7 01       	movw	r24, r14
    15c2:	8c 96       	adiw	r24, 0x2c	; 44
    15c4:	08 15       	cp	r16, r8
    15c6:	19 05       	cpc	r17, r9
    15c8:	34 f0       	brlt	.+12     	; 0x15d6 <read_data_from_eeprom+0x98>
    15ca:	8c 01       	movw	r16, r24
    15cc:	05 5e       	subi	r16, 0xE5	; 229
    15ce:	1e 4d       	sbci	r17, 0xDE	; 222
		}
		j = 0;
	}
	
	while(j < remainder) {
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
    15d0:	f5 2c       	mov	r15, r5
    15d2:	f8 0c       	add	r15, r8
    15d4:	11 c0       	rjmp	.+34     	; 0x15f8 <read_data_from_eeprom+0xba>
	int pages = signal_length/32;
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
    15d6:	fb e1       	ldi	r31, 0x1B	; 27
    15d8:	cf 2e       	mov	r12, r31
    15da:	f1 e2       	ldi	r31, 0x21	; 33
    15dc:	df 2e       	mov	r13, r31
    15de:	c8 0e       	add	r12, r24
    15e0:	d9 1e       	adc	r13, r25
		while(j < EEPROM_PAGESIZE) {
			robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + i, j);
    15e2:	a5 2c       	mov	r10, r5
    15e4:	a0 0e       	add	r10, r16
    15e6:	da cf       	rjmp	.-76     	; 0x159c <read_data_from_eeprom+0x5e>
		}
		j = 0;
	}
	
	while(j < remainder) {
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
    15e8:	8f 2d       	mov	r24, r15
    15ea:	6c 2f       	mov	r22, r28
    15ec:	0e 94 0e 0a 	call	0x141c	; 0x141c <EEPROM_ReadByte>
    15f0:	f8 01       	movw	r30, r16
    15f2:	81 93       	st	Z+, r24
    15f4:	8f 01       	movw	r16, r30
		array_counter++;
		j++;
    15f6:	21 96       	adiw	r28, 0x01	; 1
			j++;
		}
		j = 0;
	}
	
	while(j < remainder) {
    15f8:	c6 15       	cp	r28, r6
    15fa:	d7 05       	cpc	r29, r7
    15fc:	ac f3       	brlt	.-22     	; 0x15e8 <read_data_from_eeprom+0xaa>
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
		array_counter++;
		j++;
	}
	robotData.numBits = signal_length-1;
    15fe:	ba 94       	dec	r11
    1600:	b0 92 3f 21 	sts	0x213F, r11
}	
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	af 90       	pop	r10
    1618:	9f 90       	pop	r9
    161a:	8f 90       	pop	r8
    161c:	7f 90       	pop	r7
    161e:	6f 90       	pop	r6
    1620:	5f 90       	pop	r5
    1622:	08 95       	ret

00001624 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1624:	80 91 cf 01 	lds	r24, 0x01CF
    1628:	87 fd       	sbrc	r24, 7
    162a:	fc cf       	rjmp	.-8      	; 0x1624 <EEPROM_WaitForNVM>
}
    162c:	08 95       	ret

0000162e <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    162e:	80 91 cf 01 	lds	r24, 0x01CF
    1632:	87 fd       	sbrc	r24, 7
    1634:	fc cf       	rjmp	.-8      	; 0x162e <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    1636:	80 91 cf 01 	lds	r24, 0x01CF
    163a:	81 ff       	sbrs	r24, 1
    163c:	12 c0       	rjmp	.+36     	; 0x1662 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    163e:	86 e3       	ldi	r24, 0x36	; 54
    1640:	e0 ec       	ldi	r30, 0xC0	; 192
    1642:	f1 e0       	ldi	r31, 0x01	; 1
    1644:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    1646:	ef 93       	push	r30
    1648:	ff 93       	push	r31
    164a:	0f 93       	push	r16
    164c:	2f 93       	push	r18
    164e:	eb ec       	ldi	r30, 0xCB	; 203
    1650:	f1 e0       	ldi	r31, 0x01	; 1
    1652:	08 ed       	ldi	r16, 0xD8	; 216
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	04 bf       	out	0x34, r16	; 52
    1658:	20 83       	st	Z, r18
    165a:	2f 91       	pop	r18
    165c:	0f 91       	pop	r16
    165e:	ff 91       	pop	r31
    1660:	ef 91       	pop	r30
    1662:	08 95       	ret

00001664 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	e8 2e       	mov	r14, r24
    1670:	06 2f       	mov	r16, r22
    1672:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    1674:	0e 94 17 0b 	call	0x162e	; 0x162e <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1678:	e0 ec       	ldi	r30, 0xC0	; 192
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	83 e3       	ldi	r24, 0x33	; 51
    167e:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    1680:	10 e0       	ldi	r17, 0x00	; 0
    1682:	0f 71       	andi	r16, 0x1F	; 31
    1684:	10 70       	andi	r17, 0x00	; 0
    1686:	ff 24       	eor	r15, r15
    1688:	85 e0       	ldi	r24, 0x05	; 5
    168a:	ee 0c       	add	r14, r14
    168c:	ff 1c       	adc	r15, r15
    168e:	8a 95       	dec	r24
    1690:	e1 f7       	brne	.-8      	; 0x168a <EEPROM_WriteByte+0x26>
    1692:	0e 29       	or	r16, r14
    1694:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    1696:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1698:	81 2f       	mov	r24, r17
    169a:	8f 71       	andi	r24, 0x1F	; 31
    169c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    169e:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    16a0:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    16a2:	85 e3       	ldi	r24, 0x35	; 53
    16a4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
    16aa:	0f 93       	push	r16
    16ac:	2f 93       	push	r18
    16ae:	eb ec       	ldi	r30, 0xCB	; 203
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	08 ed       	ldi	r16, 0xD8	; 216
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	04 bf       	out	0x34, r16	; 52
    16b8:	20 83       	st	Z, r18
    16ba:	2f 91       	pop	r18
    16bc:	0f 91       	pop	r16
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
}
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	df 90       	pop	r13
    16cc:	08 95       	ret

000016ce <write_data_to_eeprom>:
	}
}

// Write data takes the captured signal array and writes it into eeprom
void write_data_to_eeprom(int position) 
{
    16ce:	8f 92       	push	r8
    16d0:	9f 92       	push	r9
    16d2:	af 92       	push	r10
    16d4:	bf 92       	push	r11
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	9c 01       	movw	r18, r24
	int pages = (signal_count-1)/32; // The first two bytes of the signal are invalid, but we need an extra byte to hold the length of the signal
    16e8:	80 91 02 20 	lds	r24, 0x2002
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	60 e2       	ldi	r22, 0x20	; 32
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divmodhi4>
    16f8:	6b 01       	movw	r12, r22
	int remainder = (signal_count-1)%32;
    16fa:	80 91 02 20 	lds	r24, 0x2002
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	60 e2       	ldi	r22, 0x20	; 32
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divmodhi4>
    170a:	5c 01       	movw	r10, r24
	int array_counter = 2;
	int j = 0;
	
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
    170c:	c9 01       	movw	r24, r18
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	82 0f       	add	r24, r18
    1714:	93 1f       	adc	r25, r19
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	88 2e       	mov	r8, r24
    171c:	40 91 02 20 	lds	r20, 0x2002
    1720:	41 50       	subi	r20, 0x01	; 1
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	0e 94 32 0b 	call	0x1664	; 0x1664 <EEPROM_WriteByte>
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	e9 2e       	mov	r14, r25
    172c:	f1 2c       	mov	r15, r1
    172e:	c1 e0       	ldi	r28, 0x01	; 1
    1730:	d0 e0       	ldi	r29, 0x00	; 0
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	15 c0       	rjmp	.+42     	; 0x1762 <write_data_to_eeprom+0x94>
	j++;
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			EEPROM_WriteByte(position*6 + i, j, captured_signal[array_counter]);
    1738:	98 2c       	mov	r9, r8
    173a:	90 0e       	add	r9, r16
    173c:	f7 01       	movw	r30, r14
    173e:	e5 5f       	subi	r30, 0xF5	; 245
    1740:	fd 4d       	sbci	r31, 0xDD	; 221
    1742:	40 81       	ld	r20, Z
    1744:	89 2d       	mov	r24, r9
    1746:	6c 2f       	mov	r22, r28
    1748:	0e 94 32 0b 	call	0x1664	; 0x1664 <EEPROM_WriteByte>
			array_counter++;
    174c:	08 94       	sec
    174e:	e1 1c       	adc	r14, r1
    1750:	f1 1c       	adc	r15, r1
			j++;
    1752:	21 96       	adiw	r28, 0x01	; 1
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
	j++;
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    1754:	c0 32       	cpi	r28, 0x20	; 32
    1756:	d1 05       	cpc	r29, r1
    1758:	8c f3       	brlt	.-30     	; 0x173c <write_data_to_eeprom+0x6e>
	
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
	j++;
	for(int i = 0; i < pages; i++) {
    175a:	0f 5f       	subi	r16, 0xFF	; 255
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	c0 e0       	ldi	r28, 0x00	; 0
    1760:	d0 e0       	ldi	r29, 0x00	; 0
    1762:	0c 15       	cp	r16, r12
    1764:	1d 05       	cpc	r17, r13
    1766:	44 f3       	brlt	.-48     	; 0x1738 <write_data_to_eeprom+0x6a>
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <write_data_to_eeprom+0xb6>
		}
		j=0;
	}
	
	while(j < remainder) {
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
    176a:	f7 01       	movw	r30, r14
    176c:	e5 5f       	subi	r30, 0xF5	; 245
    176e:	fd 4d       	sbci	r31, 0xDD	; 221
    1770:	40 81       	ld	r20, Z
    1772:	81 2f       	mov	r24, r17
    1774:	6c 2f       	mov	r22, r28
    1776:	0e 94 32 0b 	call	0x1664	; 0x1664 <EEPROM_WriteByte>
		array_counter++;
    177a:	08 94       	sec
    177c:	e1 1c       	adc	r14, r1
    177e:	f1 1c       	adc	r15, r1
		j++;
    1780:	21 96       	adiw	r28, 0x01	; 1
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <write_data_to_eeprom+0xba>
		}
		j=0;
	}
	
	while(j < remainder) {
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
    1784:	18 2d       	mov	r17, r8
    1786:	1c 0d       	add	r17, r12
			j++;
		}
		j=0;
	}
	
	while(j < remainder) {
    1788:	ca 15       	cp	r28, r10
    178a:	db 05       	cpc	r29, r11
    178c:	74 f3       	brlt	.-36     	; 0x176a <write_data_to_eeprom+0x9c>
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
		array_counter++;
		j++;
	}
}	
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	bf 90       	pop	r11
    17a0:	af 90       	pop	r10
    17a2:	9f 90       	pop	r9
    17a4:	8f 90       	pop	r8
    17a6:	08 95       	ret

000017a8 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    17a8:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    17aa:	e0 ec       	ldi	r30, 0xC0	; 192
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	80 91 cf 01 	lds	r24, 0x01CF
    17b2:	87 fd       	sbrc	r24, 7
    17b4:	fa cf       	rjmp	.-12     	; 0x17aa <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    17b6:	83 e3       	ldi	r24, 0x33	; 51
    17b8:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    17ba:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    17be:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    17c0:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    17c2:	64 83       	std	Z+4, r22	; 0x04
}
    17c4:	08 95       	ret

000017c6 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    17c6:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    17c8:	e0 ec       	ldi	r30, 0xC0	; 192
    17ca:	f1 e0       	ldi	r31, 0x01	; 1
    17cc:	80 91 cf 01 	lds	r24, 0x01CF
    17d0:	87 fd       	sbrc	r24, 7
    17d2:	fa cf       	rjmp	.-12     	; 0x17c8 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    17d4:	83 e3       	ldi	r24, 0x33	; 51
    17d6:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    17d8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    17da:	12 82       	std	Z+2, r1	; 0x02
    17dc:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    17de:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    17e2:	8d 91       	ld	r24, X+
    17e4:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    17e6:	9f 5f       	subi	r25, 0xFF	; 255
    17e8:	90 32       	cpi	r25, 0x20	; 32
    17ea:	c9 f7       	brne	.-14     	; 0x17de <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    17ec:	08 95       	ret

000017ee <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    17ee:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    17f0:	e0 ec       	ldi	r30, 0xC0	; 192
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	80 91 cf 01 	lds	r24, 0x01CF
    17f8:	87 fd       	sbrc	r24, 7
    17fa:	fa cf       	rjmp	.-12     	; 0x17f0 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    17fc:	89 2f       	mov	r24, r25
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	55 e0       	ldi	r21, 0x05	; 5
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	5a 95       	dec	r21
    1808:	e1 f7       	brne	.-8      	; 0x1802 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    180a:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    180e:	89 2f       	mov	r24, r25
    1810:	8f 71       	andi	r24, 0x1F	; 31
    1812:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    1814:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1816:	85 e3       	ldi	r24, 0x35	; 53
    1818:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
    181e:	0f 93       	push	r16
    1820:	2f 93       	push	r18
    1822:	eb ec       	ldi	r30, 0xCB	; 203
    1824:	f1 e0       	ldi	r31, 0x01	; 1
    1826:	08 ed       	ldi	r16, 0xD8	; 216
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	04 bf       	out	0x34, r16	; 52
    182c:	20 83       	st	Z, r18
    182e:	2f 91       	pop	r18
    1830:	0f 91       	pop	r16
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
}
    1836:	08 95       	ret

00001838 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    1838:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    183a:	e0 ec       	ldi	r30, 0xC0	; 192
    183c:	f1 e0       	ldi	r31, 0x01	; 1
    183e:	80 91 cf 01 	lds	r24, 0x01CF
    1842:	87 fd       	sbrc	r24, 7
    1844:	fa cf       	rjmp	.-12     	; 0x183a <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    1846:	89 2f       	mov	r24, r25
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	65 e0       	ldi	r22, 0x05	; 5
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	6a 95       	dec	r22
    1852:	e1 f7       	brne	.-8      	; 0x184c <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    1854:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1858:	89 2f       	mov	r24, r25
    185a:	8f 71       	andi	r24, 0x1F	; 31
    185c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    185e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    1860:	82 e3       	ldi	r24, 0x32	; 50
    1862:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1864:	ef 93       	push	r30
    1866:	ff 93       	push	r31
    1868:	0f 93       	push	r16
    186a:	2f 93       	push	r18
    186c:	eb ec       	ldi	r30, 0xCB	; 203
    186e:	f1 e0       	ldi	r31, 0x01	; 1
    1870:	08 ed       	ldi	r16, 0xD8	; 216
    1872:	21 e0       	ldi	r18, 0x01	; 1
    1874:	04 bf       	out	0x34, r16	; 52
    1876:	20 83       	st	Z, r18
    1878:	2f 91       	pop	r18
    187a:	0f 91       	pop	r16
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
}
    1880:	08 95       	ret

00001882 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    1882:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1884:	e0 ec       	ldi	r30, 0xC0	; 192
    1886:	f1 e0       	ldi	r31, 0x01	; 1
    1888:	80 91 cf 01 	lds	r24, 0x01CF
    188c:	87 fd       	sbrc	r24, 7
    188e:	fa cf       	rjmp	.-12     	; 0x1884 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    1890:	89 2f       	mov	r24, r25
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	75 e0       	ldi	r23, 0x05	; 5
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	7a 95       	dec	r23
    189c:	e1 f7       	brne	.-8      	; 0x1896 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    189e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    18a2:	89 2f       	mov	r24, r25
    18a4:	8f 71       	andi	r24, 0x1F	; 31
    18a6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    18a8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    18aa:	84 e3       	ldi	r24, 0x34	; 52
    18ac:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    18ae:	ef 93       	push	r30
    18b0:	ff 93       	push	r31
    18b2:	0f 93       	push	r16
    18b4:	2f 93       	push	r18
    18b6:	eb ec       	ldi	r30, 0xCB	; 203
    18b8:	f1 e0       	ldi	r31, 0x01	; 1
    18ba:	08 ed       	ldi	r16, 0xD8	; 216
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	04 bf       	out	0x34, r16	; 52
    18c0:	20 83       	st	Z, r18
    18c2:	2f 91       	pop	r18
    18c4:	0f 91       	pop	r16
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
}
    18ca:	08 95       	ret

000018cc <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    18cc:	80 91 cf 01 	lds	r24, 0x01CF
    18d0:	87 fd       	sbrc	r24, 7
    18d2:	fc cf       	rjmp	.-8      	; 0x18cc <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    18d4:	80 e3       	ldi	r24, 0x30	; 48
    18d6:	e0 ec       	ldi	r30, 0xC0	; 192
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	0f 93       	push	r16
    18e2:	2f 93       	push	r18
    18e4:	eb ec       	ldi	r30, 0xCB	; 203
    18e6:	f1 e0       	ldi	r31, 0x01	; 1
    18e8:	08 ed       	ldi	r16, 0xD8	; 216
    18ea:	21 e0       	ldi	r18, 0x01	; 1
    18ec:	04 bf       	out	0x34, r16	; 52
    18ee:	20 83       	st	Z, r18
    18f0:	2f 91       	pop	r18
    18f2:	0f 91       	pop	r16
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
}
    18f8:	08 95       	ret

000018fa <main>:

// Includes all header files for libraries/drivers
#include "brainlink.h"

int main(void)
{
    18fa:	2f 92       	push	r2
    18fc:	3f 92       	push	r3
    18fe:	4f 92       	push	r4
    1900:	5f 92       	push	r5
    1902:	6f 92       	push	r6
    1904:	7f 92       	push	r7
    1906:	8f 92       	push	r8
    1908:	9f 92       	push	r9
    190a:	af 92       	push	r10
    190c:	bf 92       	push	r11
    190e:	cf 92       	push	r12
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	a3 97       	sbiw	r28, 0x23	; 35
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	de bf       	out	0x3e, r29	; 62

	
	long int time_out=0; // Counter which counts to a preset level corresponding to roughly 1 minute
	
	// Initialize system
	init_clock();
    1928:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <init_clock>
	
	init_led();
    192c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init_led>

	init_adc();
    1930:	0e 94 87 02 	call	0x50e	; 0x50e <init_adc>
	
	init_ir();
    1934:	0e 94 de 02 	call	0x5bc	; 0x5bc <init_ir>
	
	init_BT();
    1938:	0e 94 ab 04 	call	0x956	; 0x956 <init_BT>
	
	init_dac();
    193c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <init_dac>
	
	init_buzzer();
    1940:	0e 94 44 07 	call	0xe88	; 0xe88 <init_buzzer>
		
	initAccel();
    1944:	0e 94 35 06 	call	0xc6a	; 0xc6a <initAccel>

	init_aux_uart(131, -3); // Set the auxiliary uart to 9600 8n1
    1948:	83 e8       	ldi	r24, 0x83	; 131
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	6d ef       	ldi	r22, 0xFD	; 253
    194e:	0e 94 30 01 	call	0x260	; 0x260 <init_aux_uart>
	
	EEPROM_DisableMapping();
    1952:	80 91 cc 01 	lds	r24, 0x01CC
    1956:	87 7f       	andi	r24, 0xF7	; 247
    1958:	e0 ec       	ldi	r30, 0xC0	; 192
    195a:	f1 e0       	ldi	r31, 0x01	; 1
    195c:	84 87       	std	Z+12, r24	; 0x0c

	// Enable global interrupts
	sei();
    195e:	78 94       	sei
    1960:	cc 24       	eor	r12, r12
    1962:	dd 24       	eor	r13, r13
    1964:	85 e4       	ldi	r24, 0x45	; 69
    1966:	88 2e       	mov	r8, r24

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
    1968:	2f ef       	ldi	r18, 0xFF	; 255
    196a:	20 93 39 09 	sts	0x0939, r18
	TCD0.CCBBUFH = 255-blue;
    196e:	20 93 3b 09 	sts	0x093B, r18
	TCD0.CCCBUFH = 255-green;
    1972:	20 93 3d 09 	sts	0x093D, r18
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1976:	e0 e4       	ldi	r30, 0x40	; 64
    1978:	f8 e0       	ldi	r31, 0x08	; 8
    197a:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
    197c:	f8 94       	cli
	TCC0.CCA = 0x0000;
    197e:	e0 e0       	ldi	r30, 0x00	; 0
    1980:	f8 e0       	ldi	r31, 0x08	; 8
    1982:	10 a6       	std	Z+40, r1	; 0x28
    1984:	11 a6       	std	Z+41, r1	; 0x29
	sei();
    1986:	78 94       	sei
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1988:	80 91 b1 09 	lds	r24, 0x09B1
    198c:	85 ff       	sbrs	r24, 5
    198e:	fc cf       	rjmp	.-8      	; 0x1988 <main+0x8e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1990:	32 e4       	ldi	r19, 0x42	; 66
    1992:	30 93 b0 09 	sts	0x09B0, r19
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1996:	80 91 b1 09 	lds	r24, 0x09B1
    199a:	85 ff       	sbrs	r24, 5
    199c:	fc cf       	rjmp	.-8      	; 0x1996 <main+0x9c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    199e:	4c e4       	ldi	r20, 0x4C	; 76
    19a0:	40 93 b0 09 	sts	0x09B0, r20
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    19a4:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    19a8:	80 91 08 21 	lds	r24, 0x2108

		// Sing a BL song in idle mode so you can be found. Stop as soon as you get a *
		while(choice != 42) {
			uart_putchar(&BT_USART, 'B');
			uart_putchar(&BT_USART, 'L');
			if (USART_RXBufferData_Available(&BT_data)) {
    19ac:	98 17       	cp	r25, r24
    19ae:	29 f1       	breq	.+74     	; 0x19fa <main+0x100>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    19b0:	e0 91 08 21 	lds	r30, 0x2108
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	eb 5f       	subi	r30, 0xFB	; 251
    19b8:	ff 4d       	sbci	r31, 0xDF	; 223
    19ba:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    19bc:	80 91 08 21 	lds	r24, 0x2108
    19c0:	8f 5f       	subi	r24, 0xFF	; 255
    19c2:	80 93 08 21 	sts	0x2108, r24
				choice = USART_RXBuffer_GetByte(&BT_data);
				if (choice == 128) {
    19c6:	90 38       	cpi	r25, 0x80	; 128
    19c8:	81 f4       	brne	.+32     	; 0x19ea <main+0xf0>
}

// Sets the baud rate if the aux serial port is already set up
void set_aux_baud_rate(int baud, char scale) 
{
	USART_Baudrate_Set(&AUX_USART, baud, scale);
    19ca:	53 e8       	ldi	r21, 0x83	; 131
    19cc:	50 93 a6 08 	sts	0x08A6, r21
    19d0:	60 ed       	ldi	r22, 0xD0	; 208
    19d2:	60 93 a7 08 	sts	0x08A7, r22
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    19d6:	80 91 a1 08 	lds	r24, 0x08A1
    19da:	85 ff       	sbrs	r24, 5
    19dc:	fc cf       	rjmp	.-8      	; 0x19d6 <main+0xdc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    19de:	80 e8       	ldi	r24, 0x80	; 128
    19e0:	80 93 a0 08 	sts	0x08A0, r24
                                    // Something is trying to connect directly to an iRobot
                                    set_aux_baud_rate( ROOMBA_UART_SETTINGS );
                                    uart_putchar(&AUX_USART, 128); // pass through to iRobot
                                    serial_bridge(); // currently never returns
    19e4:	0e 94 c9 01 	call	0x392	; 0x392 <serial_bridge>
    19e8:	08 c0       	rjmp	.+16     	; 0x19fa <main+0x100>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    19ea:	80 91 b1 09 	lds	r24, 0x09B1
    19ee:	85 ff       	sbrs	r24, 5
    19f0:	fc cf       	rjmp	.-8      	; 0x19ea <main+0xf0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    19f2:	90 93 b0 09 	sts	0x09B0, r25
                                }
                                else {
				    uart_putchar(&BT_USART, choice);
                                }
			}
			if (choice != 42)
    19f6:	9a 32       	cpi	r25, 0x2A	; 42
    19f8:	49 f0       	breq	.+18     	; 0x1a0c <main+0x112>
    19fa:	88 e8       	ldi	r24, 0x88	; 136
    19fc:	93 e1       	ldi	r25, 0x13	; 19
    19fe:	e0 e2       	ldi	r30, 0x20	; 32
    1a00:	f3 e0       	ldi	r31, 0x03	; 3
    1a02:	31 97       	sbiw	r30, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <main+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	d1 f7       	brne	.-12     	; 0x19fe <main+0x104>
    1a0a:	be cf       	rjmp	.-132    	; 0x1988 <main+0x8e>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a0 e0       	ldi	r26, 0x00	; 0
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	02 e5       	ldi	r16, 0x52	; 82
    1a16:	90 2e       	mov	r9, r16

// Sets up PWM to a given frequency (both channels must share the same frequency)
void set_pwm() {

	// Set clock to 32 MHz
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
    1a18:	41 2c       	mov	r4, r1
    1a1a:	1a e0       	ldi	r17, 0x0A	; 10
    1a1c:	51 2e       	mov	r5, r17
		}

		// Active part of the program - listens for commands and responds as necessary
		while(exit == 0) {
			// Checks if we haven't heard anything for a long time, in which case we exit loop and go back to idle mode
			time_out++;
    1a1e:	9c 01       	movw	r18, r24
    1a20:	ad 01       	movw	r20, r26
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	4f 4f       	sbci	r20, 0xFF	; 255
    1a28:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2a:	28 a3       	std	Y+32, r18	; 0x20
    1a2c:	39 a3       	std	Y+33, r19	; 0x21
    1a2e:	4a a3       	std	Y+34, r20	; 0x22
    1a30:	5b a3       	std	Y+35, r21	; 0x23
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1a32:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1a36:	80 91 08 21 	lds	r24, 0x2108
			if(time_out > 33840000) {
				exit = 1;
			}
	
			// Check for a command character
			if (USART_RXBufferData_Available(&BT_data)) {
    1a3a:	98 17       	cp	r25, r24
    1a3c:	11 f4       	brne	.+4      	; 0x1a42 <main+0x148>
    1a3e:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__stack+0x3e1>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1a42:	e0 91 08 21 	lds	r30, 0x2108
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	eb 5f       	subi	r30, 0xFB	; 251
    1a4a:	ff 4d       	sbci	r31, 0xDF	; 223
    1a4c:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    1a4e:	80 91 08 21 	lds	r24, 0x2108
    1a52:	8f 5f       	subi	r24, 0xFF	; 255
    1a54:	80 93 08 21 	sts	0x2108, r24
			}
			else {
				choice = 0;
			}
			// If it exists, act on command
			if(choice != 0) {
    1a58:	99 23       	and	r25, r25
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <main+0x166>
    1a5c:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <__stack+0x3e1>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1a60:	80 91 b1 09 	lds	r24, 0x09B1
    1a64:	85 ff       	sbrs	r24, 5
    1a66:	fc cf       	rjmp	.-8      	; 0x1a60 <main+0x166>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1a68:	90 93 b0 09 	sts	0x09B0, r25
				time_out = 0;
				// Return the command so the host knows we got it
				uart_putchar(&BT_USART, choice);

				// Giant switch statement to decide what to do with the command
				switch(choice) {
    1a6c:	93 35       	cpi	r25, 0x53	; 83
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <main+0x178>
    1a70:	61 c4       	rjmp	.+2242   	; 0x2334 <main+0xa3a>
    1a72:	94 35       	cpi	r25, 0x54	; 84
    1a74:	c8 f5       	brcc	.+114    	; 0x1ae8 <main+0x1ee>
    1a76:	99 34       	cpi	r25, 0x49	; 73
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <main+0x182>
    1a7a:	ab c1       	rjmp	.+854    	; 0x1dd2 <main+0x4d8>
    1a7c:	9a 34       	cpi	r25, 0x4A	; 74
    1a7e:	f8 f4       	brcc	.+62     	; 0x1abe <main+0x1c4>
    1a80:	92 34       	cpi	r25, 0x42	; 66
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <main+0x18c>
    1a84:	89 c0       	rjmp	.+274    	; 0x1b98 <main+0x29e>
    1a86:	93 34       	cpi	r25, 0x43	; 67
    1a88:	90 f4       	brcc	.+36     	; 0x1aae <main+0x1b4>
    1a8a:	9e 33       	cpi	r25, 0x3E	; 62
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <main+0x196>
    1a8e:	9d c5       	rjmp	.+2874   	; 0x25ca <main+0xcd0>
    1a90:	9f 33       	cpi	r25, 0x3F	; 63
    1a92:	40 f4       	brcc	.+16     	; 0x1aa4 <main+0x1aa>
    1a94:	91 32       	cpi	r25, 0x21	; 33
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <main+0x1a0>
    1a98:	39 c4       	rjmp	.+2162   	; 0x230c <main+0xa12>
    1a9a:	9c 33       	cpi	r25, 0x3C	; 60
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <main+0x1a8>
    1a9e:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1aa2:	da c5       	rjmp	.+2996   	; 0x2658 <main+0xd5e>
    1aa4:	91 34       	cpi	r25, 0x41	; 65
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <main+0x1b2>
    1aa8:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1aac:	54 c0       	rjmp	.+168    	; 0x1b56 <main+0x25c>
    1aae:	93 34       	cpi	r25, 0x43	; 67
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <main+0x1ba>
    1ab2:	a3 c7       	rjmp	.+3910   	; 0x29fa <__stack+0x1fb>
    1ab4:	97 34       	cpi	r25, 0x47	; 71
    1ab6:	11 f0       	breq	.+4      	; 0x1abc <main+0x1c2>
    1ab8:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1abc:	d2 c4       	rjmp	.+2468   	; 0x2462 <main+0xb68>
    1abe:	90 35       	cpi	r25, 0x50	; 80
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <main+0x1ca>
    1ac2:	fb c5       	rjmp	.+3062   	; 0x26ba <main+0xdc0>
    1ac4:	91 35       	cpi	r25, 0x51	; 81
    1ac6:	40 f4       	brcc	.+16     	; 0x1ad8 <main+0x1de>
    1ac8:	9c 34       	cpi	r25, 0x4C	; 76
    1aca:	09 f4       	brne	.+2      	; 0x1ace <main+0x1d4>
    1acc:	c1 c0       	rjmp	.+386    	; 0x1c50 <main+0x356>
    1ace:	9f 34       	cpi	r25, 0x4F	; 79
    1ad0:	11 f0       	breq	.+4      	; 0x1ad6 <main+0x1dc>
    1ad2:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1ad6:	13 c1       	rjmp	.+550    	; 0x1cfe <main+0x404>
    1ad8:	91 35       	cpi	r25, 0x51	; 81
    1ada:	09 f4       	brne	.+2      	; 0x1ade <main+0x1e4>
    1adc:	45 cf       	rjmp	.-374    	; 0x1968 <main+0x6e>
    1ade:	92 35       	cpi	r25, 0x52	; 82
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <main+0x1ec>
    1ae2:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1ae6:	1f c4       	rjmp	.+2110   	; 0x2326 <main+0xa2c>
    1ae8:	94 36       	cpi	r25, 0x64	; 100
    1aea:	09 f4       	brne	.+2      	; 0x1aee <main+0x1f4>
    1aec:	07 c7       	rjmp	.+3598   	; 0x28fc <__stack+0xfd>
    1aee:	95 36       	cpi	r25, 0x65	; 101
    1af0:	a8 f4       	brcc	.+42     	; 0x1b1c <main+0x222>
    1af2:	98 35       	cpi	r25, 0x58	; 88
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <main+0x1fe>
    1af6:	c6 c0       	rjmp	.+396    	; 0x1c84 <main+0x38a>
    1af8:	99 35       	cpi	r25, 0x59	; 89
    1afa:	40 f4       	brcc	.+16     	; 0x1b0c <main+0x212>
    1afc:	94 35       	cpi	r25, 0x54	; 84
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <main+0x208>
    1b00:	b0 c0       	rjmp	.+352    	; 0x1c62 <main+0x368>
    1b02:	96 35       	cpi	r25, 0x56	; 86
    1b04:	11 f0       	breq	.+4      	; 0x1b0a <main+0x210>
    1b06:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1b0a:	b3 c0       	rjmp	.+358    	; 0x1c72 <main+0x378>
    1b0c:	9a 35       	cpi	r25, 0x5A	; 90
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <main+0x218>
    1b10:	ee c7       	rjmp	.+4060   	; 0x2aee <__stack+0x2ef>
    1b12:	92 36       	cpi	r25, 0x62	; 98
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <main+0x220>
    1b16:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1b1a:	8f c0       	rjmp	.+286    	; 0x1c3a <main+0x340>
    1b1c:	90 37       	cpi	r25, 0x70	; 112
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <main+0x228>
    1b20:	16 c6       	rjmp	.+3116   	; 0x274e <main+0xe54>
    1b22:	91 37       	cpi	r25, 0x71	; 113
    1b24:	40 f4       	brcc	.+16     	; 0x1b36 <main+0x23c>
    1b26:	97 36       	cpi	r25, 0x67	; 103
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <main+0x232>
    1b2a:	29 c5       	rjmp	.+2642   	; 0x257e <main+0xc84>
    1b2c:	99 36       	cpi	r25, 0x69	; 105
    1b2e:	11 f0       	breq	.+4      	; 0x1b34 <main+0x23a>
    1b30:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1b34:	0d c0       	rjmp	.+26     	; 0x1b50 <main+0x256>
    1b36:	93 37       	cpi	r25, 0x73	; 115
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <main+0x242>
    1b3a:	26 c4       	rjmp	.+2124   	; 0x2388 <main+0xa8e>
    1b3c:	94 37       	cpi	r25, 0x74	; 116
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <main+0x24a>
    1b40:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__stack+0x35d>
    1b44:	92 37       	cpi	r25, 0x72	; 114
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <main+0x252>
    1b48:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__stack+0x3d7>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	e5 c7       	rjmp	.+4042   	; 0x2b1a <__stack+0x31b>
    1b50:	00 e0       	ldi	r16, 0x00	; 0
    1b52:	10 e0       	ldi	r17, 0x00	; 0
    1b54:	78 c3       	rjmp	.+1776   	; 0x2246 <main+0x94c>
					// Return the currect accelerometer data - X, Y, Z, and status (contains tapped and shaken bits)
					case 'A':
						updateAccel();
    1b56:	0e 94 09 06 	call	0xc12	; 0xc12 <updateAccel>
						uart_putchar(&BT_USART, _acc.x);
    1b5a:	90 91 09 21 	lds	r25, 0x2109
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b5e:	80 91 b1 09 	lds	r24, 0x09B1
    1b62:	85 ff       	sbrs	r24, 5
    1b64:	fc cf       	rjmp	.-8      	; 0x1b5e <main+0x264>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b66:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.y);
    1b6a:	90 91 0a 21 	lds	r25, 0x210A
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b6e:	80 91 b1 09 	lds	r24, 0x09B1
    1b72:	85 ff       	sbrs	r24, 5
    1b74:	fc cf       	rjmp	.-8      	; 0x1b6e <main+0x274>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b76:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.z);
    1b7a:	90 91 0b 21 	lds	r25, 0x210B
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b7e:	80 91 b1 09 	lds	r24, 0x09B1
    1b82:	85 ff       	sbrs	r24, 5
    1b84:	fc cf       	rjmp	.-8      	; 0x1b7e <main+0x284>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b86:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.status);
    1b8a:	90 91 0c 21 	lds	r25, 0x210C
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b8e:	80 91 b1 09 	lds	r24, 0x09B1
    1b92:	85 ff       	sbrs	r24, 5
    1b94:	fc cf       	rjmp	.-8      	; 0x1b8e <main+0x294>
    1b96:	b0 c0       	rjmp	.+352    	; 0x1cf8 <main+0x3fe>
						break;
					// Set the buzzer
					case 'B':
						temph = uart_getchar_timeout(&BT_USART);
    1b98:	80 eb       	ldi	r24, 0xB0	; 176
    1b9a:	99 e0       	ldi	r25, 0x09	; 9
    1b9c:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1ba0:	8c 01       	movw	r16, r24
						// If temph is 256, it means we didn't get a follow up character and timed out, so respond with ERR
						if(temph == 256) {
    1ba2:	31 e0       	ldi	r19, 0x01	; 1
    1ba4:	80 30       	cpi	r24, 0x00	; 0
    1ba6:	93 07       	cpc	r25, r19
    1ba8:	89 f4       	brne	.+34     	; 0x1bcc <main+0x2d2>
    1baa:	80 91 b1 09 	lds	r24, 0x09B1
    1bae:	85 ff       	sbrs	r24, 5
    1bb0:	fc cf       	rjmp	.-8      	; 0x1baa <main+0x2b0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bb2:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bb6:	80 91 b1 09 	lds	r24, 0x09B1
    1bba:	85 ff       	sbrs	r24, 5
    1bbc:	fc cf       	rjmp	.-8      	; 0x1bb6 <main+0x2bc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bbe:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bc2:	80 91 b1 09 	lds	r24, 0x09B1
    1bc6:	85 ff       	sbrs	r24, 5
    1bc8:	fc cf       	rjmp	.-8      	; 0x1bc2 <main+0x2c8>
    1bca:	ef c7       	rjmp	.+4062   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bcc:	80 91 b1 09 	lds	r24, 0x09B1
    1bd0:	85 ff       	sbrs	r24, 5
    1bd2:	fc cf       	rjmp	.-8      	; 0x1bcc <main+0x2d2>
    1bd4:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1bd8:	80 eb       	ldi	r24, 0xB0	; 176
    1bda:	99 e0       	ldi	r25, 0x09	; 9
    1bdc:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1be0:	9c 01       	movw	r18, r24
    1be2:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	80 30       	cpi	r24, 0x00	; 0
    1be8:	94 07       	cpc	r25, r20
    1bea:	89 f4       	brne	.+34     	; 0x1c0e <main+0x314>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bec:	80 91 b1 09 	lds	r24, 0x09B1
    1bf0:	85 ff       	sbrs	r24, 5
    1bf2:	fc cf       	rjmp	.-8      	; 0x1bec <main+0x2f2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1bf4:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bf8:	80 91 b1 09 	lds	r24, 0x09B1
    1bfc:	85 ff       	sbrs	r24, 5
    1bfe:	fc cf       	rjmp	.-8      	; 0x1bf8 <main+0x2fe>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c00:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c04:	80 91 b1 09 	lds	r24, 0x09B1
    1c08:	85 ff       	sbrs	r24, 5
    1c0a:	fc cf       	rjmp	.-8      	; 0x1c04 <main+0x30a>
    1c0c:	ce c7       	rjmp	.+3996   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c0e:	80 91 b1 09 	lds	r24, 0x09B1
    1c12:	85 ff       	sbrs	r24, 5
    1c14:	fc cf       	rjmp	.-8      	; 0x1c0e <main+0x314>
    1c16:	20 93 b0 09 	sts	0x09B0, r18
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						frequency = ((temph)<<8) + templ;	
    1c1a:	90 2f       	mov	r25, r16
    1c1c:	88 27       	eor	r24, r24
    1c1e:	28 0f       	add	r18, r24
    1c20:	39 1f       	adc	r19, r25
}

// Set buzzer enables the waveform and sets it to a given frequency
void set_buzzer(int frequency) {
	// Enable waveform output
	TCD1.CTRLB |= TC1_CCAEN_bm;
    1c22:	80 91 41 09 	lds	r24, 0x0941
    1c26:	80 61       	ori	r24, 0x10	; 16
    1c28:	80 93 41 09 	sts	0x0941, r24
	// Set the frequency
	cli();
    1c2c:	f8 94       	cli
	TCD1.CCA = frequency;
    1c2e:	20 93 68 09 	sts	0x0968, r18
    1c32:	30 93 69 09 	sts	0x0969, r19
	sei();
    1c36:	78 94       	sei
    1c38:	ce c7       	rjmp	.+3996   	; 0x2bd6 <__stack+0x3d7>
}

// Disables the buzzer, and if the output is on, turns it off
void turn_off_buzzer() {
	// Disable the Waveform output
	TCD1.CTRLB &= (~TC1_CCAEN_bm);
    1c3a:	80 91 41 09 	lds	r24, 0x0941
    1c3e:	8f 7e       	andi	r24, 0xEF	; 239
    1c40:	80 93 41 09 	sts	0x0941, r24
	// Turn off the pin just in case
	PORTD.OUTCLR |= PIN4_bm;
    1c44:	80 91 66 06 	lds	r24, 0x0666
    1c48:	80 61       	ori	r24, 0x10	; 16
    1c4a:	80 93 66 06 	sts	0x0666, r24
    1c4e:	c3 c7       	rjmp	.+3974   	; 0x2bd6 <__stack+0x3d7>
					case 'b':
						turn_off_buzzer();
						break;
					// Returns the value of the light sensor
					case 'L':
						sensor[0] = read_analog(LIGHT);
    1c50:	80 e3       	ldi	r24, 0x30	; 48
    1c52:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1c56:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c58:	80 91 b1 09 	lds	r24, 0x09B1
    1c5c:	85 ff       	sbrs	r24, 5
    1c5e:	fc cf       	rjmp	.-8      	; 0x1c58 <main+0x35e>
    1c60:	4b c0       	rjmp	.+150    	; 0x1cf8 <main+0x3fe>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the Xmegas internal temperature read - this is undocumented because the value returned is very erratic
					case 'T':
						sensor[0] = read_internal_temperature();
    1c62:	0e 94 cc 02 	call	0x598	; 0x598 <read_internal_temperature>
    1c66:	98 2f       	mov	r25, r24
    1c68:	80 91 b1 09 	lds	r24, 0x09B1
    1c6c:	85 ff       	sbrs	r24, 5
    1c6e:	fc cf       	rjmp	.-8      	; 0x1c68 <main+0x36e>
    1c70:	43 c0       	rjmp	.+134    	; 0x1cf8 <main+0x3fe>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the battery voltage
					case 'V':
						sensor[0] = read_analog(BATT_VOLT);
    1c72:	88 e3       	ldi	r24, 0x38	; 56
    1c74:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1c78:	98 2f       	mov	r25, r24
    1c7a:	80 91 b1 09 	lds	r24, 0x09B1
    1c7e:	85 ff       	sbrs	r24, 5
    1c80:	fc cf       	rjmp	.-8      	; 0x1c7a <main+0x380>
    1c82:	3a c0       	rjmp	.+116    	; 0x1cf8 <main+0x3fe>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the readings on all six ADC ports
					case 'X':
						sensor[0] = read_analog(AUX0);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1c8a:	98 2f       	mov	r25, r24
    1c8c:	80 91 b1 09 	lds	r24, 0x09B1
    1c90:	85 ff       	sbrs	r24, 5
    1c92:	fc cf       	rjmp	.-8      	; 0x1c8c <main+0x392>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c94:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[0]);
						sensor[1] = read_analog(AUX1);
    1c98:	88 e0       	ldi	r24, 0x08	; 8
    1c9a:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1c9e:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ca0:	80 91 b1 09 	lds	r24, 0x09B1
    1ca4:	85 ff       	sbrs	r24, 5
    1ca6:	fc cf       	rjmp	.-8      	; 0x1ca0 <main+0x3a6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ca8:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[1]);
						sensor[2] = read_analog(AUX2);
    1cac:	80 e1       	ldi	r24, 0x10	; 16
    1cae:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1cb2:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cb4:	80 91 b1 09 	lds	r24, 0x09B1
    1cb8:	85 ff       	sbrs	r24, 5
    1cba:	fc cf       	rjmp	.-8      	; 0x1cb4 <main+0x3ba>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cbc:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[2]);
						sensor[3] = read_analog(AUX3);
    1cc0:	88 e1       	ldi	r24, 0x18	; 24
    1cc2:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1cc6:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cc8:	80 91 b1 09 	lds	r24, 0x09B1
    1ccc:	85 ff       	sbrs	r24, 5
    1cce:	fc cf       	rjmp	.-8      	; 0x1cc8 <main+0x3ce>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cd0:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[3]);
						sensor[4] = read_analog(AUX4);
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1cda:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cdc:	80 91 b1 09 	lds	r24, 0x09B1
    1ce0:	85 ff       	sbrs	r24, 5
    1ce2:	fc cf       	rjmp	.-8      	; 0x1cdc <main+0x3e2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ce4:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[4]);
						sensor[5] = read_analog(AUX4);
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	0e 94 b3 02 	call	0x566	; 0x566 <read_analog>
    1cee:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cf0:	80 91 b1 09 	lds	r24, 0x09B1
    1cf4:	85 ff       	sbrs	r24, 5
    1cf6:	fc cf       	rjmp	.-8      	; 0x1cf0 <main+0x3f6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cf8:	90 93 b0 09 	sts	0x09B0, r25
    1cfc:	6c c7       	rjmp	.+3800   	; 0x2bd6 <__stack+0x3d7>
						uart_putchar(&BT_USART, sensor[5]);
						break;
					// Sets the full-color LED
					case 'O':
						red = uart_getchar_timeout(&BT_USART);
    1cfe:	80 eb       	ldi	r24, 0xB0	; 176
    1d00:	99 e0       	ldi	r25, 0x09	; 9
    1d02:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(red == 256) {
    1d06:	51 e0       	ldi	r21, 0x01	; 1
    1d08:	80 30       	cpi	r24, 0x00	; 0
    1d0a:	95 07       	cpc	r25, r21
    1d0c:	89 f4       	brne	.+34     	; 0x1d30 <main+0x436>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d0e:	80 91 b1 09 	lds	r24, 0x09B1
    1d12:	85 ff       	sbrs	r24, 5
    1d14:	fc cf       	rjmp	.-8      	; 0x1d0e <main+0x414>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d16:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d1a:	80 91 b1 09 	lds	r24, 0x09B1
    1d1e:	85 ff       	sbrs	r24, 5
    1d20:	fc cf       	rjmp	.-8      	; 0x1d1a <main+0x420>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d22:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d26:	80 91 b1 09 	lds	r24, 0x09B1
    1d2a:	85 ff       	sbrs	r24, 5
    1d2c:	fc cf       	rjmp	.-8      	; 0x1d26 <main+0x42c>
    1d2e:	3d c7       	rjmp	.+3706   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, red);
    1d30:	08 2f       	mov	r16, r24
    1d32:	80 91 b1 09 	lds	r24, 0x09B1
    1d36:	85 ff       	sbrs	r24, 5
    1d38:	fc cf       	rjmp	.-8      	; 0x1d32 <main+0x438>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d3a:	00 93 b0 09 	sts	0x09B0, r16
						}
						green = uart_getchar_timeout(&BT_USART);
    1d3e:	80 eb       	ldi	r24, 0xB0	; 176
    1d40:	99 e0       	ldi	r25, 0x09	; 9
    1d42:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(green == 256) {
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	80 30       	cpi	r24, 0x00	; 0
    1d4a:	96 07       	cpc	r25, r22
    1d4c:	89 f4       	brne	.+34     	; 0x1d70 <main+0x476>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d4e:	80 91 b1 09 	lds	r24, 0x09B1
    1d52:	85 ff       	sbrs	r24, 5
    1d54:	fc cf       	rjmp	.-8      	; 0x1d4e <main+0x454>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d56:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d5a:	80 91 b1 09 	lds	r24, 0x09B1
    1d5e:	85 ff       	sbrs	r24, 5
    1d60:	fc cf       	rjmp	.-8      	; 0x1d5a <main+0x460>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d62:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d66:	80 91 b1 09 	lds	r24, 0x09B1
    1d6a:	85 ff       	sbrs	r24, 5
    1d6c:	fc cf       	rjmp	.-8      	; 0x1d66 <main+0x46c>
    1d6e:	1d c7       	rjmp	.+3642   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, green);
    1d70:	18 2f       	mov	r17, r24
    1d72:	80 91 b1 09 	lds	r24, 0x09B1
    1d76:	85 ff       	sbrs	r24, 5
    1d78:	fc cf       	rjmp	.-8      	; 0x1d72 <main+0x478>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d7a:	10 93 b0 09 	sts	0x09B0, r17
						}
						blue = uart_getchar_timeout(&BT_USART);
    1d7e:	80 eb       	ldi	r24, 0xB0	; 176
    1d80:	99 e0       	ldi	r25, 0x09	; 9
    1d82:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(blue == 256) {
    1d86:	e1 e0       	ldi	r30, 0x01	; 1
    1d88:	80 30       	cpi	r24, 0x00	; 0
    1d8a:	9e 07       	cpc	r25, r30
    1d8c:	89 f4       	brne	.+34     	; 0x1db0 <main+0x4b6>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d8e:	80 91 b1 09 	lds	r24, 0x09B1
    1d92:	85 ff       	sbrs	r24, 5
    1d94:	fc cf       	rjmp	.-8      	; 0x1d8e <main+0x494>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d96:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d9a:	80 91 b1 09 	lds	r24, 0x09B1
    1d9e:	85 ff       	sbrs	r24, 5
    1da0:	fc cf       	rjmp	.-8      	; 0x1d9a <main+0x4a0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1da2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1da6:	80 91 b1 09 	lds	r24, 0x09B1
    1daa:	85 ff       	sbrs	r24, 5
    1dac:	fc cf       	rjmp	.-8      	; 0x1da6 <main+0x4ac>
    1dae:	fd c6       	rjmp	.+3578   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, blue);
    1db0:	98 2f       	mov	r25, r24
    1db2:	80 91 b1 09 	lds	r24, 0x09B1
    1db6:	85 ff       	sbrs	r24, 5
    1db8:	fc cf       	rjmp	.-8      	; 0x1db2 <main+0x4b8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dba:	90 93 b0 09 	sts	0x09B0, r25

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
    1dbe:	00 95       	com	r16
    1dc0:	00 93 39 09 	sts	0x0939, r16
	TCD0.CCBBUFH = 255-blue;
    1dc4:	90 95       	com	r25
    1dc6:	90 93 3b 09 	sts	0x093B, r25
	TCD0.CCCBUFH = 255-green;
    1dca:	10 95       	com	r17
    1dcc:	10 93 3d 09 	sts	0x093D, r17
    1dd0:	02 c7       	rjmp	.+3588   	; 0x2bd6 <__stack+0x3d7>
						}
						set_led(red, green, blue);
						break;
					// Sets up the IR transmitter with signal characteristics
					case 'I':
						temph = uart_getchar_timeout(&BT_USART);
    1dd2:	80 eb       	ldi	r24, 0xB0	; 176
    1dd4:	99 e0       	ldi	r25, 0x09	; 9
    1dd6:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1dda:	8c 01       	movw	r16, r24
    1ddc:	5c 01       	movw	r10, r24
						if(temph == 256) {
    1dde:	f1 e0       	ldi	r31, 0x01	; 1
    1de0:	80 30       	cpi	r24, 0x00	; 0
    1de2:	9f 07       	cpc	r25, r31
    1de4:	89 f4       	brne	.+34     	; 0x1e08 <main+0x50e>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1de6:	80 91 b1 09 	lds	r24, 0x09B1
    1dea:	85 ff       	sbrs	r24, 5
    1dec:	fc cf       	rjmp	.-8      	; 0x1de6 <main+0x4ec>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dee:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1df2:	80 91 b1 09 	lds	r24, 0x09B1
    1df6:	85 ff       	sbrs	r24, 5
    1df8:	fc cf       	rjmp	.-8      	; 0x1df2 <main+0x4f8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dfa:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1dfe:	80 91 b1 09 	lds	r24, 0x09B1
    1e02:	85 ff       	sbrs	r24, 5
    1e04:	fc cf       	rjmp	.-8      	; 0x1dfe <main+0x504>
    1e06:	d1 c6       	rjmp	.+3490   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e08:	80 91 b1 09 	lds	r24, 0x09B1
    1e0c:	85 ff       	sbrs	r24, 5
    1e0e:	fc cf       	rjmp	.-8      	; 0x1e08 <main+0x50e>
    1e10:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1e14:	80 eb       	ldi	r24, 0xB0	; 176
    1e16:	99 e0       	ldi	r25, 0x09	; 9
    1e18:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	80 30       	cpi	r24, 0x00	; 0
    1e24:	94 07       	cpc	r25, r20
    1e26:	89 f4       	brne	.+34     	; 0x1e4a <main+0x550>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e28:	80 91 b1 09 	lds	r24, 0x09B1
    1e2c:	85 ff       	sbrs	r24, 5
    1e2e:	fc cf       	rjmp	.-8      	; 0x1e28 <main+0x52e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e30:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e34:	80 91 b1 09 	lds	r24, 0x09B1
    1e38:	85 ff       	sbrs	r24, 5
    1e3a:	fc cf       	rjmp	.-8      	; 0x1e34 <main+0x53a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e3c:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e40:	80 91 b1 09 	lds	r24, 0x09B1
    1e44:	85 ff       	sbrs	r24, 5
    1e46:	fc cf       	rjmp	.-8      	; 0x1e40 <main+0x546>
    1e48:	b0 c6       	rjmp	.+3424   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e4a:	80 91 b1 09 	lds	r24, 0x09B1
    1e4e:	85 ff       	sbrs	r24, 5
    1e50:	fc cf       	rjmp	.-8      	; 0x1e4a <main+0x550>
    1e52:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set the frequency of the IR carrier
						robotData.frequency = ((temph)<<8) + templ;
    1e56:	90 2f       	mov	r25, r16
    1e58:	88 27       	eor	r24, r24
    1e5a:	82 0f       	add	r24, r18
    1e5c:	93 1f       	adc	r25, r19
    1e5e:	80 93 1b 21 	sts	0x211B, r24
    1e62:	90 93 1c 21 	sts	0x211C, r25
}

// Sets the frequency of the IR carrier
void set_ir_carrier(int frequency) {
	
	cli();
    1e66:	f8 94       	cli
	TCC0.PERBUF = frequency;
    1e68:	80 93 36 08 	sts	0x0836, r24
    1e6c:	90 93 37 08 	sts	0x0837, r25
	sei();
    1e70:	78 94       	sei
						set_ir_carrier(robotData.frequency);
						templ = uart_getchar_timeout(&BT_USART);
    1e72:	80 eb       	ldi	r24, 0xB0	; 176
    1e74:	99 e0       	ldi	r25, 0x09	; 9
    1e76:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1e7a:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1e7c:	51 e0       	ldi	r21, 0x01	; 1
    1e7e:	80 30       	cpi	r24, 0x00	; 0
    1e80:	95 07       	cpc	r25, r21
    1e82:	89 f4       	brne	.+34     	; 0x1ea6 <main+0x5ac>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e84:	80 91 b1 09 	lds	r24, 0x09B1
    1e88:	85 ff       	sbrs	r24, 5
    1e8a:	fc cf       	rjmp	.-8      	; 0x1e84 <main+0x58a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e8c:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e90:	80 91 b1 09 	lds	r24, 0x09B1
    1e94:	85 ff       	sbrs	r24, 5
    1e96:	fc cf       	rjmp	.-8      	; 0x1e90 <main+0x596>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e98:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e9c:	80 91 b1 09 	lds	r24, 0x09B1
    1ea0:	85 ff       	sbrs	r24, 5
    1ea2:	fc cf       	rjmp	.-8      	; 0x1e9c <main+0x5a2>
    1ea4:	82 c6       	rjmp	.+3332   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
						// Set the length of the start up pulses
							robotData.startUpPulseLength = templ;
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	c0 92 1d 21 	sts	0x211D, r12
    1eac:	80 91 b1 09 	lds	r24, 0x09B1
    1eb0:	85 ff       	sbrs	r24, 5
    1eb2:	fc cf       	rjmp	.-8      	; 0x1eac <main+0x5b2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1eb4:	90 93 b0 09 	sts	0x09B0, r25
							uart_putchar(&BT_USART, robotData.startUpPulseLength);
						}
						if(robotData.startUpPulseLength > 16) {
    1eb8:	91 31       	cpi	r25, 0x11	; 17
    1eba:	38 f4       	brcc	.+14     	; 0x1eca <main+0x5d0>
    1ebc:	fe e1       	ldi	r31, 0x1E	; 30
    1ebe:	6f 2e       	mov	r6, r31
    1ec0:	f1 e2       	ldi	r31, 0x21	; 33
    1ec2:	7f 2e       	mov	r7, r31
    1ec4:	00 e0       	ldi	r16, 0x00	; 0
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	52 c0       	rjmp	.+164    	; 0x1f6e <main+0x674>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1eca:	80 91 b1 09 	lds	r24, 0x09B1
    1ece:	85 ff       	sbrs	r24, 5
    1ed0:	fc cf       	rjmp	.-8      	; 0x1eca <main+0x5d0>
    1ed2:	6b c6       	rjmp	.+3286   	; 0x2baa <__stack+0x3ab>
							break;
						}
						
						// Read in the start up pulse timing data
						for(i=0; i < robotData.startUpPulseLength; i++) {
							temph = uart_getchar_timeout(&BT_USART);
    1ed4:	80 eb       	ldi	r24, 0xB0	; 176
    1ed6:	99 e0       	ldi	r25, 0x09	; 9
    1ed8:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1edc:	f8 2e       	mov	r15, r24
    1ede:	5c 01       	movw	r10, r24
							if(temph == 256) {
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	a6 16       	cp	r10, r22
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	b6 06       	cpc	r11, r22
    1ee8:	89 f4       	brne	.+34     	; 0x1f0c <main+0x612>
    1eea:	80 91 b1 09 	lds	r24, 0x09B1
    1eee:	85 ff       	sbrs	r24, 5
    1ef0:	fc cf       	rjmp	.-8      	; 0x1eea <main+0x5f0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ef2:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ef6:	80 91 b1 09 	lds	r24, 0x09B1
    1efa:	85 ff       	sbrs	r24, 5
    1efc:	fc cf       	rjmp	.-8      	; 0x1ef6 <main+0x5fc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1efe:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f02:	80 91 b1 09 	lds	r24, 0x09B1
    1f06:	85 ff       	sbrs	r24, 5
    1f08:	fc cf       	rjmp	.-8      	; 0x1f02 <main+0x608>
    1f0a:	4f c6       	rjmp	.+3230   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f0c:	80 91 b1 09 	lds	r24, 0x09B1
    1f10:	85 ff       	sbrs	r24, 5
    1f12:	fc cf       	rjmp	.-8      	; 0x1f0c <main+0x612>
    1f14:	f0 92 b0 09 	sts	0x09B0, r15
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    1f18:	80 eb       	ldi	r24, 0xB0	; 176
    1f1a:	99 e0       	ldi	r25, 0x09	; 9
    1f1c:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1f20:	9c 01       	movw	r18, r24
    1f22:	6c 01       	movw	r12, r24
							if(templ == 256) {
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	20 30       	cpi	r18, 0x00	; 0
    1f28:	38 07       	cpc	r19, r24
    1f2a:	89 f4       	brne	.+34     	; 0x1f4e <main+0x654>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f2c:	80 91 b1 09 	lds	r24, 0x09B1
    1f30:	85 ff       	sbrs	r24, 5
    1f32:	fc cf       	rjmp	.-8      	; 0x1f2c <main+0x632>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f34:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f38:	80 91 b1 09 	lds	r24, 0x09B1
    1f3c:	85 ff       	sbrs	r24, 5
    1f3e:	fc cf       	rjmp	.-8      	; 0x1f38 <main+0x63e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f40:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f44:	80 91 b1 09 	lds	r24, 0x09B1
    1f48:	85 ff       	sbrs	r24, 5
    1f4a:	fc cf       	rjmp	.-8      	; 0x1f44 <main+0x64a>
    1f4c:	2e c6       	rjmp	.+3164   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f4e:	80 91 b1 09 	lds	r24, 0x09B1
    1f52:	85 ff       	sbrs	r24, 5
    1f54:	fc cf       	rjmp	.-8      	; 0x1f4e <main+0x654>
    1f56:	20 93 b0 09 	sts	0x09B0, r18
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.startUpPulse[i] = ((temph)<<8) + templ;
    1f5a:	3f 2c       	mov	r3, r15
    1f5c:	22 24       	eor	r2, r2
    1f5e:	22 0d       	add	r18, r2
    1f60:	33 1d       	adc	r19, r3
    1f62:	f3 01       	movw	r30, r6
    1f64:	21 93       	st	Z+, r18
    1f66:	31 93       	st	Z+, r19
    1f68:	3f 01       	movw	r6, r30
							uart_putchar(&BT_USART, 'R');
							break;
						}
						
						// Read in the start up pulse timing data
						for(i=0; i < robotData.startUpPulseLength; i++) {
    1f6a:	0f 5f       	subi	r16, 0xFF	; 255
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	80 91 1d 21 	lds	r24, 0x211D
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	08 17       	cp	r16, r24
    1f76:	19 07       	cpc	r17, r25
    1f78:	0c f4       	brge	.+2      	; 0x1f7c <main+0x682>
    1f7a:	ac cf       	rjmp	.-168    	; 0x1ed4 <main+0x5da>
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.startUpPulse[i] = ((temph)<<8) + templ;
						}
						if(temph == 256 || templ == 256) {
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	af 16       	cp	r10, r31
    1f80:	f1 e0       	ldi	r31, 0x01	; 1
    1f82:	bf 06       	cpc	r11, r31
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <main+0x68e>
    1f86:	27 c6       	rjmp	.+3150   	; 0x2bd6 <__stack+0x3d7>
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	c2 16       	cp	r12, r18
    1f8c:	21 e0       	ldi	r18, 0x01	; 1
    1f8e:	d2 06       	cpc	r13, r18
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <main+0x69a>
    1f92:	21 c6       	rjmp	.+3138   	; 0x2bd6 <__stack+0x3d7>
							break;
						}
						templ = uart_getchar_timeout(&BT_USART);
    1f94:	80 eb       	ldi	r24, 0xB0	; 176
    1f96:	99 e0       	ldi	r25, 0x09	; 9
    1f98:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1f9c:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1f9e:	31 e0       	ldi	r19, 0x01	; 1
    1fa0:	80 30       	cpi	r24, 0x00	; 0
    1fa2:	93 07       	cpc	r25, r19
    1fa4:	89 f4       	brne	.+34     	; 0x1fc8 <main+0x6ce>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fa6:	80 91 b1 09 	lds	r24, 0x09B1
    1faa:	85 ff       	sbrs	r24, 5
    1fac:	fc cf       	rjmp	.-8      	; 0x1fa6 <main+0x6ac>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fae:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fb2:	80 91 b1 09 	lds	r24, 0x09B1
    1fb6:	85 ff       	sbrs	r24, 5
    1fb8:	fc cf       	rjmp	.-8      	; 0x1fb2 <main+0x6b8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fba:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fbe:	80 91 b1 09 	lds	r24, 0x09B1
    1fc2:	85 ff       	sbrs	r24, 5
    1fc4:	fc cf       	rjmp	.-8      	; 0x1fbe <main+0x6c4>
    1fc6:	f1 c5       	rjmp	.+3042   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
						// Set the bit encoding to one of four pre-determined settings (see protocol instructions for more information)
							robotData.bitEncoding = templ;
    1fc8:	98 2f       	mov	r25, r24
    1fca:	c0 92 3e 21 	sts	0x213E, r12
    1fce:	80 91 b1 09 	lds	r24, 0x09B1
    1fd2:	85 ff       	sbrs	r24, 5
    1fd4:	fc cf       	rjmp	.-8      	; 0x1fce <main+0x6d4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fd6:	90 93 b0 09 	sts	0x09B0, r25
							uart_putchar(&BT_USART, robotData.bitEncoding);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1fda:	80 eb       	ldi	r24, 0xB0	; 176
    1fdc:	99 e0       	ldi	r25, 0x09	; 9
    1fde:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1fe2:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	80 30       	cpi	r24, 0x00	; 0
    1fe8:	94 07       	cpc	r25, r20
    1fea:	89 f4       	brne	.+34     	; 0x200e <main+0x714>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fec:	80 91 b1 09 	lds	r24, 0x09B1
    1ff0:	85 ff       	sbrs	r24, 5
    1ff2:	fc cf       	rjmp	.-8      	; 0x1fec <main+0x6f2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ff4:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ff8:	80 91 b1 09 	lds	r24, 0x09B1
    1ffc:	85 ff       	sbrs	r24, 5
    1ffe:	fc cf       	rjmp	.-8      	; 0x1ff8 <main+0x6fe>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2000:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2004:	80 91 b1 09 	lds	r24, 0x09B1
    2008:	85 ff       	sbrs	r24, 5
    200a:	fc cf       	rjmp	.-8      	; 0x2004 <main+0x70a>
    200c:	ce c5       	rjmp	.+2972   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    200e:	28 2f       	mov	r18, r24
    2010:	80 91 b1 09 	lds	r24, 0x09B1
    2014:	85 ff       	sbrs	r24, 5
    2016:	fc cf       	rjmp	.-8      	; 0x2010 <main+0x716>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2018:	20 93 b0 09 	sts	0x09B0, r18
						}
						// Set the number of bits (and bytes) contained in an IR command
						robotData.numBits = templ;
    201c:	20 93 3f 21 	sts	0x213F, r18
						robotData.numBytes = (robotData.numBits-1)/8 + 1;
    2020:	82 2f       	mov	r24, r18
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	68 e0       	ldi	r22, 0x08	; 8
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divmodhi4>
    202e:	6f 5f       	subi	r22, 0xFF	; 255
    2030:	60 93 40 21 	sts	0x2140, r22
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2034:	80 91 b1 09 	lds	r24, 0x09B1
    2038:	85 ff       	sbrs	r24, 5
    203a:	fc cf       	rjmp	.-8      	; 0x2034 <main+0x73a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    203c:	20 93 b0 09 	sts	0x09B0, r18
						uart_putchar(&BT_USART, robotData.numBits);
						temph = uart_getchar_timeout(&BT_USART);
    2040:	80 eb       	ldi	r24, 0xB0	; 176
    2042:	99 e0       	ldi	r25, 0x09	; 9
    2044:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2048:	8c 01       	movw	r16, r24
						if(temph == 256) {
    204a:	51 e0       	ldi	r21, 0x01	; 1
    204c:	80 30       	cpi	r24, 0x00	; 0
    204e:	95 07       	cpc	r25, r21
    2050:	89 f4       	brne	.+34     	; 0x2074 <main+0x77a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2052:	80 91 b1 09 	lds	r24, 0x09B1
    2056:	85 ff       	sbrs	r24, 5
    2058:	fc cf       	rjmp	.-8      	; 0x2052 <main+0x758>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    205a:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    205e:	80 91 b1 09 	lds	r24, 0x09B1
    2062:	85 ff       	sbrs	r24, 5
    2064:	fc cf       	rjmp	.-8      	; 0x205e <main+0x764>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2066:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    206a:	80 91 b1 09 	lds	r24, 0x09B1
    206e:	85 ff       	sbrs	r24, 5
    2070:	fc cf       	rjmp	.-8      	; 0x206a <main+0x770>
    2072:	9b c5       	rjmp	.+2870   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2074:	80 91 b1 09 	lds	r24, 0x09B1
    2078:	85 ff       	sbrs	r24, 5
    207a:	fc cf       	rjmp	.-8      	; 0x2074 <main+0x77a>
    207c:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2080:	80 eb       	ldi	r24, 0xB0	; 176
    2082:	99 e0       	ldi	r25, 0x09	; 9
    2084:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2088:	9c 01       	movw	r18, r24
    208a:	6c 01       	movw	r12, r24
						if(templ == 256) {
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	80 30       	cpi	r24, 0x00	; 0
    2090:	96 07       	cpc	r25, r22
    2092:	89 f4       	brne	.+34     	; 0x20b6 <main+0x7bc>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2094:	80 91 b1 09 	lds	r24, 0x09B1
    2098:	85 ff       	sbrs	r24, 5
    209a:	fc cf       	rjmp	.-8      	; 0x2094 <main+0x79a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    209c:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20a0:	80 91 b1 09 	lds	r24, 0x09B1
    20a4:	85 ff       	sbrs	r24, 5
    20a6:	fc cf       	rjmp	.-8      	; 0x20a0 <main+0x7a6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20a8:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20ac:	80 91 b1 09 	lds	r24, 0x09B1
    20b0:	85 ff       	sbrs	r24, 5
    20b2:	fc cf       	rjmp	.-8      	; 0x20ac <main+0x7b2>
    20b4:	7a c5       	rjmp	.+2804   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20b6:	80 91 b1 09 	lds	r24, 0x09B1
    20ba:	85 ff       	sbrs	r24, 5
    20bc:	fc cf       	rjmp	.-8      	; 0x20b6 <main+0x7bc>
    20be:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for a high bit
						robotData.highBitTime = ((temph)<<8) + templ;				
    20c2:	90 2f       	mov	r25, r16
    20c4:	88 27       	eor	r24, r24
    20c6:	28 0f       	add	r18, r24
    20c8:	39 1f       	adc	r19, r25
    20ca:	20 93 41 21 	sts	0x2141, r18
    20ce:	30 93 42 21 	sts	0x2142, r19
						temph = uart_getchar_timeout(&BT_USART);
    20d2:	80 eb       	ldi	r24, 0xB0	; 176
    20d4:	99 e0       	ldi	r25, 0x09	; 9
    20d6:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    20da:	8c 01       	movw	r16, r24
						if(temph == 256) {
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	00 30       	cpi	r16, 0x00	; 0
    20e0:	18 07       	cpc	r17, r24
    20e2:	89 f4       	brne	.+34     	; 0x2106 <main+0x80c>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20e4:	80 91 b1 09 	lds	r24, 0x09B1
    20e8:	85 ff       	sbrs	r24, 5
    20ea:	fc cf       	rjmp	.-8      	; 0x20e4 <main+0x7ea>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20ec:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20f0:	80 91 b1 09 	lds	r24, 0x09B1
    20f4:	85 ff       	sbrs	r24, 5
    20f6:	fc cf       	rjmp	.-8      	; 0x20f0 <main+0x7f6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20f8:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20fc:	80 91 b1 09 	lds	r24, 0x09B1
    2100:	85 ff       	sbrs	r24, 5
    2102:	fc cf       	rjmp	.-8      	; 0x20fc <main+0x802>
    2104:	52 c5       	rjmp	.+2724   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2106:	80 91 b1 09 	lds	r24, 0x09B1
    210a:	85 ff       	sbrs	r24, 5
    210c:	fc cf       	rjmp	.-8      	; 0x2106 <main+0x80c>
    210e:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2112:	80 eb       	ldi	r24, 0xB0	; 176
    2114:	99 e0       	ldi	r25, 0x09	; 9
    2116:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    211a:	9c 01       	movw	r18, r24
    211c:	6c 01       	movw	r12, r24
						if(templ == 256) {
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	20 30       	cpi	r18, 0x00	; 0
    2122:	39 07       	cpc	r19, r25
    2124:	89 f4       	brne	.+34     	; 0x2148 <main+0x84e>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2126:	80 91 b1 09 	lds	r24, 0x09B1
    212a:	85 ff       	sbrs	r24, 5
    212c:	fc cf       	rjmp	.-8      	; 0x2126 <main+0x82c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    212e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2132:	80 91 b1 09 	lds	r24, 0x09B1
    2136:	85 ff       	sbrs	r24, 5
    2138:	fc cf       	rjmp	.-8      	; 0x2132 <main+0x838>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    213a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    213e:	80 91 b1 09 	lds	r24, 0x09B1
    2142:	85 ff       	sbrs	r24, 5
    2144:	fc cf       	rjmp	.-8      	; 0x213e <main+0x844>
    2146:	31 c5       	rjmp	.+2658   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2148:	80 91 b1 09 	lds	r24, 0x09B1
    214c:	85 ff       	sbrs	r24, 5
    214e:	fc cf       	rjmp	.-8      	; 0x2148 <main+0x84e>
    2150:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for a low bit
						robotData.lowBitTime = ((temph)<<8) + templ;				
    2154:	90 2f       	mov	r25, r16
    2156:	88 27       	eor	r24, r24
    2158:	28 0f       	add	r18, r24
    215a:	39 1f       	adc	r19, r25
    215c:	20 93 43 21 	sts	0x2143, r18
    2160:	30 93 44 21 	sts	0x2144, r19
						temph = uart_getchar_timeout(&BT_USART);
    2164:	80 eb       	ldi	r24, 0xB0	; 176
    2166:	99 e0       	ldi	r25, 0x09	; 9
    2168:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    216c:	8c 01       	movw	r16, r24
						if(temph == 256) {
    216e:	e1 e0       	ldi	r30, 0x01	; 1
    2170:	80 30       	cpi	r24, 0x00	; 0
    2172:	9e 07       	cpc	r25, r30
    2174:	89 f4       	brne	.+34     	; 0x2198 <main+0x89e>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2176:	80 91 b1 09 	lds	r24, 0x09B1
    217a:	85 ff       	sbrs	r24, 5
    217c:	fc cf       	rjmp	.-8      	; 0x2176 <main+0x87c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    217e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2182:	80 91 b1 09 	lds	r24, 0x09B1
    2186:	85 ff       	sbrs	r24, 5
    2188:	fc cf       	rjmp	.-8      	; 0x2182 <main+0x888>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    218a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    218e:	80 91 b1 09 	lds	r24, 0x09B1
    2192:	85 ff       	sbrs	r24, 5
    2194:	fc cf       	rjmp	.-8      	; 0x218e <main+0x894>
    2196:	09 c5       	rjmp	.+2578   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2198:	80 91 b1 09 	lds	r24, 0x09B1
    219c:	85 ff       	sbrs	r24, 5
    219e:	fc cf       	rjmp	.-8      	; 0x2198 <main+0x89e>
    21a0:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    21a4:	80 eb       	ldi	r24, 0xB0	; 176
    21a6:	99 e0       	ldi	r25, 0x09	; 9
    21a8:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    21ac:	9c 01       	movw	r18, r24
    21ae:	6c 01       	movw	r12, r24
						if(templ == 256) {
    21b0:	f1 e0       	ldi	r31, 0x01	; 1
    21b2:	80 30       	cpi	r24, 0x00	; 0
    21b4:	9f 07       	cpc	r25, r31
    21b6:	89 f4       	brne	.+34     	; 0x21da <main+0x8e0>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21b8:	80 91 b1 09 	lds	r24, 0x09B1
    21bc:	85 ff       	sbrs	r24, 5
    21be:	fc cf       	rjmp	.-8      	; 0x21b8 <main+0x8be>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21c0:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21c4:	80 91 b1 09 	lds	r24, 0x09B1
    21c8:	85 ff       	sbrs	r24, 5
    21ca:	fc cf       	rjmp	.-8      	; 0x21c4 <main+0x8ca>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21cc:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21d0:	80 91 b1 09 	lds	r24, 0x09B1
    21d4:	85 ff       	sbrs	r24, 5
    21d6:	fc cf       	rjmp	.-8      	; 0x21d0 <main+0x8d6>
    21d8:	e8 c4       	rjmp	.+2512   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21da:	80 91 b1 09 	lds	r24, 0x09B1
    21de:	85 ff       	sbrs	r24, 5
    21e0:	fc cf       	rjmp	.-8      	; 0x21da <main+0x8e0>
    21e2:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for on or off
						robotData.offTime = ((temph)<<8) + templ;
    21e6:	90 2f       	mov	r25, r16
    21e8:	88 27       	eor	r24, r24
    21ea:	28 0f       	add	r18, r24
    21ec:	39 1f       	adc	r19, r25
    21ee:	20 93 45 21 	sts	0x2145, r18
    21f2:	30 93 46 21 	sts	0x2146, r19
    21f6:	ef c4       	rjmp	.+2526   	; 0x2bd6 <__stack+0x3d7>
						break;
					// Transmit an IR signal according to the previously determined configuration
					case 'i':
						// Get the signal data as one or more bytes
						for(i = 0; i < robotData.numBytes; i++) {
							templ = uart_getchar_timeout(&BT_USART);
    21f8:	80 eb       	ldi	r24, 0xB0	; 176
    21fa:	99 e0       	ldi	r25, 0x09	; 9
    21fc:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2200:	6c 01       	movw	r12, r24
							if(templ == 256) {
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	80 30       	cpi	r24, 0x00	; 0
    2206:	92 07       	cpc	r25, r18
    2208:	89 f4       	brne	.+34     	; 0x222c <main+0x932>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    220a:	80 91 b1 09 	lds	r24, 0x09B1
    220e:	85 ff       	sbrs	r24, 5
    2210:	fc cf       	rjmp	.-8      	; 0x220a <main+0x910>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2212:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2216:	80 91 b1 09 	lds	r24, 0x09B1
    221a:	85 ff       	sbrs	r24, 5
    221c:	fc cf       	rjmp	.-8      	; 0x2216 <main+0x91c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    221e:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2222:	80 91 b1 09 	lds	r24, 0x09B1
    2226:	85 ff       	sbrs	r24, 5
    2228:	fc cf       	rjmp	.-8      	; 0x2222 <main+0x928>
    222a:	bf c4       	rjmp	.+2430   	; 0x2baa <__stack+0x3ab>
								uart_putchar(&BT_USART, 'R');
								uart_putchar(&BT_USART, 'R');
								break;
							}
							else {
								robotData.irBytes[i] = templ;
    222c:	98 2f       	mov	r25, r24
    222e:	f8 01       	movw	r30, r16
    2230:	e5 5e       	subi	r30, 0xE5	; 229
    2232:	fe 4d       	sbci	r31, 0xDE	; 222
    2234:	c4 a6       	std	Z+44, r12	; 0x2c
    2236:	80 91 b1 09 	lds	r24, 0x09B1
    223a:	85 ff       	sbrs	r24, 5
    223c:	fc cf       	rjmp	.-8      	; 0x2236 <main+0x93c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    223e:	90 93 b0 09 	sts	0x09B0, r25
						robotData.offTime = ((temph)<<8) + templ;
						break;
					// Transmit an IR signal according to the previously determined configuration
					case 'i':
						// Get the signal data as one or more bytes
						for(i = 0; i < robotData.numBytes; i++) {
    2242:	0f 5f       	subi	r16, 0xFF	; 255
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	80 91 40 21 	lds	r24, 0x2140
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	08 17       	cp	r16, r24
    224e:	19 07       	cpc	r17, r25
    2250:	9c f2       	brlt	.-90     	; 0x21f8 <main+0x8fe>
							else {
								robotData.irBytes[i] = templ;
								uart_putchar(&BT_USART, robotData.irBytes[i]);
							}
						}
						if(templ == 256) {
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	c3 16       	cp	r12, r19
    2256:	31 e0       	ldi	r19, 0x01	; 1
    2258:	d3 06       	cpc	r13, r19
    225a:	09 f4       	brne	.+2      	; 0x225e <main+0x964>
    225c:	bc c4       	rjmp	.+2424   	; 0x2bd6 <__stack+0x3d7>
							break;
						}
						temph = uart_getchar_timeout(&BT_USART);
    225e:	80 eb       	ldi	r24, 0xB0	; 176
    2260:	99 e0       	ldi	r25, 0x09	; 9
    2262:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2266:	8c 01       	movw	r16, r24
						if(temph == 256) {
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	80 30       	cpi	r24, 0x00	; 0
    226c:	94 07       	cpc	r25, r20
    226e:	89 f4       	brne	.+34     	; 0x2292 <main+0x998>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2270:	80 91 b1 09 	lds	r24, 0x09B1
    2274:	85 ff       	sbrs	r24, 5
    2276:	fc cf       	rjmp	.-8      	; 0x2270 <main+0x976>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2278:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    227c:	80 91 b1 09 	lds	r24, 0x09B1
    2280:	85 ff       	sbrs	r24, 5
    2282:	fc cf       	rjmp	.-8      	; 0x227c <main+0x982>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2284:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2288:	80 91 b1 09 	lds	r24, 0x09B1
    228c:	85 ff       	sbrs	r24, 5
    228e:	fc cf       	rjmp	.-8      	; 0x2288 <main+0x98e>
    2290:	8c c4       	rjmp	.+2328   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2292:	80 91 b1 09 	lds	r24, 0x09B1
    2296:	85 ff       	sbrs	r24, 5
    2298:	fc cf       	rjmp	.-8      	; 0x2292 <main+0x998>
    229a:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    229e:	80 eb       	ldi	r24, 0xB0	; 176
    22a0:	99 e0       	ldi	r25, 0x09	; 9
    22a2:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    22a6:	9c 01       	movw	r18, r24
    22a8:	6c 01       	movw	r12, r24
						if(templ == 256) {
    22aa:	51 e0       	ldi	r21, 0x01	; 1
    22ac:	80 30       	cpi	r24, 0x00	; 0
    22ae:	95 07       	cpc	r25, r21
    22b0:	89 f4       	brne	.+34     	; 0x22d4 <main+0x9da>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22b2:	80 91 b1 09 	lds	r24, 0x09B1
    22b6:	85 ff       	sbrs	r24, 5
    22b8:	fc cf       	rjmp	.-8      	; 0x22b2 <main+0x9b8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22ba:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22be:	80 91 b1 09 	lds	r24, 0x09B1
    22c2:	85 ff       	sbrs	r24, 5
    22c4:	fc cf       	rjmp	.-8      	; 0x22be <main+0x9c4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22c6:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22ca:	80 91 b1 09 	lds	r24, 0x09B1
    22ce:	85 ff       	sbrs	r24, 5
    22d0:	fc cf       	rjmp	.-8      	; 0x22ca <main+0x9d0>
    22d2:	6b c4       	rjmp	.+2262   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22d4:	80 91 b1 09 	lds	r24, 0x09B1
    22d8:	85 ff       	sbrs	r24, 5
    22da:	fc cf       	rjmp	.-8      	; 0x22d4 <main+0x9da>
    22dc:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Determine if the signal is repeated or not, and if so, with what frequency
						robotData.repeatTime = ((temph)<<8) + templ;
    22e0:	90 2f       	mov	r25, r16
    22e2:	88 27       	eor	r24, r24
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	80 93 07 22 	sts	0x2207, r24
    22ec:	90 93 08 22 	sts	0x2208, r25
						if(robotData.repeatTime != 0) {
    22f0:	89 2b       	or	r24, r25
    22f2:	39 f0       	breq	.+14     	; 0x2302 <main+0xa08>
							robotData.repeatFlag = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	80 93 09 22 	sts	0x2209, r24
    22fc:	90 93 0a 22 	sts	0x220A, r25
    2300:	2a c1       	rjmp	.+596    	; 0x2556 <main+0xc5c>
						}
						else {
							robotData.repeatFlag = 0;
    2302:	10 92 09 22 	sts	0x2209, r1
    2306:	10 92 0a 22 	sts	0x220A, r1
    230a:	25 c1       	rjmp	.+586    	; 0x2556 <main+0xc5c>
						// Startup timer interrupts
						start_ir_timer();
						break;
					// Turn off any repeating IR signal
					case '!':
						robotData.repeatFlag = 0;
    230c:	10 92 09 22 	sts	0x2209, r1
    2310:	10 92 0a 22 	sts	0x220A, r1
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    2314:	10 92 46 08 	sts	0x0846, r1
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
    2318:	f8 94       	cli
	TCC0.CCA = 0x0000;
    231a:	10 92 28 08 	sts	0x0828, r1
    231e:	10 92 29 08 	sts	0x0829, r1
	sei();
    2322:	78 94       	sei
    2324:	58 c4       	rjmp	.+2224   	; 0x2bd6 <__stack+0x3d7>
						stop_ir_timer();
						break;
					// Capture a signal from the IR receiver
					case 'R':
						init_ir_read();
    2326:	0e 94 bb 08 	call	0x1176	; 0x1176 <init_ir_read>
						while(ir_read_flag!=0);
    232a:	80 91 04 20 	lds	r24, 0x2004
    232e:	88 23       	and	r24, r24
    2330:	e1 f7       	brne	.-8      	; 0x232a <main+0xa30>
    2332:	51 c4       	rjmp	.+2210   	; 0x2bd6 <__stack+0x3d7>
						break;
					// Store the captured signal in an EEPROM location	
					case 'S':
						location = uart_getchar_timeout(&BT_USART)-48; // Subtracing 48 converts from ASCII to numeric numbers
    2334:	80 eb       	ldi	r24, 0xB0	; 176
    2336:	99 e0       	ldi	r25, 0x09	; 9
    2338:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    233c:	98 2f       	mov	r25, r24
    233e:	90 53       	subi	r25, 0x30	; 48
						if((location >= 0) && (location < 5) && (signal_count > 4)) {
    2340:	95 30       	cpi	r25, 0x05	; 5
    2342:	88 f4       	brcc	.+34     	; 0x2366 <main+0xa6c>
    2344:	80 91 02 20 	lds	r24, 0x2002
    2348:	85 30       	cpi	r24, 0x05	; 5
    234a:	68 f0       	brcs	.+26     	; 0x2366 <main+0xa6c>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    234c:	80 91 b1 09 	lds	r24, 0x09B1
    2350:	85 ff       	sbrs	r24, 5
    2352:	fc cf       	rjmp	.-8      	; 0x234c <main+0xa52>
							uart_putchar(&BT_USART, location+48);
    2354:	90 5d       	subi	r25, 0xD0	; 208
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2356:	90 93 b0 09 	sts	0x09B0, r25
    235a:	90 53       	subi	r25, 0x30	; 48
							write_data_to_eeprom(location);
    235c:	89 2f       	mov	r24, r25
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	0e 94 67 0b 	call	0x16ce	; 0x16ce <write_data_to_eeprom>
    2364:	38 c4       	rjmp	.+2160   	; 0x2bd6 <__stack+0x3d7>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2366:	80 91 b1 09 	lds	r24, 0x09B1
    236a:	85 ff       	sbrs	r24, 5
    236c:	fc cf       	rjmp	.-8      	; 0x2366 <main+0xa6c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    236e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2372:	80 91 b1 09 	lds	r24, 0x09B1
    2376:	85 ff       	sbrs	r24, 5
    2378:	fc cf       	rjmp	.-8      	; 0x2372 <main+0xa78>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    237a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    237e:	80 91 b1 09 	lds	r24, 0x09B1
    2382:	85 ff       	sbrs	r24, 5
    2384:	fc cf       	rjmp	.-8      	; 0x237e <main+0xa84>
    2386:	11 c4       	rjmp	.+2082   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
						}
						break;
					// Receive a raw IR signal over bluetooth and transmit it with the IR LED
					case 's':
						if(read_data_from_serial()) {
    2388:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <read_data_from_serial>
    238c:	89 2b       	or	r24, r25
    238e:	09 f4       	brne	.+2      	; 0x2392 <main+0xa98>
    2390:	57 c0       	rjmp	.+174    	; 0x2440 <main+0xb46>
							temph = uart_getchar_timeout(&BT_USART);
    2392:	80 eb       	ldi	r24, 0xB0	; 176
    2394:	99 e0       	ldi	r25, 0x09	; 9
    2396:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    239a:	8c 01       	movw	r16, r24
							if(temph == 256) {
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	00 30       	cpi	r16, 0x00	; 0
    23a0:	19 07       	cpc	r17, r25
    23a2:	89 f4       	brne	.+34     	; 0x23c6 <main+0xacc>
    23a4:	80 91 b1 09 	lds	r24, 0x09B1
    23a8:	85 ff       	sbrs	r24, 5
    23aa:	fc cf       	rjmp	.-8      	; 0x23a4 <main+0xaaa>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23ac:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23b0:	80 91 b1 09 	lds	r24, 0x09B1
    23b4:	85 ff       	sbrs	r24, 5
    23b6:	fc cf       	rjmp	.-8      	; 0x23b0 <main+0xab6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23b8:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23bc:	80 91 b1 09 	lds	r24, 0x09B1
    23c0:	85 ff       	sbrs	r24, 5
    23c2:	fc cf       	rjmp	.-8      	; 0x23bc <main+0xac2>
    23c4:	f2 c3       	rjmp	.+2020   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23c6:	80 91 b1 09 	lds	r24, 0x09B1
    23ca:	85 ff       	sbrs	r24, 5
    23cc:	fc cf       	rjmp	.-8      	; 0x23c6 <main+0xacc>
    23ce:	00 93 b0 09 	sts	0x09B0, r16
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    23d2:	80 eb       	ldi	r24, 0xB0	; 176
    23d4:	99 e0       	ldi	r25, 0x09	; 9
    23d6:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    23da:	9c 01       	movw	r18, r24
    23dc:	6c 01       	movw	r12, r24
							if(templ == 256) {
    23de:	e1 e0       	ldi	r30, 0x01	; 1
    23e0:	80 30       	cpi	r24, 0x00	; 0
    23e2:	9e 07       	cpc	r25, r30
    23e4:	89 f4       	brne	.+34     	; 0x2408 <main+0xb0e>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23e6:	80 91 b1 09 	lds	r24, 0x09B1
    23ea:	85 ff       	sbrs	r24, 5
    23ec:	fc cf       	rjmp	.-8      	; 0x23e6 <main+0xaec>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23ee:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23f2:	80 91 b1 09 	lds	r24, 0x09B1
    23f6:	85 ff       	sbrs	r24, 5
    23f8:	fc cf       	rjmp	.-8      	; 0x23f2 <main+0xaf8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23fa:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23fe:	80 91 b1 09 	lds	r24, 0x09B1
    2402:	85 ff       	sbrs	r24, 5
    2404:	fc cf       	rjmp	.-8      	; 0x23fe <main+0xb04>
    2406:	d1 c3       	rjmp	.+1954   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2408:	80 91 b1 09 	lds	r24, 0x09B1
    240c:	85 ff       	sbrs	r24, 5
    240e:	fc cf       	rjmp	.-8      	; 0x2408 <main+0xb0e>
    2410:	20 93 b0 09 	sts	0x09B0, r18
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							// Set if the signal should repeat and if so, with what frequency
							robotData.repeatTime = ((temph)<<8) + templ;
    2414:	90 2f       	mov	r25, r16
    2416:	88 27       	eor	r24, r24
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	80 93 07 22 	sts	0x2207, r24
    2420:	90 93 08 22 	sts	0x2208, r25
							if(robotData.repeatTime != 0) {
    2424:	89 2b       	or	r24, r25
    2426:	39 f0       	breq	.+14     	; 0x2436 <main+0xb3c>
								robotData.repeatFlag = 1;
    2428:	21 e0       	ldi	r18, 0x01	; 1
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	20 93 09 22 	sts	0x2209, r18
    2430:	30 93 0a 22 	sts	0x220A, r19
    2434:	85 c0       	rjmp	.+266    	; 0x2540 <main+0xc46>
							}
							else {
								robotData.repeatFlag = 0;
    2436:	10 92 09 22 	sts	0x2209, r1
    243a:	10 92 0a 22 	sts	0x220A, r1
    243e:	80 c0       	rjmp	.+256    	; 0x2540 <main+0xc46>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2440:	80 91 b1 09 	lds	r24, 0x09B1
    2444:	85 ff       	sbrs	r24, 5
    2446:	fc cf       	rjmp	.-8      	; 0x2440 <main+0xb46>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2448:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    244c:	80 91 b1 09 	lds	r24, 0x09B1
    2450:	85 ff       	sbrs	r24, 5
    2452:	fc cf       	rjmp	.-8      	; 0x244c <main+0xb52>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2454:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2458:	80 91 b1 09 	lds	r24, 0x09B1
    245c:	85 ff       	sbrs	r24, 5
    245e:	fc cf       	rjmp	.-8      	; 0x2458 <main+0xb5e>
    2460:	a4 c3       	rjmp	.+1864   	; 0x2baa <__stack+0x3ab>
								break;
						}
						break;
					// Get a stored signal from an EEPROM location and transmit it over the IR LED (and repeat as desired)
					case 'G':
						location = uart_getchar_timeout(&BT_USART)-48;
    2462:	80 eb       	ldi	r24, 0xB0	; 176
    2464:	99 e0       	ldi	r25, 0x09	; 9
    2466:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    246a:	20 ed       	ldi	r18, 0xD0	; 208
    246c:	f2 2e       	mov	r15, r18
    246e:	f8 0e       	add	r15, r24
						if(location >= 0 && location < 5) {
    2470:	64 e0       	ldi	r22, 0x04	; 4
    2472:	6f 15       	cp	r22, r15
    2474:	08 f4       	brcc	.+2      	; 0x2478 <main+0xb7e>
    2476:	72 c0       	rjmp	.+228    	; 0x255c <main+0xc62>
    2478:	80 91 b1 09 	lds	r24, 0x09B1
    247c:	85 ff       	sbrs	r24, 5
    247e:	fc cf       	rjmp	.-8      	; 0x2478 <main+0xb7e>
							uart_putchar(&BT_USART, location+48);
    2480:	80 e3       	ldi	r24, 0x30	; 48
    2482:	f8 0e       	add	r15, r24
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2484:	f0 92 b0 09 	sts	0x09B0, r15
    2488:	90 ed       	ldi	r25, 0xD0	; 208
    248a:	f9 0e       	add	r15, r25
							temph = uart_getchar_timeout(&BT_USART);
    248c:	80 eb       	ldi	r24, 0xB0	; 176
    248e:	99 e0       	ldi	r25, 0x09	; 9
    2490:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2494:	8c 01       	movw	r16, r24
							if(temph == 256) {
    2496:	e1 e0       	ldi	r30, 0x01	; 1
    2498:	80 30       	cpi	r24, 0x00	; 0
    249a:	9e 07       	cpc	r25, r30
    249c:	89 f4       	brne	.+34     	; 0x24c0 <main+0xbc6>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    249e:	80 91 b1 09 	lds	r24, 0x09B1
    24a2:	85 ff       	sbrs	r24, 5
    24a4:	fc cf       	rjmp	.-8      	; 0x249e <main+0xba4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24a6:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24aa:	80 91 b1 09 	lds	r24, 0x09B1
    24ae:	85 ff       	sbrs	r24, 5
    24b0:	fc cf       	rjmp	.-8      	; 0x24aa <main+0xbb0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24b2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24b6:	80 91 b1 09 	lds	r24, 0x09B1
    24ba:	85 ff       	sbrs	r24, 5
    24bc:	fc cf       	rjmp	.-8      	; 0x24b6 <main+0xbbc>
    24be:	75 c3       	rjmp	.+1770   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24c0:	80 91 b1 09 	lds	r24, 0x09B1
    24c4:	85 ff       	sbrs	r24, 5
    24c6:	fc cf       	rjmp	.-8      	; 0x24c0 <main+0xbc6>
    24c8:	00 93 b0 09 	sts	0x09B0, r16
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    24cc:	80 eb       	ldi	r24, 0xB0	; 176
    24ce:	99 e0       	ldi	r25, 0x09	; 9
    24d0:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    24d4:	9c 01       	movw	r18, r24
    24d6:	6c 01       	movw	r12, r24
							if(templ == 256) {
    24d8:	f1 e0       	ldi	r31, 0x01	; 1
    24da:	80 30       	cpi	r24, 0x00	; 0
    24dc:	9f 07       	cpc	r25, r31
    24de:	89 f4       	brne	.+34     	; 0x2502 <main+0xc08>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24e0:	80 91 b1 09 	lds	r24, 0x09B1
    24e4:	85 ff       	sbrs	r24, 5
    24e6:	fc cf       	rjmp	.-8      	; 0x24e0 <main+0xbe6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24e8:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24ec:	80 91 b1 09 	lds	r24, 0x09B1
    24f0:	85 ff       	sbrs	r24, 5
    24f2:	fc cf       	rjmp	.-8      	; 0x24ec <main+0xbf2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24f4:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24f8:	80 91 b1 09 	lds	r24, 0x09B1
    24fc:	85 ff       	sbrs	r24, 5
    24fe:	fc cf       	rjmp	.-8      	; 0x24f8 <main+0xbfe>
    2500:	54 c3       	rjmp	.+1704   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2502:	80 91 b1 09 	lds	r24, 0x09B1
    2506:	85 ff       	sbrs	r24, 5
    2508:	fc cf       	rjmp	.-8      	; 0x2502 <main+0xc08>
    250a:	20 93 b0 09 	sts	0x09B0, r18
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.repeatTime = ((temph)<<8) + templ;
    250e:	90 2f       	mov	r25, r16
    2510:	88 27       	eor	r24, r24
    2512:	82 0f       	add	r24, r18
    2514:	93 1f       	adc	r25, r19
    2516:	80 93 07 22 	sts	0x2207, r24
    251a:	90 93 08 22 	sts	0x2208, r25
							if(robotData.repeatTime != 0) {
    251e:	89 2b       	or	r24, r25
    2520:	39 f0       	breq	.+14     	; 0x2530 <main+0xc36>
								robotData.repeatFlag = 1;
    2522:	21 e0       	ldi	r18, 0x01	; 1
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	20 93 09 22 	sts	0x2209, r18
    252a:	30 93 0a 22 	sts	0x220A, r19
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <main+0xc3e>
							}
							else {
								robotData.repeatFlag = 0;
    2530:	10 92 09 22 	sts	0x2209, r1
    2534:	10 92 0a 22 	sts	0x220A, r1
							}
							read_data_from_eeprom(location);
    2538:	8f 2d       	mov	r24, r15
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 9f 0a 	call	0x153e	; 0x153e <read_data_from_eeprom>
							robotData.frequency = 0x0349;
    2540:	49 e4       	ldi	r20, 0x49	; 73
    2542:	53 e0       	ldi	r21, 0x03	; 3
    2544:	40 93 1b 21 	sts	0x211B, r20
    2548:	50 93 1c 21 	sts	0x211C, r21
							robotData.startUpPulseLength = 0;
    254c:	10 92 1d 21 	sts	0x211D, r1
							robotData.bitEncoding = 0x04;
    2550:	54 e0       	ldi	r21, 0x04	; 4
    2552:	50 93 3e 21 	sts	0x213E, r21
							start_ir_timer();
    2556:	0e 94 13 03 	call	0x626	; 0x626 <start_ir_timer>
    255a:	3d c3       	rjmp	.+1658   	; 0x2bd6 <__stack+0x3d7>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    255c:	80 91 b1 09 	lds	r24, 0x09B1
    2560:	85 ff       	sbrs	r24, 5
    2562:	fc cf       	rjmp	.-8      	; 0x255c <main+0xc62>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2564:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2568:	80 91 b1 09 	lds	r24, 0x09B1
    256c:	85 ff       	sbrs	r24, 5
    256e:	fc cf       	rjmp	.-8      	; 0x2568 <main+0xc6e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2570:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2574:	80 91 b1 09 	lds	r24, 0x09B1
    2578:	85 ff       	sbrs	r24, 5
    257a:	fc cf       	rjmp	.-8      	; 0x2574 <main+0xc7a>
    257c:	16 c3       	rjmp	.+1580   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
						}
						break;	
					// Get a stored signal from EEPROM and print it over bluetooth to the host
					case 'g':
						location = uart_getchar_timeout(&BT_USART)-48;
    257e:	80 eb       	ldi	r24, 0xB0	; 176
    2580:	99 e0       	ldi	r25, 0x09	; 9
    2582:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2586:	98 2f       	mov	r25, r24
    2588:	90 53       	subi	r25, 0x30	; 48
						if(location >= 0 && location < 5) {
    258a:	95 30       	cpi	r25, 0x05	; 5
    258c:	68 f4       	brcc	.+26     	; 0x25a8 <main+0xcae>
    258e:	80 91 b1 09 	lds	r24, 0x09B1
    2592:	85 ff       	sbrs	r24, 5
    2594:	fc cf       	rjmp	.-8      	; 0x258e <main+0xc94>
							uart_putchar(&BT_USART, location+48);
    2596:	90 5d       	subi	r25, 0xD0	; 208
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2598:	90 93 b0 09 	sts	0x09B0, r25
    259c:	90 53       	subi	r25, 0x30	; 48
							print_data_from_eeprom(location);
    259e:	89 2f       	mov	r24, r25
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <print_data_from_eeprom>
    25a6:	17 c3       	rjmp	.+1582   	; 0x2bd6 <__stack+0x3d7>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25a8:	80 91 b1 09 	lds	r24, 0x09B1
    25ac:	85 ff       	sbrs	r24, 5
    25ae:	fc cf       	rjmp	.-8      	; 0x25a8 <main+0xcae>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25b0:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25b4:	80 91 b1 09 	lds	r24, 0x09B1
    25b8:	85 ff       	sbrs	r24, 5
    25ba:	fc cf       	rjmp	.-8      	; 0x25b4 <main+0xcba>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25bc:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25c0:	80 91 b1 09 	lds	r24, 0x09B1
    25c4:	85 ff       	sbrs	r24, 5
    25c6:	fc cf       	rjmp	.-8      	; 0x25c0 <main+0xcc6>
    25c8:	f0 c2       	rjmp	.+1504   	; 0x2baa <__stack+0x3ab>
						}
						break;	
						// Output on digital I/O
					case '>':
						// Set port
						temph = uart_getchar_timeout(&BT_USART);
    25ca:	80 eb       	ldi	r24, 0xB0	; 176
    25cc:	99 e0       	ldi	r25, 0x09	; 9
    25ce:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(temph == 256) {
    25d2:	61 e0       	ldi	r22, 0x01	; 1
    25d4:	80 30       	cpi	r24, 0x00	; 0
    25d6:	96 07       	cpc	r25, r22
    25d8:	89 f4       	brne	.+34     	; 0x25fc <main+0xd02>
    25da:	80 91 b1 09 	lds	r24, 0x09B1
    25de:	85 ff       	sbrs	r24, 5
    25e0:	fc cf       	rjmp	.-8      	; 0x25da <main+0xce0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25e2:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25e6:	80 91 b1 09 	lds	r24, 0x09B1
    25ea:	85 ff       	sbrs	r24, 5
    25ec:	fc cf       	rjmp	.-8      	; 0x25e6 <main+0xcec>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25ee:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25f2:	80 91 b1 09 	lds	r24, 0x09B1
    25f6:	85 ff       	sbrs	r24, 5
    25f8:	fc cf       	rjmp	.-8      	; 0x25f2 <main+0xcf8>
    25fa:	d7 c2       	rjmp	.+1454   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
    25fc:	18 2f       	mov	r17, r24
    25fe:	80 91 b1 09 	lds	r24, 0x09B1
    2602:	85 ff       	sbrs	r24, 5
    2604:	fc cf       	rjmp	.-8      	; 0x25fe <main+0xd04>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2606:	10 93 b0 09 	sts	0x09B0, r17
						}
						// Get value
						templ = uart_getchar_timeout(&BT_USART);
    260a:	80 eb       	ldi	r24, 0xB0	; 176
    260c:	99 e0       	ldi	r25, 0x09	; 9
    260e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2612:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	c8 16       	cp	r12, r24
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	d8 06       	cpc	r13, r24
    261c:	89 f4       	brne	.+34     	; 0x2640 <main+0xd46>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    261e:	80 91 b1 09 	lds	r24, 0x09B1
    2622:	85 ff       	sbrs	r24, 5
    2624:	fc cf       	rjmp	.-8      	; 0x261e <main+0xd24>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2626:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    262a:	80 91 b1 09 	lds	r24, 0x09B1
    262e:	85 ff       	sbrs	r24, 5
    2630:	fc cf       	rjmp	.-8      	; 0x262a <main+0xd30>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2632:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2636:	80 91 b1 09 	lds	r24, 0x09B1
    263a:	85 ff       	sbrs	r24, 5
    263c:	fc cf       	rjmp	.-8      	; 0x2636 <main+0xd3c>
    263e:	b5 c2       	rjmp	.+1386   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    2640:	6c 2d       	mov	r22, r12
    2642:	80 91 b1 09 	lds	r24, 0x09B1
    2646:	85 ff       	sbrs	r24, 5
    2648:	fc cf       	rjmp	.-8      	; 0x2642 <main+0xd48>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    264a:	60 93 b0 09 	sts	0x09B0, r22
						}
						set_output(temph, (templ-48));
    264e:	60 53       	subi	r22, 0x30	; 48
    2650:	81 2f       	mov	r24, r17
    2652:	0e 94 a8 07 	call	0xf50	; 0xf50 <set_output>
    2656:	bf c2       	rjmp	.+1406   	; 0x2bd6 <__stack+0x3d7>
						break;
						// Input on digital I/O
					case '<':
						// Get port
						temph = uart_getchar_timeout(&BT_USART);
    2658:	80 eb       	ldi	r24, 0xB0	; 176
    265a:	99 e0       	ldi	r25, 0x09	; 9
    265c:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2660:	9c 01       	movw	r18, r24
						if(temph == 256) {
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	20 30       	cpi	r18, 0x00	; 0
    2666:	39 07       	cpc	r19, r25
    2668:	89 f4       	brne	.+34     	; 0x268c <main+0xd92>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    266a:	80 91 b1 09 	lds	r24, 0x09B1
    266e:	85 ff       	sbrs	r24, 5
    2670:	fc cf       	rjmp	.-8      	; 0x266a <main+0xd70>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2672:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2676:	80 91 b1 09 	lds	r24, 0x09B1
    267a:	85 ff       	sbrs	r24, 5
    267c:	fc cf       	rjmp	.-8      	; 0x2676 <main+0xd7c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    267e:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2682:	80 91 b1 09 	lds	r24, 0x09B1
    2686:	85 ff       	sbrs	r24, 5
    2688:	fc cf       	rjmp	.-8      	; 0x2682 <main+0xd88>
    268a:	8f c2       	rjmp	.+1310   	; 0x2baa <__stack+0x3ab>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
    268c:	92 2f       	mov	r25, r18
    268e:	80 91 b1 09 	lds	r24, 0x09B1
    2692:	85 ff       	sbrs	r24, 5
    2694:	fc cf       	rjmp	.-8      	; 0x268e <main+0xd94>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2696:	90 93 b0 09 	sts	0x09B0, r25
						}
						// Get value (1 or 0)
						templ = read_input(temph)+48;
    269a:	89 2f       	mov	r24, r25
    269c:	0e 94 0f 08 	call	0x101e	; 0x101e <read_input>
    26a0:	c8 2e       	mov	r12, r24
    26a2:	dd 24       	eor	r13, r13
    26a4:	e0 e3       	ldi	r30, 0x30	; 48
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	ce 0e       	add	r12, r30
    26aa:	df 1e       	adc	r13, r31
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26ac:	80 91 b1 09 	lds	r24, 0x09B1
    26b0:	85 ff       	sbrs	r24, 5
    26b2:	fc cf       	rjmp	.-8      	; 0x26ac <main+0xdb2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26b4:	c0 92 b0 09 	sts	0x09B0, r12
    26b8:	8e c2       	rjmp	.+1308   	; 0x2bd6 <__stack+0x3d7>
						uart_putchar(&BT_USART, templ);
						break;
					// Configure PWM frequency
					case 'P':
						temph = uart_getchar_timeout(&BT_USART);
    26ba:	80 eb       	ldi	r24, 0xB0	; 176
    26bc:	99 e0       	ldi	r25, 0x09	; 9
    26be:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    26c2:	8c 01       	movw	r16, r24
						if(temph == 256) {
    26c4:	f1 e0       	ldi	r31, 0x01	; 1
    26c6:	80 30       	cpi	r24, 0x00	; 0
    26c8:	9f 07       	cpc	r25, r31
    26ca:	89 f4       	brne	.+34     	; 0x26ee <main+0xdf4>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26cc:	80 91 b1 09 	lds	r24, 0x09B1
    26d0:	85 ff       	sbrs	r24, 5
    26d2:	fc cf       	rjmp	.-8      	; 0x26cc <main+0xdd2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26d4:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26d8:	80 91 b1 09 	lds	r24, 0x09B1
    26dc:	85 ff       	sbrs	r24, 5
    26de:	fc cf       	rjmp	.-8      	; 0x26d8 <main+0xdde>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26e0:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26e4:	80 91 b1 09 	lds	r24, 0x09B1
    26e8:	85 ff       	sbrs	r24, 5
    26ea:	fc cf       	rjmp	.-8      	; 0x26e4 <main+0xdea>
    26ec:	5e c2       	rjmp	.+1212   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26ee:	80 91 b1 09 	lds	r24, 0x09B1
    26f2:	85 ff       	sbrs	r24, 5
    26f4:	fc cf       	rjmp	.-8      	; 0x26ee <main+0xdf4>
    26f6:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    26fa:	80 eb       	ldi	r24, 0xB0	; 176
    26fc:	99 e0       	ldi	r25, 0x09	; 9
    26fe:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2702:	9c 01       	movw	r18, r24
    2704:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	80 30       	cpi	r24, 0x00	; 0
    270a:	94 07       	cpc	r25, r20
    270c:	89 f4       	brne	.+34     	; 0x2730 <main+0xe36>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    270e:	80 91 b1 09 	lds	r24, 0x09B1
    2712:	85 ff       	sbrs	r24, 5
    2714:	fc cf       	rjmp	.-8      	; 0x270e <main+0xe14>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2716:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    271a:	80 91 b1 09 	lds	r24, 0x09B1
    271e:	85 ff       	sbrs	r24, 5
    2720:	fc cf       	rjmp	.-8      	; 0x271a <main+0xe20>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2722:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2726:	80 91 b1 09 	lds	r24, 0x09B1
    272a:	85 ff       	sbrs	r24, 5
    272c:	fc cf       	rjmp	.-8      	; 0x2726 <main+0xe2c>
    272e:	3d c2       	rjmp	.+1146   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2730:	80 91 b1 09 	lds	r24, 0x09B1
    2734:	85 ff       	sbrs	r24, 5
    2736:	fc cf       	rjmp	.-8      	; 0x2730 <main+0xe36>
    2738:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Stores the PWM frequency for use by set_pwm()
						pwm_frequency = ((temph)<<8) + templ;
    273c:	90 2f       	mov	r25, r16
    273e:	88 27       	eor	r24, r24
    2740:	28 0f       	add	r18, r24
    2742:	39 1f       	adc	r19, r25
    2744:	20 93 00 20 	sts	0x2000, r18
    2748:	30 93 01 20 	sts	0x2001, r19
    274c:	44 c2       	rjmp	.+1160   	; 0x2bd6 <__stack+0x3d7>
    274e:	51 e0       	ldi	r21, 0x01	; 1
    2750:	50 93 00 0a 	sts	0x0A00, r21
	
	// Turn on single slope pwm waveform generation
	TCE0.CTRLB = TC_WGMODE_SS_gc;
    2754:	23 e0       	ldi	r18, 0x03	; 3
    2756:	f2 01       	movw	r30, r4
    2758:	21 83       	std	Z+1, r18	; 0x01
	// Turn off other registers in case they were set by IR read
	TCE0.CTRLD = 0x00;
    275a:	13 82       	std	Z+3, r1	; 0x03
	// Set frequency of the PWM signal
	TCE0.PERBUF = pwm_frequency;
    275c:	80 91 00 20 	lds	r24, 0x2000
    2760:	90 91 01 20 	lds	r25, 0x2001
    2764:	86 ab       	std	Z+54, r24	; 0x36
    2766:	97 ab       	std	Z+55, r25	; 0x37
						break;
					// Set PWM duty cycle for a specific port
					case 'p':
						set_pwm();
						temph = uart_getchar_timeout(&BT_USART);
    2768:	80 eb       	ldi	r24, 0xB0	; 176
    276a:	99 e0       	ldi	r25, 0x09	; 9
    276c:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2770:	9c 01       	movw	r18, r24
						if(temph == 256) {
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	80 30       	cpi	r24, 0x00	; 0
    2776:	94 07       	cpc	r25, r20
    2778:	89 f4       	brne	.+34     	; 0x279c <main+0xea2>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    277a:	80 91 b1 09 	lds	r24, 0x09B1
    277e:	85 ff       	sbrs	r24, 5
    2780:	fc cf       	rjmp	.-8      	; 0x277a <main+0xe80>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2782:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2786:	80 91 b1 09 	lds	r24, 0x09B1
    278a:	85 ff       	sbrs	r24, 5
    278c:	fc cf       	rjmp	.-8      	; 0x2786 <main+0xe8c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    278e:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2792:	80 91 b1 09 	lds	r24, 0x09B1
    2796:	85 ff       	sbrs	r24, 5
    2798:	fc cf       	rjmp	.-8      	; 0x2792 <main+0xe98>
    279a:	07 c2       	rjmp	.+1038   	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    279c:	80 91 b1 09 	lds	r24, 0x09B1
    27a0:	85 ff       	sbrs	r24, 5
    27a2:	fc cf       	rjmp	.-8      	; 0x279c <main+0xea2>
    27a4:	20 93 b0 09 	sts	0x09B0, r18
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
							if(temph == '0') {				
    27a8:	20 33       	cpi	r18, 0x30	; 48
    27aa:	31 05       	cpc	r19, r1
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <main+0xeb6>
    27ae:	51 c0       	rjmp	.+162    	; 0x2852 <__stack+0x53>
								temph = uart_getchar_timeout(&BT_USART);
    27b0:	80 eb       	ldi	r24, 0xB0	; 176
    27b2:	99 e0       	ldi	r25, 0x09	; 9
    27b4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    27b8:	8c 01       	movw	r16, r24
								if(temph == 256) {
    27ba:	51 e0       	ldi	r21, 0x01	; 1
    27bc:	80 30       	cpi	r24, 0x00	; 0
    27be:	95 07       	cpc	r25, r21
    27c0:	89 f4       	brne	.+34     	; 0x27e4 <main+0xeea>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    27c2:	80 91 b1 09 	lds	r24, 0x09B1
    27c6:	85 ff       	sbrs	r24, 5
    27c8:	fc cf       	rjmp	.-8      	; 0x27c2 <main+0xec8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    27ca:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    27ce:	80 91 b1 09 	lds	r24, 0x09B1
    27d2:	85 ff       	sbrs	r24, 5
    27d4:	fc cf       	rjmp	.-8      	; 0x27ce <main+0xed4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    27d6:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    27da:	80 91 b1 09 	lds	r24, 0x09B1
    27de:	85 ff       	sbrs	r24, 5
    27e0:	fc cf       	rjmp	.-8      	; 0x27da <main+0xee0>
    27e2:	e3 c1       	rjmp	.+966    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    27e4:	80 91 b1 09 	lds	r24, 0x09B1
    27e8:	85 ff       	sbrs	r24, 5
    27ea:	fc cf       	rjmp	.-8      	; 0x27e4 <main+0xeea>
    27ec:	00 93 b0 09 	sts	0x09B0, r16
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
								}
								templ = uart_getchar_timeout(&BT_USART);
    27f0:	80 eb       	ldi	r24, 0xB0	; 176
    27f2:	99 e0       	ldi	r25, 0x09	; 9
    27f4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    27f8:	9c 01       	movw	r18, r24
    27fa:	6c 01       	movw	r12, r24
								if(templ == 256) {
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	80 30       	cpi	r24, 0x00	; 0
    2800:	96 07       	cpc	r25, r22
    2802:	89 f4       	brne	.+34     	; 0x2826 <__stack+0x27>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2804:	80 91 b1 09 	lds	r24, 0x09B1
    2808:	85 ff       	sbrs	r24, 5
    280a:	fc cf       	rjmp	.-8      	; 0x2804 <__stack+0x5>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    280c:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2810:	80 91 b1 09 	lds	r24, 0x09B1
    2814:	85 ff       	sbrs	r24, 5
    2816:	fc cf       	rjmp	.-8      	; 0x2810 <__stack+0x11>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2818:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    281c:	80 91 b1 09 	lds	r24, 0x09B1
    2820:	85 ff       	sbrs	r24, 5
    2822:	fc cf       	rjmp	.-8      	; 0x281c <__stack+0x1d>
    2824:	c2 c1       	rjmp	.+900    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2826:	80 91 b1 09 	lds	r24, 0x09B1
    282a:	85 ff       	sbrs	r24, 5
    282c:	fc cf       	rjmp	.-8      	; 0x2826 <__stack+0x27>
    282e:	20 93 b0 09 	sts	0x09B0, r18
									break;
								}
								else {
									uart_putchar(&BT_USART, templ);
								}
								duty = ((temph)<<8) + templ;
    2832:	90 2f       	mov	r25, r16
    2834:	88 27       	eor	r24, r24
    2836:	28 0f       	add	r18, r24
    2838:	39 1f       	adc	r19, r25
}

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm0(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCCEN_bm;
    283a:	80 91 01 0a 	lds	r24, 0x0A01
    283e:	80 64       	ori	r24, 0x40	; 64
    2840:	f2 01       	movw	r30, r4
    2842:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN2_bm;
    2844:	f4 e0       	ldi	r31, 0x04	; 4
    2846:	f0 93 81 06 	sts	0x0681, r31
	TCE0.CCC = duty;
    284a:	f2 01       	movw	r30, r4
    284c:	24 a7       	std	Z+44, r18	; 0x2c
    284e:	35 a7       	std	Z+45, r19	; 0x2d
    2850:	c2 c1       	rjmp	.+900    	; 0x2bd6 <__stack+0x3d7>
								set_pwm0(duty);
							}
							else if(temph == '1') {				
    2852:	21 33       	cpi	r18, 0x31	; 49
    2854:	31 05       	cpc	r19, r1
    2856:	09 f0       	breq	.+2      	; 0x285a <__stack+0x5b>
    2858:	be c1       	rjmp	.+892    	; 0x2bd6 <__stack+0x3d7>
								temph = uart_getchar_timeout(&BT_USART);
    285a:	80 eb       	ldi	r24, 0xB0	; 176
    285c:	99 e0       	ldi	r25, 0x09	; 9
    285e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2862:	8c 01       	movw	r16, r24
								if(temph == 256) {
    2864:	f1 e0       	ldi	r31, 0x01	; 1
    2866:	80 30       	cpi	r24, 0x00	; 0
    2868:	9f 07       	cpc	r25, r31
    286a:	89 f4       	brne	.+34     	; 0x288e <__stack+0x8f>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    286c:	80 91 b1 09 	lds	r24, 0x09B1
    2870:	85 ff       	sbrs	r24, 5
    2872:	fc cf       	rjmp	.-8      	; 0x286c <__stack+0x6d>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2874:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2878:	80 91 b1 09 	lds	r24, 0x09B1
    287c:	85 ff       	sbrs	r24, 5
    287e:	fc cf       	rjmp	.-8      	; 0x2878 <__stack+0x79>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2880:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2884:	80 91 b1 09 	lds	r24, 0x09B1
    2888:	85 ff       	sbrs	r24, 5
    288a:	fc cf       	rjmp	.-8      	; 0x2884 <__stack+0x85>
    288c:	8e c1       	rjmp	.+796    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    288e:	80 91 b1 09 	lds	r24, 0x09B1
    2892:	85 ff       	sbrs	r24, 5
    2894:	fc cf       	rjmp	.-8      	; 0x288e <__stack+0x8f>
    2896:	00 93 b0 09 	sts	0x09B0, r16
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
								}
								templ = uart_getchar_timeout(&BT_USART);
    289a:	80 eb       	ldi	r24, 0xB0	; 176
    289c:	99 e0       	ldi	r25, 0x09	; 9
    289e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    28a2:	9c 01       	movw	r18, r24
    28a4:	6c 01       	movw	r12, r24
								if(templ == 256) {
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	80 30       	cpi	r24, 0x00	; 0
    28aa:	94 07       	cpc	r25, r20
    28ac:	89 f4       	brne	.+34     	; 0x28d0 <__stack+0xd1>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    28ae:	80 91 b1 09 	lds	r24, 0x09B1
    28b2:	85 ff       	sbrs	r24, 5
    28b4:	fc cf       	rjmp	.-8      	; 0x28ae <__stack+0xaf>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28b6:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    28ba:	80 91 b1 09 	lds	r24, 0x09B1
    28be:	85 ff       	sbrs	r24, 5
    28c0:	fc cf       	rjmp	.-8      	; 0x28ba <__stack+0xbb>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28c2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    28c6:	80 91 b1 09 	lds	r24, 0x09B1
    28ca:	85 ff       	sbrs	r24, 5
    28cc:	fc cf       	rjmp	.-8      	; 0x28c6 <__stack+0xc7>
    28ce:	6d c1       	rjmp	.+730    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28d0:	80 91 b1 09 	lds	r24, 0x09B1
    28d4:	85 ff       	sbrs	r24, 5
    28d6:	fc cf       	rjmp	.-8      	; 0x28d0 <__stack+0xd1>
    28d8:	20 93 b0 09 	sts	0x09B0, r18
									break;
								}
								else {
									uart_putchar(&BT_USART, templ);
								}
								duty = ((temph)<<8) + templ;
    28dc:	90 2f       	mov	r25, r16
    28de:	88 27       	eor	r24, r24
    28e0:	28 0f       	add	r18, r24
    28e2:	39 1f       	adc	r19, r25
}

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm1(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCDEN_bm;
    28e4:	80 91 01 0a 	lds	r24, 0x0A01
    28e8:	80 68       	ori	r24, 0x80	; 128
    28ea:	f2 01       	movw	r30, r4
    28ec:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm;
    28ee:	f8 e0       	ldi	r31, 0x08	; 8
    28f0:	f0 93 81 06 	sts	0x0681, r31
	TCE0.CCD = duty;
    28f4:	f2 01       	movw	r30, r4
    28f6:	26 a7       	std	Z+46, r18	; 0x2e
    28f8:	37 a7       	std	Z+47, r19	; 0x2f
    28fa:	6d c1       	rjmp	.+730    	; 0x2bd6 <__stack+0x3d7>
							}
						}
						break;
					// Set DAC voltage on one of the two DAC ports
					case 'd':
						temph = uart_getchar_timeout(&BT_USART);
    28fc:	80 eb       	ldi	r24, 0xB0	; 176
    28fe:	99 e0       	ldi	r25, 0x09	; 9
    2900:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2904:	9c 01       	movw	r18, r24
						if(temph == 256) {
    2906:	f1 e0       	ldi	r31, 0x01	; 1
    2908:	80 30       	cpi	r24, 0x00	; 0
    290a:	9f 07       	cpc	r25, r31
    290c:	89 f4       	brne	.+34     	; 0x2930 <__stack+0x131>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    290e:	80 91 b1 09 	lds	r24, 0x09B1
    2912:	85 ff       	sbrs	r24, 5
    2914:	fc cf       	rjmp	.-8      	; 0x290e <__stack+0x10f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2916:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    291a:	80 91 b1 09 	lds	r24, 0x09B1
    291e:	85 ff       	sbrs	r24, 5
    2920:	fc cf       	rjmp	.-8      	; 0x291a <__stack+0x11b>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2922:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2926:	80 91 b1 09 	lds	r24, 0x09B1
    292a:	85 ff       	sbrs	r24, 5
    292c:	fc cf       	rjmp	.-8      	; 0x2926 <__stack+0x127>
    292e:	3d c1       	rjmp	.+634    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2930:	80 91 b1 09 	lds	r24, 0x09B1
    2934:	85 ff       	sbrs	r24, 5
    2936:	fc cf       	rjmp	.-8      	; 0x2930 <__stack+0x131>
    2938:	20 93 b0 09 	sts	0x09B0, r18
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
							if(temph == '0') {				
    293c:	20 33       	cpi	r18, 0x30	; 48
    293e:	31 05       	cpc	r19, r1
    2940:	61 f5       	brne	.+88     	; 0x299a <__stack+0x19b>
								temph = uart_getchar_timeout(&BT_USART);
    2942:	80 eb       	ldi	r24, 0xB0	; 176
    2944:	99 e0       	ldi	r25, 0x09	; 9
    2946:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
								if(temph == 256) {
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	80 30       	cpi	r24, 0x00	; 0
    294e:	94 07       	cpc	r25, r20
    2950:	89 f4       	brne	.+34     	; 0x2974 <__stack+0x175>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2952:	80 91 b1 09 	lds	r24, 0x09B1
    2956:	85 ff       	sbrs	r24, 5
    2958:	fc cf       	rjmp	.-8      	; 0x2952 <__stack+0x153>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    295a:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    295e:	80 91 b1 09 	lds	r24, 0x09B1
    2962:	85 ff       	sbrs	r24, 5
    2964:	fc cf       	rjmp	.-8      	; 0x295e <__stack+0x15f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2966:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    296a:	80 91 b1 09 	lds	r24, 0x09B1
    296e:	85 ff       	sbrs	r24, 5
    2970:	fc cf       	rjmp	.-8      	; 0x296a <__stack+0x16b>
    2972:	1b c1       	rjmp	.+566    	; 0x2baa <__stack+0x3ab>
									uart_putchar(&BT_USART, 'R');
									uart_putchar(&BT_USART, 'R');
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
    2974:	98 2f       	mov	r25, r24
    2976:	80 91 b1 09 	lds	r24, 0x09B1
    297a:	85 ff       	sbrs	r24, 5
    297c:	fc cf       	rjmp	.-8      	; 0x2976 <__stack+0x177>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    297e:	90 93 b0 09 	sts	0x09B0, r25
}

// Sets DAC Ch0
void set_dac0(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
    2982:	80 91 20 03 	lds	r24, 0x0320
    2986:	84 60       	ori	r24, 0x04	; 4
    2988:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
    298c:	80 91 25 03 	lds	r24, 0x0325
    2990:	80 ff       	sbrs	r24, 0
    2992:	fc cf       	rjmp	.-8      	; 0x298c <__stack+0x18d>
	
	DACB.CH0DATAH = val;
    2994:	90 93 39 03 	sts	0x0339, r25
    2998:	1e c1       	rjmp	.+572    	; 0x2bd6 <__stack+0x3d7>
									set_dac0(temph);						
								}
							}
							else if(temph == '1') {				
    299a:	21 33       	cpi	r18, 0x31	; 49
    299c:	31 05       	cpc	r19, r1
    299e:	09 f0       	breq	.+2      	; 0x29a2 <__stack+0x1a3>
    29a0:	1a c1       	rjmp	.+564    	; 0x2bd6 <__stack+0x3d7>
								temph = uart_getchar_timeout(&BT_USART);
    29a2:	80 eb       	ldi	r24, 0xB0	; 176
    29a4:	99 e0       	ldi	r25, 0x09	; 9
    29a6:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
								if(temph == 256) {
    29aa:	51 e0       	ldi	r21, 0x01	; 1
    29ac:	80 30       	cpi	r24, 0x00	; 0
    29ae:	95 07       	cpc	r25, r21
    29b0:	89 f4       	brne	.+34     	; 0x29d4 <__stack+0x1d5>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    29b2:	80 91 b1 09 	lds	r24, 0x09B1
    29b6:	85 ff       	sbrs	r24, 5
    29b8:	fc cf       	rjmp	.-8      	; 0x29b2 <__stack+0x1b3>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29ba:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    29be:	80 91 b1 09 	lds	r24, 0x09B1
    29c2:	85 ff       	sbrs	r24, 5
    29c4:	fc cf       	rjmp	.-8      	; 0x29be <__stack+0x1bf>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29c6:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    29ca:	80 91 b1 09 	lds	r24, 0x09B1
    29ce:	85 ff       	sbrs	r24, 5
    29d0:	fc cf       	rjmp	.-8      	; 0x29ca <__stack+0x1cb>
    29d2:	eb c0       	rjmp	.+470    	; 0x2baa <__stack+0x3ab>
									uart_putchar(&BT_USART, 'R');
									uart_putchar(&BT_USART, 'R');
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
    29d4:	98 2f       	mov	r25, r24
    29d6:	80 91 b1 09 	lds	r24, 0x09B1
    29da:	85 ff       	sbrs	r24, 5
    29dc:	fc cf       	rjmp	.-8      	; 0x29d6 <__stack+0x1d7>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29de:	90 93 b0 09 	sts	0x09B0, r25
}

// Sets DAC Ch1
void set_dac1(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
    29e2:	80 91 20 03 	lds	r24, 0x0320
    29e6:	88 60       	ori	r24, 0x08	; 8
    29e8:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
    29ec:	80 91 25 03 	lds	r24, 0x0325
    29f0:	81 ff       	sbrs	r24, 1
    29f2:	fc cf       	rjmp	.-8      	; 0x29ec <__stack+0x1ed>
	
	DACB.CH1DATAH = val;
    29f4:	90 93 3b 03 	sts	0x033B, r25
    29f8:	ee c0       	rjmp	.+476    	; 0x2bd6 <__stack+0x3d7>
					case 'Q':
						exit = 1;
						break;
					// Configures the baud rate of the auxiliary UART
					case 'C':
						temph = uart_getchar_timeout(&BT_USART);
    29fa:	80 eb       	ldi	r24, 0xB0	; 176
    29fc:	99 e0       	ldi	r25, 0x09	; 9
    29fe:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2a02:	7c 01       	movw	r14, r24
						if(temph == 256) {
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	80 30       	cpi	r24, 0x00	; 0
    2a08:	96 07       	cpc	r25, r22
    2a0a:	89 f4       	brne	.+34     	; 0x2a2e <__stack+0x22f>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a0c:	80 91 b1 09 	lds	r24, 0x09B1
    2a10:	85 ff       	sbrs	r24, 5
    2a12:	fc cf       	rjmp	.-8      	; 0x2a0c <__stack+0x20d>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a14:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a18:	80 91 b1 09 	lds	r24, 0x09B1
    2a1c:	85 ff       	sbrs	r24, 5
    2a1e:	fc cf       	rjmp	.-8      	; 0x2a18 <__stack+0x219>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a20:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a24:	80 91 b1 09 	lds	r24, 0x09B1
    2a28:	85 ff       	sbrs	r24, 5
    2a2a:	fc cf       	rjmp	.-8      	; 0x2a24 <__stack+0x225>
    2a2c:	be c0       	rjmp	.+380    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a2e:	80 91 b1 09 	lds	r24, 0x09B1
    2a32:	85 ff       	sbrs	r24, 5
    2a34:	fc cf       	rjmp	.-8      	; 0x2a2e <__stack+0x22f>
    2a36:	e0 92 b0 09 	sts	0x09B0, r14
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2a3a:	80 eb       	ldi	r24, 0xB0	; 176
    2a3c:	99 e0       	ldi	r25, 0x09	; 9
    2a3e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2a42:	8c 01       	movw	r16, r24
    2a44:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	00 30       	cpi	r16, 0x00	; 0
    2a4a:	18 07       	cpc	r17, r24
    2a4c:	89 f4       	brne	.+34     	; 0x2a70 <__stack+0x271>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a4e:	80 91 b1 09 	lds	r24, 0x09B1
    2a52:	85 ff       	sbrs	r24, 5
    2a54:	fc cf       	rjmp	.-8      	; 0x2a4e <__stack+0x24f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a56:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a5a:	80 91 b1 09 	lds	r24, 0x09B1
    2a5e:	85 ff       	sbrs	r24, 5
    2a60:	fc cf       	rjmp	.-8      	; 0x2a5a <__stack+0x25b>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a62:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a66:	80 91 b1 09 	lds	r24, 0x09B1
    2a6a:	85 ff       	sbrs	r24, 5
    2a6c:	fc cf       	rjmp	.-8      	; 0x2a66 <__stack+0x267>
    2a6e:	9d c0       	rjmp	.+314    	; 0x2baa <__stack+0x3ab>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a70:	80 91 b1 09 	lds	r24, 0x09B1
    2a74:	85 ff       	sbrs	r24, 5
    2a76:	fc cf       	rjmp	.-8      	; 0x2a70 <__stack+0x271>
    2a78:	00 93 b0 09 	sts	0x09B0, r16
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
						templ = uart_getchar_timeout(&BT_USART);
    2a7c:	80 eb       	ldi	r24, 0xB0	; 176
    2a7e:	99 e0       	ldi	r25, 0x09	; 9
    2a80:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2a84:	9c 01       	movw	r18, r24
						if(templ == 256) {
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	20 30       	cpi	r18, 0x00	; 0
    2a8a:	39 07       	cpc	r19, r25
    2a8c:	99 f4       	brne	.+38     	; 0x2ab4 <__stack+0x2b5>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a8e:	80 91 b1 09 	lds	r24, 0x09B1
    2a92:	85 ff       	sbrs	r24, 5
    2a94:	fc cf       	rjmp	.-8      	; 0x2a8e <__stack+0x28f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a96:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a9a:	80 91 b1 09 	lds	r24, 0x09B1
    2a9e:	85 ff       	sbrs	r24, 5
    2aa0:	fc cf       	rjmp	.-8      	; 0x2a9a <__stack+0x29b>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2aa2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2aa6:	80 91 b1 09 	lds	r24, 0x09B1
    2aaa:	85 ff       	sbrs	r24, 5
    2aac:	fc cf       	rjmp	.-8      	; 0x2aa6 <__stack+0x2a7>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2aae:	90 92 b0 09 	sts	0x09B0, r9
    2ab2:	1b c0       	rjmp	.+54     	; 0x2aea <__stack+0x2eb>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    2ab4:	42 2f       	mov	r20, r18
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2ab6:	80 91 b1 09 	lds	r24, 0x09B1
    2aba:	85 ff       	sbrs	r24, 5
    2abc:	fc cf       	rjmp	.-8      	; 0x2ab6 <__stack+0x2b7>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2abe:	40 93 b0 09 	sts	0x09B0, r20
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2ac2:	80 91 b1 09 	lds	r24, 0x09B1
    2ac6:	85 ff       	sbrs	r24, 5
    2ac8:	fc cf       	rjmp	.-8      	; 0x2ac2 <__stack+0x2c3>
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
    2aca:	9e 2d       	mov	r25, r14
    2acc:	88 27       	eor	r24, r24
    2ace:	80 0f       	add	r24, r16
    2ad0:	91 1f       	adc	r25, r17
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2ad2:	40 93 b0 09 	sts	0x09B0, r20
}

// Sets the baud rate if the aux serial port is already set up
void set_aux_baud_rate(int baud, char scale) 
{
	USART_Baudrate_Set(&AUX_USART, baud, scale);
    2ad6:	80 93 a6 08 	sts	0x08A6, r24
    2ada:	42 95       	swap	r20
    2adc:	40 7f       	andi	r20, 0xF0	; 240
    2ade:	89 2f       	mov	r24, r25
    2ae0:	99 0f       	add	r25, r25
    2ae2:	99 0b       	sbc	r25, r25
    2ae4:	48 2b       	or	r20, r24
    2ae6:	40 93 a7 08 	sts	0x08A7, r20
    2aea:	69 01       	movw	r12, r18
    2aec:	74 c0       	rjmp	.+232    	; 0x2bd6 <__stack+0x3d7>
						uart_putchar(&BT_USART, scale);
						set_aux_baud_rate(baud, scale);
						break;
					// BT-serial high speed bridge mode
					case 'Z':
					        serial_bridge();
    2aee:	0e 94 c9 01 	call	0x392	; 0x392 <serial_bridge>
    2af2:	71 c0       	rjmp	.+226    	; 0x2bd6 <__stack+0x3d7>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    2af4:	e0 91 ee 23 	lds	r30, 0x23EE
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	e5 51       	subi	r30, 0x15	; 21
    2afc:	fd 4d       	sbci	r31, 0xDD	; 221
    2afe:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    2b00:	80 91 ee 23 	lds	r24, 0x23EE
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	80 93 ee 23 	sts	0x23EE, r24
					        break;
					case 'r':
						count_buff = 0;
						while(USART_RXBufferData_Available(&AUX_data)) {
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
    2b0a:	e1 e0       	ldi	r30, 0x01	; 1
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	ec 0f       	add	r30, r28
    2b10:	fd 1f       	adc	r31, r29
    2b12:	e2 0f       	add	r30, r18
    2b14:	f1 1d       	adc	r31, r1
    2b16:	90 83       	st	Z, r25
							count_buff++;
    2b18:	2f 5f       	subi	r18, 0xFF	; 255
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    2b1a:	90 91 ed 23 	lds	r25, 0x23ED
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    2b1e:	80 91 ee 23 	lds	r24, 0x23EE
					case 'Z':
					        serial_bridge();
					        break;
					case 'r':
						count_buff = 0;
						while(USART_RXBufferData_Available(&AUX_data)) {
    2b22:	98 17       	cp	r25, r24
    2b24:	39 f7       	brne	.-50     	; 0x2af4 <__stack+0x2f5>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b26:	80 91 b1 09 	lds	r24, 0x09B1
    2b2a:	85 ff       	sbrs	r24, 5
    2b2c:	fc cf       	rjmp	.-8      	; 0x2b26 <__stack+0x327>
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
							count_buff++;
						}
						uart_putchar(&BT_USART, count_buff+1);
    2b2e:	2f 5f       	subi	r18, 0xFF	; 255
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b30:	20 93 b0 09 	sts	0x09B0, r18
    2b34:	21 50       	subi	r18, 0x01	; 1
    2b36:	fe 01       	movw	r30, r28
    2b38:	31 96       	adiw	r30, 0x01	; 1
						for(int i = 0; i < count_buff; i++) {
    2b3a:	af 01       	movw	r20, r30
    2b3c:	42 0f       	add	r20, r18
    2b3e:	51 1d       	adc	r21, r1
    2b40:	9a 01       	movw	r18, r20
    2b42:	08 c0       	rjmp	.+16     	; 0x2b54 <__stack+0x355>
							uart_putchar(&BT_USART, temp_array[i]);
    2b44:	90 81       	ld	r25, Z
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b46:	80 91 b1 09 	lds	r24, 0x09B1
    2b4a:	85 ff       	sbrs	r24, 5
    2b4c:	fc cf       	rjmp	.-8      	; 0x2b46 <__stack+0x347>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b4e:	90 93 b0 09 	sts	0x09B0, r25
    2b52:	31 96       	adiw	r30, 0x01	; 1
						while(USART_RXBufferData_Available(&AUX_data)) {
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
							count_buff++;
						}
						uart_putchar(&BT_USART, count_buff+1);
						for(int i = 0; i < count_buff; i++) {
    2b54:	e2 17       	cp	r30, r18
    2b56:	f3 07       	cpc	r31, r19
    2b58:	a9 f7       	brne	.-22     	; 0x2b44 <__stack+0x345>
    2b5a:	3d c0       	rjmp	.+122    	; 0x2bd6 <__stack+0x3d7>
							uart_putchar(&BT_USART, temp_array[i]);
						}
						break;
					// Transmit a stream of characters from bluetooth to auxiliary serial
					case 't':
						temph= uart_getchar_timeout(&BT_USART);
    2b5c:	80 eb       	ldi	r24, 0xB0	; 176
    2b5e:	99 e0       	ldi	r25, 0x09	; 9
    2b60:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2b64:	8c 01       	movw	r16, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b66:	80 91 b1 09 	lds	r24, 0x09B1
    2b6a:	85 ff       	sbrs	r24, 5
    2b6c:	fc cf       	rjmp	.-8      	; 0x2b66 <__stack+0x367>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b6e:	00 93 b0 09 	sts	0x09B0, r16
    2b72:	ee 24       	eor	r14, r14
    2b74:	ff 24       	eor	r15, r15
    2b76:	2c c0       	rjmp	.+88     	; 0x2bd0 <__stack+0x3d1>
						uart_putchar(&BT_USART, temph);
						for(int count = 0; count < temph; count++) {	
							templ= uart_getchar_timeout(&BT_USART);
    2b78:	80 eb       	ldi	r24, 0xB0	; 176
    2b7a:	99 e0       	ldi	r25, 0x09	; 9
    2b7c:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2b80:	6c 01       	movw	r12, r24
							
							if(templ == 256) {
    2b82:	51 e0       	ldi	r21, 0x01	; 1
    2b84:	80 30       	cpi	r24, 0x00	; 0
    2b86:	95 07       	cpc	r25, r21
    2b88:	99 f4       	brne	.+38     	; 0x2bb0 <__stack+0x3b1>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b8a:	80 91 b1 09 	lds	r24, 0x09B1
    2b8e:	85 ff       	sbrs	r24, 5
    2b90:	fc cf       	rjmp	.-8      	; 0x2b8a <__stack+0x38b>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b92:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b96:	80 91 b1 09 	lds	r24, 0x09B1
    2b9a:	85 ff       	sbrs	r24, 5
    2b9c:	fc cf       	rjmp	.-8      	; 0x2b96 <__stack+0x397>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b9e:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2ba2:	80 91 b1 09 	lds	r24, 0x09B1
    2ba6:	85 ff       	sbrs	r24, 5
    2ba8:	fc cf       	rjmp	.-8      	; 0x2ba2 <__stack+0x3a3>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2baa:	90 92 b0 09 	sts	0x09B0, r9
    2bae:	13 c0       	rjmp	.+38     	; 0x2bd6 <__stack+0x3d7>
								uart_putchar(&BT_USART, 'R');
								uart_putchar(&BT_USART, 'R');
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
    2bb0:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2bb2:	80 91 b1 09 	lds	r24, 0x09B1
    2bb6:	85 ff       	sbrs	r24, 5
    2bb8:	fc cf       	rjmp	.-8      	; 0x2bb2 <__stack+0x3b3>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2bba:	90 93 b0 09 	sts	0x09B0, r25
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2bbe:	80 91 a1 08 	lds	r24, 0x08A1
    2bc2:	85 ff       	sbrs	r24, 5
    2bc4:	fc cf       	rjmp	.-8      	; 0x2bbe <__stack+0x3bf>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2bc6:	90 93 a0 08 	sts	0x08A0, r25
						break;
					// Transmit a stream of characters from bluetooth to auxiliary serial
					case 't':
						temph= uart_getchar_timeout(&BT_USART);
						uart_putchar(&BT_USART, temph);
						for(int count = 0; count < temph; count++) {	
    2bca:	08 94       	sec
    2bcc:	e1 1c       	adc	r14, r1
    2bce:	f1 1c       	adc	r15, r1
    2bd0:	e0 16       	cp	r14, r16
    2bd2:	f1 06       	cpc	r15, r17
    2bd4:	88 f2       	brcs	.-94     	; 0x2b78 <__stack+0x379>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	04 c0       	rjmp	.+8      	; 0x2be8 <__stack+0x3e9>
    2be0:	88 a1       	ldd	r24, Y+32	; 0x20
    2be2:	99 a1       	ldd	r25, Y+33	; 0x21
    2be4:	aa a1       	ldd	r26, Y+34	; 0x22
    2be6:	bb a1       	ldd	r27, Y+35	; 0x23
			if (choice != 42)
                            _delay_ms(500);
		}

		// Active part of the program - listens for commands and responds as necessary
		while(exit == 0) {
    2be8:	28 a1       	ldd	r18, Y+32	; 0x20
    2bea:	39 a1       	ldd	r19, Y+33	; 0x21
    2bec:	4a a1       	ldd	r20, Y+34	; 0x22
    2bee:	5b a1       	ldd	r21, Y+35	; 0x23
    2bf0:	21 58       	subi	r18, 0x81	; 129
    2bf2:	3b 45       	sbci	r19, 0x5B	; 91
    2bf4:	44 40       	sbci	r20, 0x04	; 4
    2bf6:	52 40       	sbci	r21, 0x02	; 2
    2bf8:	14 f0       	brlt	.+4      	; 0x2bfe <__stack+0x3ff>
    2bfa:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <main+0x6e>
    2bfe:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <main+0x124>

00002c02 <__divmodhi4>:
    2c02:	97 fb       	bst	r25, 7
    2c04:	09 2e       	mov	r0, r25
    2c06:	07 26       	eor	r0, r23
    2c08:	0a d0       	rcall	.+20     	; 0x2c1e <__divmodhi4_neg1>
    2c0a:	77 fd       	sbrc	r23, 7
    2c0c:	04 d0       	rcall	.+8      	; 0x2c16 <__divmodhi4_neg2>
    2c0e:	0c d0       	rcall	.+24     	; 0x2c28 <__udivmodhi4>
    2c10:	06 d0       	rcall	.+12     	; 0x2c1e <__divmodhi4_neg1>
    2c12:	00 20       	and	r0, r0
    2c14:	1a f4       	brpl	.+6      	; 0x2c1c <__divmodhi4_exit>

00002c16 <__divmodhi4_neg2>:
    2c16:	70 95       	com	r23
    2c18:	61 95       	neg	r22
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255

00002c1c <__divmodhi4_exit>:
    2c1c:	08 95       	ret

00002c1e <__divmodhi4_neg1>:
    2c1e:	f6 f7       	brtc	.-4      	; 0x2c1c <__divmodhi4_exit>
    2c20:	90 95       	com	r25
    2c22:	81 95       	neg	r24
    2c24:	9f 4f       	sbci	r25, 0xFF	; 255
    2c26:	08 95       	ret

00002c28 <__udivmodhi4>:
    2c28:	aa 1b       	sub	r26, r26
    2c2a:	bb 1b       	sub	r27, r27
    2c2c:	51 e1       	ldi	r21, 0x11	; 17
    2c2e:	07 c0       	rjmp	.+14     	; 0x2c3e <__udivmodhi4_ep>

00002c30 <__udivmodhi4_loop>:
    2c30:	aa 1f       	adc	r26, r26
    2c32:	bb 1f       	adc	r27, r27
    2c34:	a6 17       	cp	r26, r22
    2c36:	b7 07       	cpc	r27, r23
    2c38:	10 f0       	brcs	.+4      	; 0x2c3e <__udivmodhi4_ep>
    2c3a:	a6 1b       	sub	r26, r22
    2c3c:	b7 0b       	sbc	r27, r23

00002c3e <__udivmodhi4_ep>:
    2c3e:	88 1f       	adc	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	5a 95       	dec	r21
    2c44:	a9 f7       	brne	.-22     	; 0x2c30 <__udivmodhi4_loop>
    2c46:	80 95       	com	r24
    2c48:	90 95       	com	r25
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	08 95       	ret

00002c50 <_exit>:
    2c50:	f8 94       	cli

00002c52 <__stop_program>:
    2c52:	ff cf       	rjmp	.-2      	; 0x2c52 <__stop_program>
