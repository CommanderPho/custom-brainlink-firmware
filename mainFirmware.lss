
mainFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bc0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000003f2  00802000  00802000  00002c34  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00002c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000072b  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000596f  00000000  00000000  0000337f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000466  00000000  00000000  00008cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003080  00000000  00000000  00009154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000540  00000000  00000000  0000c1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002d6e  00000000  00000000  0000c714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000196b  00000000  00000000  0000f482  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000180  00000000  00000000  00010ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_20>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_25>
      68:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      6c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      70:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      74:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      7c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      80:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      84:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      8c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      90:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      94:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      98:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      9c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      a8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      ac:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      b8:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_46>
      bc:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_47>
      c0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      c4:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_49>
      c8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      cc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      d8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      dc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      e8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      ec:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f0:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      f8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      fc:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     100:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     104:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     108:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     10c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     110:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     114:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     118:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     11c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     120:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     124:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     128:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     12c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     130:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     134:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     138:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     13c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     140:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     144:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     148:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     14c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     150:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     154:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     158:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     15c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     160:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     164:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     168:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     16c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_91>
     170:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
     174:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_clear_bss>:
     184:	13 e2       	ldi	r17, 0x23	; 35
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a2 3f       	cpi	r26, 0xF2	; 242
     190:	b1 07       	cpc	r27, r17
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 4c 0c 	call	0x1898	; 0x1898 <main>
     198:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <init_clock>:

// Just sets up the Xmega clock to 32 MHz (defaults to 2 MHz without this)
void init_clock()
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);		// turn on 32MHz internal RC oscillator
     1a0:	80 91 50 00 	lds	r24, 0x0050
     1a4:	82 60       	ori	r24, 0x02	; 2
     1a6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
     1aa:	80 91 51 00 	lds	r24, 0x0051
     1ae:	81 ff       	sbrs	r24, 1
     1b0:	fc cf       	rjmp	.-8      	; 0x1aa <init_clock+0xa>
	CCP= CCP_IOREG_gc;			// allow modification of protected register
     1b2:	88 ed       	ldi	r24, 0xD8	; 216
     1b4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL |= CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
     1b6:	80 91 40 00 	lds	r24, 0x0040
     1ba:	81 60       	ori	r24, 0x01	; 1
     1bc:	80 93 40 00 	sts	0x0040, r24
}
     1c0:	08 95       	ret

000001c2 <init_led>:
// Helper functions to control Brainlink's full color LED

void init_led() {
	// Set clock to 4 MHz
	TCD0.CTRLA = TC_CLKSEL_DIV8_gc;
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b9 e0       	ldi	r27, 0x09	; 9
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	8c 93       	st	X, r24
	
	// Turn on single slope pwm waveform generation on CCA, B, and C (LED pins)
	TCD0.CTRLB = (TC0_CCCEN_bm | TC0_CCBEN_bm | TC0_CCAEN_bm) | TC_WGMODE_SS_gc;
     1ca:	83 e7       	ldi	r24, 0x73	; 115
     1cc:	11 96       	adiw	r26, 0x01	; 1
     1ce:	8c 93       	st	X, r24
     1d0:	11 97       	sbiw	r26, 0x01	; 1

	// Set period to 0xFFFF
	TCD0.PERBUF = 0xFFFF;
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	9f ef       	ldi	r25, 0xFF	; 255
     1d6:	d6 96       	adiw	r26, 0x36	; 54
     1d8:	8d 93       	st	X+, r24
     1da:	9c 93       	st	X, r25
     1dc:	d7 97       	sbiw	r26, 0x37	; 55

	// Set LED pins to output
	LEDPORT.DIRSET |= REDLED | GREENLED | BLUELED;
     1de:	e0 e6       	ldi	r30, 0x60	; 96
     1e0:	f6 e0       	ldi	r31, 0x06	; 6
     1e2:	81 81       	ldd	r24, Z+1	; 0x01
     1e4:	87 60       	ori	r24, 0x07	; 7
     1e6:	81 83       	std	Z+1, r24	; 0x01

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	d9 96       	adiw	r26, 0x39	; 57
     1ec:	8c 93       	st	X, r24
     1ee:	d9 97       	sbiw	r26, 0x39	; 57
	TCD0.CCBBUFH = 255-blue;
     1f0:	db 96       	adiw	r26, 0x3b	; 59
     1f2:	8c 93       	st	X, r24
	TCD0.CCCBUFH = 255-green;
     1f4:	80 93 3d 09 	sts	0x093D, r24

	// Set LED pins to output
	LEDPORT.DIRSET |= REDLED | GREENLED | BLUELED;
	// Set the LED to 0, just in case
	set_led(0,0,0);
}
     1f8:	08 95       	ret

000001fa <set_led>:

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
     1fa:	80 95       	com	r24
     1fc:	e0 e0       	ldi	r30, 0x00	; 0
     1fe:	f9 e0       	ldi	r31, 0x09	; 9
     200:	81 af       	std	Z+57, r24	; 0x39
	TCD0.CCBBUFH = 255-blue;
     202:	40 95       	com	r20
     204:	43 af       	std	Z+59, r20	; 0x3b
	TCD0.CCCBUFH = 255-green;
     206:	60 95       	com	r22
     208:	60 93 3d 09 	sts	0x093D, r22

     20c:	08 95       	ret

0000020e <init_bt_uart>:
/* Source file with functions for Brainlink's bluetooth and auxiliary serial ports. */

// Initializes the serial port attached to Brainlink's bluetooth module
void init_bt_uart() {
	// set rx and tx pin directionality
	PORTD.DIRSET = PIN7_bm;
     20e:	e0 e6       	ldi	r30, 0x60	; 96
     210:	f6 e0       	ldi	r31, 0x06	; 6
     212:	80 e8       	ldi	r24, 0x80	; 128
     214:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN6_bm;
     216:	80 e4       	ldi	r24, 0x40	; 64
     218:	82 83       	std	Z+2, r24	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&BT_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     21a:	e0 eb       	ldi	r30, 0xB0	; 176
     21c:	f9 e0       	ldi	r31, 0x09	; 9
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	85 83       	std	Z+5, r24	; 0x05
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
	usart_data->usart = usart;
     222:	e0 93 05 20 	sts	0x2005, r30
     226:	f0 93 06 20 	sts	0x2006, r31
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     22a:	10 92 08 21 	sts	0x2108, r1
	usart_data->buffer.RX_Head = 0;
     22e:	10 92 07 21 	sts	0x2107, r1

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&BT_data, &BT_USART);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(BT_data.usart, USART_RXCINTLVL_MED_gc);
     232:	83 81       	ldd	r24, Z+3	; 0x03
     234:	8f 7c       	andi	r24, 0xCF	; 207
     236:	80 62       	ori	r24, 0x20	; 32
     238:	83 83       	std	Z+3, r24	; 0x03
	/* Enable PMIC interrupt level medium. */
	PMIC.CTRL |= PMIC_MEDLVLEX_bm;
     23a:	a0 ea       	ldi	r26, 0xA0	; 160
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	12 96       	adiw	r26, 0x02	; 2
     240:	8c 91       	ld	r24, X
     242:	12 97       	sbiw	r26, 0x02	; 2
     244:	82 60       	ori	r24, 0x02	; 2
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	8c 93       	st	X, r24

	// Set baud rate to 115,200 using -3 for scale, 131 for setting.  Yields 0.08% error
	USART_Baudrate_Set(&BT_USART, 131 , -3);
     24a:	83 e8       	ldi	r24, 0x83	; 131
     24c:	86 83       	std	Z+6, r24	; 0x06
     24e:	80 ed       	ldi	r24, 0xD0	; 208
     250:	87 83       	std	Z+7, r24	; 0x07

	// Enable pins
	USART_Rx_Enable(&BT_USART);
     252:	84 81       	ldd	r24, Z+4	; 0x04
     254:	80 61       	ori	r24, 0x10	; 16
     256:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&BT_USART);
     258:	84 81       	ldd	r24, Z+4	; 0x04
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	84 83       	std	Z+4, r24	; 0x04
	
}
     25e:	08 95       	ret

00000260 <init_aux_uart>:

// Initializes auxiliary serial port - variables required to set baud rate are passed to the function
void init_aux_uart(int baud, char scale) {
	// set rx and tx directionality
	PORTC.DIRSET = PIN3_bm;
     260:	e0 e4       	ldi	r30, 0x40	; 64
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	28 e0       	ldi	r18, 0x08	; 8
     266:	21 83       	std	Z+1, r18	; 0x01
	PORTC.DIRCLR = PIN2_bm;
     268:	24 e0       	ldi	r18, 0x04	; 4
     26a:	22 83       	std	Z+2, r18	; 0x02

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&AUX_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     26c:	e0 ea       	ldi	r30, 0xA0	; 160
     26e:	f8 e0       	ldi	r31, 0x08	; 8
     270:	23 e0       	ldi	r18, 0x03	; 3
     272:	25 83       	std	Z+5, r18	; 0x05
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
	usart_data->usart = usart;
     274:	e0 93 eb 22 	sts	0x22EB, r30
     278:	f0 93 ec 22 	sts	0x22EC, r31
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     27c:	10 92 ee 23 	sts	0x23EE, r1
	usart_data->buffer.RX_Head = 0;
     280:	10 92 ed 23 	sts	0x23ED, r1

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&AUX_data, &AUX_USART);

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(AUX_data.usart, USART_RXCINTLVL_MED_gc);
     284:	23 81       	ldd	r18, Z+3	; 0x03
     286:	2f 7c       	andi	r18, 0xCF	; 207
     288:	20 62       	ori	r18, 0x20	; 32
     28a:	23 83       	std	Z+3, r18	; 0x03
	/* Enable PMIC interrupt level medium. */
	PMIC.CTRL |= PMIC_MEDLVLEX_bm;
     28c:	a0 ea       	ldi	r26, 0xA0	; 160
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	12 96       	adiw	r26, 0x02	; 2
     292:	2c 91       	ld	r18, X
     294:	12 97       	sbiw	r26, 0x02	; 2
     296:	22 60       	ori	r18, 0x02	; 2
     298:	12 96       	adiw	r26, 0x02	; 2
     29a:	2c 93       	st	X, r18
	// Set baud rate to that selected by user (defaults to 115200)
	USART_Baudrate_Set(&AUX_USART, baud, scale);
     29c:	86 83       	std	Z+6, r24	; 0x06
     29e:	62 95       	swap	r22
     2a0:	60 7f       	andi	r22, 0xF0	; 240
     2a2:	89 2f       	mov	r24, r25
     2a4:	99 0f       	add	r25, r25
     2a6:	99 0b       	sbc	r25, r25
     2a8:	68 2b       	or	r22, r24
     2aa:	67 83       	std	Z+7, r22	; 0x07

	// Enable pins
	USART_Rx_Enable(&AUX_USART);
     2ac:	84 81       	ldd	r24, Z+4	; 0x04
     2ae:	80 61       	ori	r24, 0x10	; 16
     2b0:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&AUX_USART);
     2b2:	84 81       	ldd	r24, Z+4	; 0x04
     2b4:	88 60       	ori	r24, 0x08	; 8
     2b6:	84 83       	std	Z+4, r24	; 0x04
	
}
     2b8:	08 95       	ret

000002ba <set_aux_baud_rate>:

// Sets the baud rate if the aux serial port is already set up
void set_aux_baud_rate(int baud, char scale) 
{
	USART_Baudrate_Set(&AUX_USART, baud, scale);
     2ba:	e0 ea       	ldi	r30, 0xA0	; 160
     2bc:	f8 e0       	ldi	r31, 0x08	; 8
     2be:	86 83       	std	Z+6, r24	; 0x06
     2c0:	62 95       	swap	r22
     2c2:	60 7f       	andi	r22, 0xF0	; 240
     2c4:	89 2f       	mov	r24, r25
     2c6:	99 0f       	add	r25, r25
     2c8:	99 0b       	sbc	r25, r25
     2ca:	68 2b       	or	r22, r24
     2cc:	67 83       	std	Z+7, r22	; 0x07
}
     2ce:	08 95       	ret

000002d0 <uart_putchar>:

// Used to send a byte over a serial port
void uart_putchar(USART_t * usart, char c) {
     2d0:	fc 01       	movw	r30, r24

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
     2d2:	81 81       	ldd	r24, Z+1	; 0x01
     2d4:	85 ff       	sbrs	r24, 5
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <uart_putchar+0x2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
     2d8:	60 83       	st	Z, r22
}
     2da:	08 95       	ret

000002dc <uart_getchar_nb>:

// Gets a character without blocking
char uart_getchar_nb(USART_t * usart) {
     2dc:	fc 01       	movw	r30, r24
     2de:	28 ee       	ldi	r18, 0xE8	; 232
     2e0:	33 e0       	ldi	r19, 0x03	; 3

	int timeout = 1000;
	do{
	/* Wait until data received or a timeout.*/
	timeout--;
     2e2:	21 50       	subi	r18, 0x01	; 1
     2e4:	30 40       	sbci	r19, 0x00	; 0
	}while(((usart->STATUS & USART_RXCIF_bm) == 0) && timeout!=0);
     2e6:	81 81       	ldd	r24, Z+1	; 0x01
     2e8:	87 fd       	sbrc	r24, 7
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <uart_getchar_nb+0x18>
     2ec:	21 15       	cp	r18, r1
     2ee:	31 05       	cpc	r19, r1
     2f0:	c1 f7       	brne	.-16     	; 0x2e2 <uart_getchar_nb+0x6>
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <uart_getchar_nb+0x20>
	
	if(timeout==0) {
     2f4:	23 2b       	or	r18, r19
     2f6:	11 f0       	breq	.+4      	; 0x2fc <uart_getchar_nb+0x20>
		return 0;
	}
	else {
		return usart->DATA;
     2f8:	80 81       	ld	r24, Z
     2fa:	08 95       	ret
     2fc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     2fe:	08 95       	ret

00000300 <uart_getchar>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     300:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     304:	80 91 08 21 	lds	r24, 0x2108
	
//	do{
//	}while((usart->STATUS & USART_RXCIF_bm) == 0);
//	uart_putchar(usart, (usart->STATUS&0x18));//
	do{
    }while(!USART_RXBufferData_Available(&BT_data));
     308:	98 17       	cp	r25, r24
     30a:	d1 f3       	breq	.-12     	; 0x300 <uart_getchar>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     30c:	e0 91 08 21 	lds	r30, 0x2108
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	eb 5f       	subi	r30, 0xFB	; 251
     314:	ff 4d       	sbci	r31, 0xDF	; 223
     316:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     318:	90 91 08 21 	lds	r25, 0x2108
     31c:	9f 5f       	subi	r25, 0xFF	; 255
     31e:	90 93 08 21 	sts	0x2108, r25
//	uart_putchar(usart, (usart->STATUS&0x18));//
	do{
    }while(!USART_RXBufferData_Available(&BT_data));
	//uart_putchar(usart, (usart->STATUS&0x18));//
	return USART_RXBuffer_GetByte(&BT_data);
}
     322:	08 95       	ret

00000324 <uart_getchar_timeout>:


// Gets a character from the bluetooth buffer, blocks if none exists for roughly 300 ms, then times out and returns 256
// Bug alert  - "USART_t * usart" is unnecessary and not used
int uart_getchar_timeout(USART_t * usart) {
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     328:	40 e4       	ldi	r20, 0x40	; 64
     32a:	5f e1       	ldi	r21, 0x1F	; 31
     32c:	05 c0       	rjmp	.+10     	; 0x338 <uart_getchar_timeout+0x14>
	
	int timeout=0;
	while(!USART_RXBufferData_Available(&BT_data) && timeout < 500) {
		timeout++;
     32e:	2f 5f       	subi	r18, 0xFF	; 255
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	ca 01       	movw	r24, r20
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <uart_getchar_timeout+0x10>
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     338:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     33c:	80 91 08 21 	lds	r24, 0x2108
// Gets a character from the bluetooth buffer, blocks if none exists for roughly 300 ms, then times out and returns 256
// Bug alert  - "USART_t * usart" is unnecessary and not used
int uart_getchar_timeout(USART_t * usart) {
	
	int timeout=0;
	while(!USART_RXBufferData_Available(&BT_data) && timeout < 500) {
     340:	98 17       	cp	r25, r24
     342:	29 f4       	brne	.+10     	; 0x34e <uart_getchar_timeout+0x2a>
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	24 3f       	cpi	r18, 0xF4	; 244
     348:	38 07       	cpc	r19, r24
     34a:	89 f7       	brne	.-30     	; 0x32e <uart_getchar_timeout+0xa>
     34c:	11 c0       	rjmp	.+34     	; 0x370 <uart_getchar_timeout+0x4c>
		timeout++;
		_delay_ms(1);
	}
	if(timeout >= 500)
     34e:	24 5f       	subi	r18, 0xF4	; 244
     350:	31 40       	sbci	r19, 0x01	; 1
     352:	74 f4       	brge	.+28     	; 0x370 <uart_getchar_timeout+0x4c>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     354:	e0 91 08 21 	lds	r30, 0x2108
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	eb 5f       	subi	r30, 0xFB	; 251
     35c:	ff 4d       	sbci	r31, 0xDF	; 223
     35e:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     360:	80 91 08 21 	lds	r24, 0x2108
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 08 21 	sts	0x2108, r24
		_delay_ms(1);
	}
	if(timeout >= 500)
		return 256;
	else
		return USART_RXBuffer_GetByte(&BT_data);
     36a:	29 2f       	mov	r18, r25
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	02 c0       	rjmp	.+4      	; 0x374 <uart_getchar_timeout+0x50>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	31 e0       	ldi	r19, 0x01	; 1
}
     374:	c9 01       	movw	r24, r18
     376:	08 95       	ret

00000378 <aux_uart_getchar>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     378:	80 91 ee 23 	lds	r24, 0x23EE
     37c:	eb ee       	ldi	r30, 0xEB	; 235
     37e:	f2 e2       	ldi	r31, 0x22	; 34
     380:	e8 0f       	add	r30, r24
     382:	f1 1d       	adc	r31, r1
     384:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     386:	90 91 ee 23 	lds	r25, 0x23EE
     38a:	9f 5f       	subi	r25, 0xFF	; 255
     38c:	90 93 ee 23 	sts	0x23EE, r25

// Gets a character from the auxiliary uart buffer, not currently used.
char aux_uart_getchar(USART_t * usart) {
	
	return USART_RXBuffer_GetByte(&AUX_data);
}
     390:	08 95       	ret

00000392 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart)
//                                      USART_DREINTLVL_t dreIntLevel)
{
     392:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     394:	60 83       	st	Z, r22
     396:	71 83       	std	Z+1, r23	; 0x01
	//usart_data->dreIntLevel = dreIntLevel;

	usart_data->buffer.RX_Tail = 0;
     398:	ed 5f       	subi	r30, 0xFD	; 253
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	10 82       	st	Z, r1
	usart_data->buffer.RX_Head = 0;
     39e:	12 92       	st	-Z, r1
	//usart_data->buffer.TX_Tail = 0;
	//usart_data->buffer.TX_Head = 0;
}
     3a0:	08 95       	ret

000003a2 <USART_RXBufferData_Available>:
 *
 *  \retval true      There is data in the receive buffer.
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
     3a2:	fc 01       	movw	r30, r24
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     3a4:	ee 5f       	subi	r30, 0xFE	; 254
     3a6:	fe 4f       	sbci	r31, 0xFE	; 254
     3a8:	91 91       	ld	r25, Z+
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     3aa:	80 81       	ld	r24, Z
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	98 13       	cpse	r25, r24
     3b0:	21 e0       	ldi	r18, 0x01	; 1

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
}
     3b2:	82 2f       	mov	r24, r18
     3b4:	08 95       	ret

000003b6 <USART_RXBuffer_GetByte>:
 *  \param usart_data       The USART_data_t struct instance.
 *
 *  \return         Received data.
 */
uint8_t USART_RXBuffer_GetByte(USART_data_t * usart_data)
{
     3b6:	fc 01       	movw	r30, r24
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     3b8:	dc 01       	movw	r26, r24
     3ba:	ad 5f       	subi	r26, 0xFD	; 253
     3bc:	be 4f       	sbci	r27, 0xFE	; 254
     3be:	8c 91       	ld	r24, X
     3c0:	e8 0f       	add	r30, r24
     3c2:	f1 1d       	adc	r31, r1
     3c4:	82 81       	ldd	r24, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     3c6:	9c 91       	ld	r25, X
     3c8:	9f 5f       	subi	r25, 0xFF	; 255
     3ca:	9c 93       	st	X, r25

	return ans;
}
     3cc:	08 95       	ret

000003ce <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;
	
	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     3d4:	ec 01       	movw	r28, r24
     3d6:	ce 5f       	subi	r28, 0xFE	; 254
     3d8:	de 4f       	sbci	r29, 0xFE	; 254
     3da:	98 81       	ld	r25, Y
     3dc:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     3de:	ad 5f       	subi	r26, 0xFD	; 253
     3e0:	be 4f       	sbci	r27, 0xFE	; 254
     3e2:	8c 91       	ld	r24, X
     3e4:	a3 50       	subi	r26, 0x03	; 3
     3e6:	b1 40       	sbci	r27, 0x01	; 1
	uint8_t data = usart_data->usart->DATA;
     3e8:	ed 91       	ld	r30, X+
     3ea:	fc 91       	ld	r31, X
     3ec:	11 97       	sbiw	r26, 0x01	; 1
     3ee:	e0 81       	ld	r30, Z

	if (tempRX_Head == tempRX_Tail) {
     3f0:	98 17       	cp	r25, r24
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <USART_RXComplete+0x2a>
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     3f8:	88 81       	ld	r24, Y
     3fa:	a8 0f       	add	r26, r24
     3fc:	b1 1d       	adc	r27, r1
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	ec 93       	st	X, r30
		usart_data->buffer.RX_Head = tempRX_Head;
     402:	98 83       	st	Y, r25
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <__vector_91>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
	USART_Buffer_t * bufPtr;
	bool ans;
	
	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     420:	90 91 07 21 	lds	r25, 0x2107
     424:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     426:	80 91 08 21 	lds	r24, 0x2108
	uint8_t data = usart_data->usart->DATA;
     42a:	e0 91 05 20 	lds	r30, 0x2005
     42e:	f0 91 06 20 	lds	r31, 0x2006
     432:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
     434:	98 17       	cp	r25, r24
     436:	41 f0       	breq	.+16     	; 0x448 <__vector_91+0x3c>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     438:	e0 91 07 21 	lds	r30, 0x2107
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	eb 5f       	subi	r30, 0xFB	; 251
     440:	ff 4d       	sbci	r31, 0xDF	; 223
     442:	22 83       	std	Z+2, r18	; 0x02
		usart_data->buffer.RX_Head = tempRX_Head;
     444:	90 93 07 21 	sts	0x2107, r25
 *  as argument.
 */
ISR(USARTD1_RXC_vect)
{
	USART_RXComplete(&BT_data);
}
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_25>:
 *  Receive complete interrupt service routine.
 *  Calls the common receive complete handler with pointer to the correct USART
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	2f 93       	push	r18
     468:	8f 93       	push	r24
     46a:	9f 93       	push	r25
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	USART_Buffer_t * bufPtr;
	bool ans;
	
	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     470:	90 91 ed 23 	lds	r25, 0x23ED
     474:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     476:	80 91 ee 23 	lds	r24, 0x23EE
	uint8_t data = usart_data->usart->DATA;
     47a:	e0 91 eb 22 	lds	r30, 0x22EB
     47e:	f0 91 ec 22 	lds	r31, 0x22EC
     482:	20 81       	ld	r18, Z

	if (tempRX_Head == tempRX_Tail) {
     484:	98 17       	cp	r25, r24
     486:	41 f0       	breq	.+16     	; 0x498 <__vector_25+0x3c>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     488:	e0 91 ed 23 	lds	r30, 0x23ED
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	e5 51       	subi	r30, 0x15	; 21
     490:	fd 4d       	sbci	r31, 0xDD	; 221
     492:	22 83       	std	Z+2, r18	; 0x02
		usart_data->buffer.RX_Head = tempRX_Head;
     494:	90 93 ed 23 	sts	0x23ED, r25
 *  as argument.
 */
ISR(USARTC0_RXC_vect)
{
	USART_RXComplete(&AUX_data);
}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	9f 91       	pop	r25
     49e:	8f 91       	pop	r24
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <init_adc>:

void init_adc() {
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29

	ADC_ConvMode_and_Resolution_Config(&ADCA,  ADC_ConvMode_Unsigned, ADC_RESOLUTION_8BIT_gc);
     4b0:	e0 e0       	ldi	r30, 0x00	; 0
     4b2:	f2 e0       	ldi	r31, 0x02	; 2
     4b4:	81 81       	ldd	r24, Z+1	; 0x01
     4b6:	89 7e       	andi	r24, 0xE9	; 233
     4b8:	84 60       	ori	r24, 0x04	; 4
     4ba:	81 83       	std	Z+1, r24	; 0x01

	/* Set sample rate. */
	ADC_Prescaler_Config(&ADCA, ADC_PRESCALER_DIV512_gc);
     4bc:	84 81       	ldd	r24, Z+4	; 0x04
     4be:	87 60       	ori	r24, 0x07	; 7
     4c0:	84 83       	std	Z+4, r24	; 0x04

	/* Set reference voltage on ADC A to be AREFB (VCC).*/
	ADC_Reference_Config(&ADCA, ADC_REFSEL_AREFB_gc); 
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	80 63       	ori	r24, 0x30	; 48
     4c6:	82 83       	std	Z+2, r24	; 0x02
	
	/* Setup channel 1 and 2 with different inputs. */

	// Channel 1 for the temperature sensor
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH1,
     4c8:	28 e2       	ldi	r18, 0x28	; 40
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	d9 01       	movw	r26, r18
     4ce:	8c 91       	ld	r24, X
     4d0:	80 7e       	andi	r24, 0xE0	; 224
     4d2:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_INTERNAL_gc,
	                                 ADC_DRIVER_CH_GAIN_NONE);

	// Channel 2 for all other ADC
	ADC_Ch_InputMode_and_Gain_Config(&ADCA.CH2,
     4d4:	a0 e3       	ldi	r26, 0x30	; 48
     4d6:	b2 e0       	ldi	r27, 0x02	; 2
     4d8:	8c 91       	ld	r24, X
     4da:	80 7e       	andi	r24, 0xE0	; 224
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	8c 93       	st	X, r24
	                                 ADC_CH_INPUTMODE_SINGLEENDED_gc,
                                     ADC_DRIVER_CH_GAIN_NONE);
								 
		/* Set input to the channels in ADC A */
	ADC_Ch_InputMux_Config(&ADCA.CH1, ADC_CH_MUXINT_TEMP_gc, 0);
     4e0:	e9 01       	movw	r28, r18
     4e2:	19 82       	std	Y+1, r1	; 0x01
	ADC_Ch_InputMux_Config(&ADCA.CH2, BATT_VOLT, 0);
     4e4:	88 e3       	ldi	r24, 0x38	; 56
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	8c 93       	st	X, r24

	/*  Setup internal temperature reference */
	ADC_TempReference_Enable(&ADCA);
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	82 83       	std	Z+2, r24	; 0x02

	// Enable the ADC
	ADC_Enable(&ADCA);
     4f0:	80 81       	ld	r24, Z
     4f2:	81 60       	ori	r24, 0x01	; 1
     4f4:	80 83       	st	Z, r24
     4f6:	80 e4       	ldi	r24, 0x40	; 64
     4f8:	9f e1       	ldi	r25, 0x1F	; 31
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <init_adc+0x4e>
	_delay_ms(1);

}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <read_analog>:

// Used by mainFirmware to read the analog sensors - light, battery voltage, and auxiliary
int read_analog(ADC_CH_MUXPOS_t sensor) {
	// Set MUX to the right input
	ADC_Ch_InputMux_Config(&ADCA.CH2, sensor, 0);
     504:	e0 e3       	ldi	r30, 0x30	; 48
     506:	f2 e0       	ldi	r31, 0x02	; 2
     508:	81 83       	std	Z+1, r24	; 0x01
	//Start conversion
	ADCA.CH2.CTRL |= START_CH;
     50a:	80 91 30 02 	lds	r24, 0x0230
     50e:	80 68       	ori	r24, 0x80	; 128
     510:	e0 e0       	ldi	r30, 0x00	; 0
     512:	f2 e0       	ldi	r31, 0x02	; 2
     514:	80 ab       	std	Z+48, r24	; 0x30
	do{
	//i++;
			/* If the conversion on the ADCA channel 2 never is
			 * complete this will be a deadlock. */
	}while(!(ADCA.CH2.INTFLAGS & 0x01)&& !(ADCA.INTFLAGS & 0x04));
     516:	80 91 33 02 	lds	r24, 0x0233
     51a:	80 fd       	sbrc	r24, 0
     51c:	04 c0       	rjmp	.+8      	; 0x526 <read_analog+0x22>
     51e:	80 91 06 02 	lds	r24, 0x0206
     522:	82 ff       	sbrs	r24, 2
     524:	f8 cf       	rjmp	.-16     	; 0x516 <read_analog+0x12>
	
	// Reset interrupt flag for next conversion
	ADCA.CH2.INTFLAGS = ADC_CH_CHIF_bm;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	e0 e0       	ldi	r30, 0x00	; 0
     52a:	f2 e0       	ldi	r31, 0x02	; 2
     52c:	83 ab       	std	Z+51, r24	; 0x33
	//ADCA.INTFLAGS |= 0x04;
	
	// Return 8-bit value of sensor
	return ADCA.CH2.RESL;
     52e:	80 91 34 02 	lds	r24, 0x0234
	
}
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	08 95       	ret

00000536 <read_internal_temperature>:

// Not currently documented as internal temperature is not properly calibrated.
int read_internal_temperature() {
	// Start conversion
	ADCA.CH1.CTRL |= START_CH;
     536:	80 91 28 02 	lds	r24, 0x0228
     53a:	80 68       	ori	r24, 0x80	; 128
     53c:	e0 e0       	ldi	r30, 0x00	; 0
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	80 a7       	std	Z+40, r24	; 0x28
	do{
			/* If the conversion on the ADCA channel 1 never is
			 * complete this will be a deadlock. */
	}while(!(ADCA.CH1.INTFLAGS & 0x01));
     542:	80 91 2b 02 	lds	r24, 0x022B
     546:	80 ff       	sbrs	r24, 0
     548:	fc cf       	rjmp	.-8      	; 0x542 <read_internal_temperature+0xc>
	
	// Reset interrupt flag for next conversion
	ADCA.CH1.INTFLAGS = ADC_CH_CHIF_bm;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	e0 e0       	ldi	r30, 0x00	; 0
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	83 a7       	std	Z+43, r24	; 0x2b
	
	// Return the sensor's value
	return ADCA.CH1.RESL;
     552:	80 91 2c 02 	lds	r24, 0x022C
}
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	08 95       	ret

0000055a <init_ir>:
/* Source file for functions controlling transmission of infrared signals. */

// Initializes the timers used to control the IR carrier and the IR signal
void init_ir() {
	// Set timer 0 clock to 32 MHz
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	f8 e0       	ldi	r31, 0x08	; 8
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	20 83       	st	Z, r18
	
	// Turn on single slope pwm waveform generation on CCA (IR Pin)
	TCC0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_SS_gc;
     562:	83 e1       	ldi	r24, 0x13	; 19
     564:	81 83       	std	Z+1, r24	; 0x01

	// Set period to 0x0349 for 38000 Hz operation
	// This easily adjusts the frequency of the carrier wave
	TCC0.PERBUF = 0x0349;
     566:	89 e4       	ldi	r24, 0x49	; 73
     568:	93 e0       	ldi	r25, 0x03	; 3
     56a:	86 ab       	std	Z+54, r24	; 0x36
     56c:	97 ab       	std	Z+55, r25	; 0x37

	// Set IR pin to output
	PORTC.DIRSET = IR_OUT;
     56e:	e0 e4       	ldi	r30, 0x40	; 64
     570:	f6 e0       	ldi	r31, 0x06	; 6
     572:	21 83       	std	Z+1, r18	; 0x01
	
	
	// Set timer to count at 500 KHz - this timer is used to construct the IR signal
	TCC1.CTRLA = TC_CLKSEL_DIV64_gc;
     574:	e0 e4       	ldi	r30, 0x40	; 64
     576:	f8 e0       	ldi	r31, 0x08	; 8
     578:	85 e0       	ldi	r24, 0x05	; 5
     57a:	80 83       	st	Z, r24
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     57c:	16 82       	std	Z+6, r1	; 0x06
	
}
     57e:	08 95       	ret

00000580 <set_ir50>:

// Set the IR_LED to regular carrier frequency
void set_ir50() {
	cli();
     580:	f8 94       	cli
	TCC0.CCA = (TCC0.PER/2);
     582:	e0 e0       	ldi	r30, 0x00	; 0
     584:	f8 e0       	ldi	r31, 0x08	; 8
     586:	86 a1       	ldd	r24, Z+38	; 0x26
     588:	97 a1       	ldd	r25, Z+39	; 0x27
     58a:	96 95       	lsr	r25
     58c:	87 95       	ror	r24
     58e:	80 a7       	std	Z+40, r24	; 0x28
     590:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     592:	78 94       	sei
}
     594:	08 95       	ret

00000596 <set_ir100>:


// Set the IR_LED to full on
void set_ir100() {
	cli();
     596:	f8 94       	cli
	TCC0.CCA = TCC0.PER;
     598:	e0 e0       	ldi	r30, 0x00	; 0
     59a:	f8 e0       	ldi	r31, 0x08	; 8
     59c:	86 a1       	ldd	r24, Z+38	; 0x26
     59e:	97 a1       	ldd	r25, Z+39	; 0x27
     5a0:	80 a7       	std	Z+40, r24	; 0x28
     5a2:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     5a4:	78 94       	sei
}
     5a6:	08 95       	ret

000005a8 <set_ir0>:

// Turn the IR LED off
void set_ir0() {
	cli();
     5a8:	f8 94       	cli
	TCC0.CCA = 0x0000;
     5aa:	e0 e0       	ldi	r30, 0x00	; 0
     5ac:	f8 e0       	ldi	r31, 0x08	; 8
     5ae:	10 a6       	std	Z+40, r1	; 0x28
     5b0:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     5b2:	78 94       	sei
}
     5b4:	08 95       	ret

000005b6 <set_ir_carrier>:

// Sets the frequency of the IR carrier
void set_ir_carrier(int frequency) {
	
	cli();
     5b6:	f8 94       	cli
	TCC0.PERBUF = frequency;
     5b8:	e0 e0       	ldi	r30, 0x00	; 0
     5ba:	f8 e0       	ldi	r31, 0x08	; 8
     5bc:	86 ab       	std	Z+54, r24	; 0x36
     5be:	97 ab       	std	Z+55, r25	; 0x37
	sei();
     5c0:	78 94       	sei
}
     5c2:	08 95       	ret

000005c4 <start_ir_timer>:

// Starts timer 1, used to construct the IR signal
void start_ir_timer() {
    // Reset counters
	startUpCounter = 0; 
     5c4:	10 92 ca 22 	sts	0x22CA, r1
     5c8:	10 92 cb 22 	sts	0x22CB, r1
	onOffTracker = 0;
     5cc:	10 92 f0 23 	sts	0x23F0, r1
     5d0:	10 92 f1 23 	sts	0x23F1, r1
	bitCounter = 0;
     5d4:	10 92 ef 23 	sts	0x23EF, r1

	cli();
     5d8:	f8 94       	cli
	TCC1.CNT = 0x0000; // Set timer 1 counter to 0
     5da:	e0 e4       	ldi	r30, 0x40	; 64
     5dc:	f8 e0       	ldi	r31, 0x08	; 8
     5de:	10 a2       	std	Z+32, r1	; 0x20
     5e0:	11 a2       	std	Z+33, r1	; 0x21
 	sei();
     5e2:	78 94       	sei
	// Enable interrupts on timer
	TCC1.INTCTRLA = TC_OVFINTLVL_HI_gc;
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	e0 e4       	ldi	r30, 0x40	; 64
     5e8:	f8 e0       	ldi	r31, 0x08	; 8
     5ea:	86 83       	std	Z+6, r24	; 0x06
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     5ec:	e0 ea       	ldi	r30, 0xA0	; 160
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	84 60       	ori	r24, 0x04	; 4
     5f4:	82 83       	std	Z+2, r24	; 0x02
}
     5f6:	08 95       	ret

000005f8 <stop_ir_timer>:

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     5f8:	e0 e4       	ldi	r30, 0x40	; 64
     5fa:	f8 e0       	ldi	r31, 0x08	; 8
     5fc:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     5fe:	f8 94       	cli
	TCC0.CCA = 0x0000;
     600:	e0 e0       	ldi	r30, 0x00	; 0
     602:	f8 e0       	ldi	r31, 0x08	; 8
     604:	10 a6       	std	Z+40, r1	; 0x28
     606:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     608:	78 94       	sei
// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
	// Turn off IR LED just in case it was left on
	set_ir0();
}
     60a:	08 95       	ret

0000060c <__vector_20>:


// The timer overflow on TCC1 - this is where most of the action is.
ISR(TCC1_OVF_vect) {
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
	
	// The following if-else basically alternates the signal each time the interrupt is triggered
	// If the signal should be low right now, set it that way
	if(onOffTracker == 1) {
     62e:	80 91 f0 23 	lds	r24, 0x23F0
     632:	90 91 f1 23 	lds	r25, 0x23F1
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	59 f4       	brne	.+22     	; 0x650 <__vector_20+0x44>
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     63a:	f8 94       	cli
	TCC0.CCA = 0x0000;
     63c:	e0 e0       	ldi	r30, 0x00	; 0
     63e:	f8 e0       	ldi	r31, 0x08	; 8
     640:	10 a6       	std	Z+40, r1	; 0x28
     642:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     644:	78 94       	sei
	
	// The following if-else basically alternates the signal each time the interrupt is triggered
	// If the signal should be low right now, set it that way
	if(onOffTracker == 1) {
		set_ir0();
		onOffTracker = 0;
     646:	10 92 f0 23 	sts	0x23F0, r1
     64a:	10 92 f1 23 	sts	0x23F1, r1
     64e:	08 c0       	rjmp	.+16     	; 0x660 <__vector_20+0x54>
	}
	// Else turn on the signal using a 50% duty cycle (50% at carrier frequency)
	else {
		set_ir50();
     650:	0e 94 c0 02 	call	0x580	; 0x580 <set_ir50>
		onOffTracker = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	80 93 f0 23 	sts	0x23F0, r24
     65c:	90 93 f1 23 	sts	0x23F1, r25
	}

	// Checks if we've transmitted all the signal's bits. If so, turns off IR or sets the timer to interrupt again in time specified by robotData.repeatTime
	if((bitCounter >= robotData.numBits) && ((onOffTracker==0)||(robotData.bitEncoding == 0x03))) {
     660:	40 91 ef 23 	lds	r20, 0x23EF
     664:	80 91 3f 21 	lds	r24, 0x213F
     668:	48 17       	cp	r20, r24
     66a:	98 f1       	brcs	.+102    	; 0x6d2 <__vector_20+0xc6>
     66c:	80 91 f0 23 	lds	r24, 0x23F0
     670:	90 91 f1 23 	lds	r25, 0x23F1
     674:	89 2b       	or	r24, r25
     676:	21 f0       	breq	.+8      	; 0x680 <__vector_20+0x74>
     678:	80 91 3e 21 	lds	r24, 0x213E
     67c:	83 30       	cpi	r24, 0x03	; 3
     67e:	49 f5       	brne	.+82     	; 0x6d2 <__vector_20+0xc6>
		// iRobot's encoding is funky in the last bit and needs to be turned off right away
		if(robotData.bitEncoding == 0x03) {
     680:	80 91 3e 21 	lds	r24, 0x213E
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	31 f4       	brne	.+12     	; 0x694 <__vector_20+0x88>
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     688:	f8 94       	cli
	TCC0.CCA = 0x0000;
     68a:	e0 e0       	ldi	r30, 0x00	; 0
     68c:	f8 e0       	ldi	r31, 0x08	; 8
     68e:	10 a6       	std	Z+40, r1	; 0x28
     690:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     692:	78 94       	sei
		// iRobot's encoding is funky in the last bit and needs to be turned off right away
		if(robotData.bitEncoding == 0x03) {
			set_ir0();
		}
		// If repeatFlag = 0, stop the IR timer, effectively ending transmission of the signal
		if(!robotData.repeatFlag) {
     694:	80 91 09 22 	lds	r24, 0x2209
     698:	90 91 0a 22 	lds	r25, 0x220A
     69c:	89 2b       	or	r24, r25
     69e:	51 f4       	brne	.+20     	; 0x6b4 <__vector_20+0xa8>
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
     6a0:	e0 e4       	ldi	r30, 0x40	; 64
     6a2:	f8 e0       	ldi	r31, 0x08	; 8
     6a4:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
     6a6:	f8 94       	cli
	TCC0.CCA = 0x0000;
     6a8:	e0 e0       	ldi	r30, 0x00	; 0
     6aa:	f8 e0       	ldi	r31, 0x08	; 8
     6ac:	10 a6       	std	Z+40, r1	; 0x28
     6ae:	11 a6       	std	Z+41, r1	; 0x29
	sei();
     6b0:	78 94       	sei
     6b2:	d5 c0       	rjmp	.+426    	; 0x85e <__vector_20+0x252>
		if(!robotData.repeatFlag) {
			stop_ir_timer();
		}
		// Otherwise, set the timer to interrupt again in robotData.repeatTime and reset all counters. At that time it will repeat the signal.
		else {
			startUpCounter = 0;
     6b4:	10 92 ca 22 	sts	0x22CA, r1
     6b8:	10 92 cb 22 	sts	0x22CB, r1
			onOffTracker = 0;
     6bc:	10 92 f0 23 	sts	0x23F0, r1
     6c0:	10 92 f1 23 	sts	0x23F1, r1
			bitCounter = 0;
     6c4:	10 92 ef 23 	sts	0x23EF, r1
			TCC1.PER = robotData.repeatTime;
     6c8:	80 91 07 22 	lds	r24, 0x2207
     6cc:	90 91 08 22 	lds	r25, 0x2208
     6d0:	43 c0       	rjmp	.+134    	; 0x758 <__vector_20+0x14c>
		}
	}
	// If we're still transmitting, do the following
	else {
		// If we're still in the "start pulse" phase of the signal, then set the timer to interrupt again in the time specified by startUpPulse[startUpCounter]
		if(startUpCounter < robotData.startUpPulseLength)
     6d2:	20 91 ca 22 	lds	r18, 0x22CA
     6d6:	30 91 cb 22 	lds	r19, 0x22CB
     6da:	80 91 1d 21 	lds	r24, 0x211D
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	28 17       	cp	r18, r24
     6e2:	39 07       	cpc	r19, r25
     6e4:	94 f4       	brge	.+36     	; 0x70a <__vector_20+0xfe>
		{
			TCC1.PER = robotData.startUpPulse[startUpCounter];
     6e6:	f9 01       	movw	r30, r18
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e5 5e       	subi	r30, 0xE5	; 229
     6ee:	fe 4d       	sbci	r31, 0xDE	; 222
     6f0:	83 81       	ldd	r24, Z+3	; 0x03
     6f2:	94 81       	ldd	r25, Z+4	; 0x04
     6f4:	e0 e4       	ldi	r30, 0x40	; 64
     6f6:	f8 e0       	ldi	r31, 0x08	; 8
     6f8:	86 a3       	std	Z+38, r24	; 0x26
     6fa:	97 a3       	std	Z+39, r25	; 0x27
			startUpCounter++; // increment counter
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	20 93 ca 22 	sts	0x22CA, r18
     704:	30 93 cb 22 	sts	0x22CB, r19
     708:	aa c0       	rjmp	.+340    	; 0x85e <__vector_20+0x252>
		}
		// Else, send data according to encoding format
		else {
			// If format is alternating (0): 
			if(robotData.bitEncoding == 0x00) {
     70a:	80 91 3e 21 	lds	r24, 0x213E
     70e:	88 23       	and	r24, r24
     710:	41 f0       	breq	.+16     	; 0x722 <__vector_20+0x116>
					TCC1.PER = robotData.lowBitTime;
				}
				bitCounter++;
			}
			// If format is up-time (1):
			else if(robotData.bitEncoding == 0x01) {
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	31 f5       	brne	.+76     	; 0x762 <__vector_20+0x156>
				// If this tracker is a 1, then we just set IR on
				// If the tracker is showing a 1, then the next pulse is used to encode a bit by pulse length
				if(onOffTracker == 1) {
     716:	80 91 f0 23 	lds	r24, 0x23F0
     71a:	90 91 f1 23 	lds	r25, 0x23F1
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	b9 f4       	brne	.+46     	; 0x750 <__vector_20+0x144>
					// If the bit will be a logical 1, use highBitTime, else, use lowBitTime
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     722:	e4 2f       	mov	r30, r20
     724:	e6 95       	lsr	r30
     726:	e6 95       	lsr	r30
     728:	e6 95       	lsr	r30
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	e5 5e       	subi	r30, 0xE5	; 229
     72e:	fe 4d       	sbci	r31, 0xDE	; 222
     730:	24 a5       	ldd	r18, Z+44	; 0x2c
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	84 2f       	mov	r24, r20
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	80 95       	com	r24
     73a:	90 95       	com	r25
     73c:	87 70       	andi	r24, 0x07	; 7
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	02 c0       	rjmp	.+4      	; 0x746 <__vector_20+0x13a>
     742:	35 95       	asr	r19
     744:	27 95       	ror	r18
     746:	8a 95       	dec	r24
     748:	e2 f7       	brpl	.-8      	; 0x742 <__vector_20+0x136>
     74a:	20 ff       	sbrs	r18, 0
     74c:	4d c0       	rjmp	.+154    	; 0x7e8 <__vector_20+0x1dc>
     74e:	51 c0       	rjmp	.+162    	; 0x7f2 <__vector_20+0x1e6>
					}
					bitCounter++;
				}
				// If the onOffTracker is 0, the next time is used to space bits, so use "offTime"
				else {
					TCC1.PER = robotData.offTime;
     750:	80 91 45 21 	lds	r24, 0x2145
     754:	90 91 46 21 	lds	r25, 0x2146
     758:	e0 e4       	ldi	r30, 0x40	; 64
     75a:	f8 e0       	ldi	r31, 0x08	; 8
     75c:	86 a3       	std	Z+38, r24	; 0x26
     75e:	97 a3       	std	Z+39, r25	; 0x27
     760:	7e c0       	rjmp	.+252    	; 0x85e <__vector_20+0x252>
				}
			}
			// If format is down-time (2):
			else if(robotData.bitEncoding == 0x02) {
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	11 f5       	brne	.+68     	; 0x7aa <__vector_20+0x19e>
				// If this tracker is a 0, then we just set IR off
				// If the tracker is showing a 0, then the next signal off period is used to encode a bit by time
				if(onOffTracker == 0) {
     766:	80 91 f0 23 	lds	r24, 0x23F0
     76a:	90 91 f1 23 	lds	r25, 0x23F1
     76e:	89 2b       	or	r24, r25
     770:	b9 f4       	brne	.+46     	; 0x7a0 <__vector_20+0x194>
				/// If the bit will be a logical 1, use highBitTime, else, use lowBitTime
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     772:	e4 2f       	mov	r30, r20
     774:	e6 95       	lsr	r30
     776:	e6 95       	lsr	r30
     778:	e6 95       	lsr	r30
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	e5 5e       	subi	r30, 0xE5	; 229
     77e:	fe 4d       	sbci	r31, 0xDE	; 222
     780:	24 a5       	ldd	r18, Z+44	; 0x2c
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	84 2f       	mov	r24, r20
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	80 95       	com	r24
     78a:	90 95       	com	r25
     78c:	87 70       	andi	r24, 0x07	; 7
     78e:	90 70       	andi	r25, 0x00	; 0
     790:	02 c0       	rjmp	.+4      	; 0x796 <__vector_20+0x18a>
     792:	35 95       	asr	r19
     794:	27 95       	ror	r18
     796:	8a 95       	dec	r24
     798:	e2 f7       	brpl	.-8      	; 0x792 <__vector_20+0x186>
     79a:	20 ff       	sbrs	r18, 0
     79c:	49 c0       	rjmp	.+146    	; 0x830 <__vector_20+0x224>
     79e:	43 c0       	rjmp	.+134    	; 0x826 <__vector_20+0x21a>
						TCC1.PER = robotData.lowBitTime;
					}
				}
				// If the onOffTracker is 1, the next pulse time is used to space bits, so use "offTime"
				else {
					TCC1.PER = robotData.offTime;
     7a0:	80 91 45 21 	lds	r24, 0x2145
     7a4:	90 91 46 21 	lds	r25, 0x2146
     7a8:	28 c0       	rjmp	.+80     	; 0x7fa <__vector_20+0x1ee>
					bitCounter++;

				}
			}
			// If iRobot encoding (3):
			else if(robotData.bitEncoding == 0x03) {
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <__vector_20+0x1a4>
     7ae:	45 c0       	rjmp	.+138    	; 0x83a <__vector_20+0x22e>
				// If this tracker is a 0, then we just set IR off
				if(onOffTracker == 0) {
     7b0:	80 91 f0 23 	lds	r24, 0x23F0
     7b4:	90 91 f1 23 	lds	r25, 0x23F1
     7b8:	e4 2f       	mov	r30, r20
     7ba:	e6 95       	lsr	r30
     7bc:	e6 95       	lsr	r30
     7be:	e6 95       	lsr	r30
     7c0:	24 2f       	mov	r18, r20
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	89 2b       	or	r24, r25
     7c6:	f9 f4       	brne	.+62     	; 0x806 <__vector_20+0x1fa>
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	e5 5e       	subi	r30, 0xE5	; 229
     7cc:	fe 4d       	sbci	r31, 0xDE	; 222
     7ce:	84 a5       	ldd	r24, Z+44	; 0x2c
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	20 95       	com	r18
     7d4:	30 95       	com	r19
     7d6:	27 70       	andi	r18, 0x07	; 7
     7d8:	30 70       	andi	r19, 0x00	; 0
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <__vector_20+0x1d4>
     7dc:	95 95       	asr	r25
     7de:	87 95       	ror	r24
     7e0:	2a 95       	dec	r18
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <__vector_20+0x1d0>
     7e4:	80 ff       	sbrs	r24, 0
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <__vector_20+0x1e6>
						TCC1.PER = robotData.lowBitTime;
     7e8:	80 91 43 21 	lds	r24, 0x2143
     7ec:	90 91 44 21 	lds	r25, 0x2144
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__vector_20+0x1ee>
					}
					else {
						TCC1.PER = robotData.highBitTime;
     7f2:	80 91 41 21 	lds	r24, 0x2141
     7f6:	90 91 42 21 	lds	r25, 0x2142
     7fa:	e0 e4       	ldi	r30, 0x40	; 64
     7fc:	f8 e0       	ldi	r31, 0x08	; 8
     7fe:	86 a3       	std	Z+38, r24	; 0x26
     800:	97 a3       	std	Z+39, r25	; 0x27
					}					
					bitCounter++;
     802:	4f 5f       	subi	r20, 0xFF	; 255
     804:	2a c0       	rjmp	.+84     	; 0x85a <__vector_20+0x24e>
				}
				else {
					if(robotData.irBytes[bitCounter/8] & (0x01<<(7-(bitCounter%8)))) {
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	e5 5e       	subi	r30, 0xE5	; 229
     80a:	fe 4d       	sbci	r31, 0xDE	; 222
     80c:	84 a5       	ldd	r24, Z+44	; 0x2c
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	20 95       	com	r18
     812:	30 95       	com	r19
     814:	27 70       	andi	r18, 0x07	; 7
     816:	30 70       	andi	r19, 0x00	; 0
     818:	02 c0       	rjmp	.+4      	; 0x81e <__vector_20+0x212>
     81a:	95 95       	asr	r25
     81c:	87 95       	ror	r24
     81e:	2a 95       	dec	r18
     820:	e2 f7       	brpl	.-8      	; 0x81a <__vector_20+0x20e>
     822:	80 ff       	sbrs	r24, 0
     824:	05 c0       	rjmp	.+10     	; 0x830 <__vector_20+0x224>
						TCC1.PER = robotData.highBitTime;
     826:	80 91 41 21 	lds	r24, 0x2141
     82a:	90 91 42 21 	lds	r25, 0x2142
     82e:	94 cf       	rjmp	.-216    	; 0x758 <__vector_20+0x14c>
					}
					else {
						TCC1.PER = robotData.lowBitTime;
     830:	80 91 43 21 	lds	r24, 0x2143
     834:	90 91 44 21 	lds	r25, 0x2144
     838:	8f cf       	rjmp	.-226    	; 0x758 <__vector_20+0x14c>

				}
			}
			// Raw time encoding - data is stored a bit differently in irBytes in raw encoding. Each pair of bytes represents
			// one time measurement - so turn the signal on or off by that amount of time.
			else if(robotData.bitEncoding == 0x04) {
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	81 f4       	brne	.+32     	; 0x85e <__vector_20+0x252>
				TCC1.PER = ((robotData.irBytes[bitCounter])<<8) + robotData.irBytes[bitCounter+1];
     83e:	e4 2f       	mov	r30, r20
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e5 5e       	subi	r30, 0xE5	; 229
     844:	fe 4d       	sbci	r31, 0xDE	; 222
     846:	25 a5       	ldd	r18, Z+45	; 0x2d
     848:	94 a5       	ldd	r25, Z+44	; 0x2c
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	82 0f       	add	r24, r18
     84e:	91 1d       	adc	r25, r1
     850:	e0 e4       	ldi	r30, 0x40	; 64
     852:	f8 e0       	ldi	r31, 0x08	; 8
     854:	86 a3       	std	Z+38, r24	; 0x26
     856:	97 a3       	std	Z+39, r25	; 0x27
				bitCounter+=2;
     858:	4e 5f       	subi	r20, 0xFE	; 254
     85a:	40 93 ef 23 	sts	0x23EF, r20
			}
		}
	}
}
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	bf 91       	pop	r27
     864:	af 91       	pop	r26
     866:	9f 91       	pop	r25
     868:	8f 91       	pop	r24
     86a:	7f 91       	pop	r23
     86c:	6f 91       	pop	r22
     86e:	5f 91       	pop	r21
     870:	4f 91       	pop	r20
     872:	3f 91       	pop	r19
     874:	2f 91       	pop	r18
     876:	0f 90       	pop	r0
     878:	0f be       	out	0x3f, r0	; 63
     87a:	0f 90       	pop	r0
     87c:	1f 90       	pop	r1
     87e:	18 95       	reti

00000880 <BT_default_reset>:

// Restores factory default settings on the module, not currently used
void BT_default_reset() {

	// Turns the pin on, and then does the reset by toggling the pin three times
	BT_DEFAULT_RESET_PORT.OUTSET = BT_DEFAULT_RESET_PIN;
     880:	80 e2       	ldi	r24, 0x20	; 32
     882:	e0 e6       	ldi	r30, 0x60	; 96
     884:	f6 e0       	ldi	r31, 0x06	; 6
     886:	85 83       	std	Z+5, r24	; 0x05
     888:	84 e6       	ldi	r24, 0x64	; 100
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	20 e2       	ldi	r18, 0x20	; 32
     88e:	33 e0       	ldi	r19, 0x03	; 3
     890:	f9 01       	movw	r30, r18
     892:	31 97       	sbiw	r30, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <BT_default_reset+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     896:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     898:	d9 f7       	brne	.-10     	; 0x890 <BT_default_reset+0x10>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(10);
	for(int i = 0; i < 6; i++) {
		BT_DEFAULT_RESET_PORT.OUTTGL = BT_DEFAULT_RESET_PIN;
     89e:	a0 e6       	ldi	r26, 0x60	; 96
     8a0:	b6 e0       	ldi	r27, 0x06	; 6
     8a2:	60 e2       	ldi	r22, 0x20	; 32
     8a4:	40 e2       	ldi	r20, 0x20	; 32
     8a6:	53 e0       	ldi	r21, 0x03	; 3
     8a8:	17 96       	adiw	r26, 0x07	; 7
     8aa:	6c 93       	st	X, r22
     8ac:	17 97       	sbiw	r26, 0x07	; 7
     8ae:	84 e6       	ldi	r24, 0x64	; 100
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	fa 01       	movw	r30, r20
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <BT_default_reset+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ba:	d9 f7       	brne	.-10     	; 0x8b2 <BT_default_reset+0x32>
void BT_default_reset() {

	// Turns the pin on, and then does the reset by toggling the pin three times
	BT_DEFAULT_RESET_PORT.OUTSET = BT_DEFAULT_RESET_PIN;
	_delay_ms(10);
	for(int i = 0; i < 6; i++) {
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	26 30       	cpi	r18, 0x06	; 6
     8c2:	31 05       	cpc	r19, r1
     8c4:	89 f7       	brne	.-30     	; 0x8a8 <BT_default_reset+0x28>
		BT_DEFAULT_RESET_PORT.OUTTGL = BT_DEFAULT_RESET_PIN;
		_delay_ms(10);
	}
	BT_DEFAULT_RESET_PORT.OUTCLR = BT_DEFAULT_RESET_PIN;
     8c6:	80 e2       	ldi	r24, 0x20	; 32
     8c8:	e0 e6       	ldi	r30, 0x60	; 96
     8ca:	f6 e0       	ldi	r31, 0x06	; 6
     8cc:	86 83       	std	Z+6, r24	; 0x06

}
     8ce:	08 95       	ret

000008d0 <BT_reset>:

// Resets the module
void BT_reset() {

	BT_RESET_PORT.OUTCLR = BT_RESET_PIN;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	e0 e4       	ldi	r30, 0x40	; 64
     8d4:	f6 e0       	ldi	r31, 0x06	; 6
     8d6:	86 83       	std	Z+6, r24	; 0x06
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	20 e2       	ldi	r18, 0x20	; 32
     8de:	33 e0       	ldi	r19, 0x03	; 3
     8e0:	f9 01       	movw	r30, r18
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <BT_reset+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e8:	d9 f7       	brne	.-10     	; 0x8e0 <BT_reset+0x10>
	_delay_ms(10);
	BT_RESET_PORT.OUTSET = BT_RESET_PIN;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	e0 e4       	ldi	r30, 0x40	; 64
     8ee:	f6 e0       	ldi	r31, 0x06	; 6
     8f0:	85 83       	std	Z+5, r24	; 0x05
     8f2:	08 95       	ret

000008f4 <init_BT>:
/** For use with Brainlink's RN-42 module. Just includes a few helper functions, most of the serial comm stuff is in uart.c. */


// Resets the module, and then initializes the Xmega's UART that is attached to the module
void init_BT() {
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
	// Set the pins
	BT_RESET_PORT.DIRSET = BT_RESET_PIN;
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	e0 e4       	ldi	r30, 0x40	; 64
     8fe:	f6 e0       	ldi	r31, 0x06	; 6
     900:	81 83       	std	Z+1, r24	; 0x01
	BT_DEFAULT_RESET_PORT.DIRSET = BT_DEFAULT_RESET_PIN;
     902:	00 e6       	ldi	r16, 0x60	; 96
     904:	16 e0       	ldi	r17, 0x06	; 6
     906:	60 e2       	ldi	r22, 0x20	; 32
     908:	f6 2e       	mov	r15, r22
     90a:	f8 01       	movw	r30, r16
     90c:	f1 82       	std	Z+1, r15	; 0x01

	// Reset once
	BT_reset();
     90e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <BT_reset>
	BT_DEFAULT_RESET_PORT.OUTCLR = BT_DEFAULT_RESET_PIN;	
     912:	f8 01       	movw	r30, r16
     914:	f6 82       	std	Z+6, r15	; 0x06

	// Set up uart connected to bluetooth
	init_bt_uart();
     916:	0e 94 07 01 	call	0x20e	; 0x20e <init_bt_uart>

}
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	08 95       	ret

00000922 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
     922:	dc 01       	movw	r26, r24
     924:	fb 01       	movw	r30, r22
	twi->interface = module;
     926:	6d 93       	st	X+, r22
     928:	7c 93       	st	X, r23
     92a:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
     92c:	48 63       	ori	r20, 0x38	; 56
     92e:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
     930:	ed 91       	ld	r30, X+
     932:	fc 91       	ld	r31, X
     934:	11 97       	sbiw	r26, 0x01	; 1
     936:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     938:	ed 91       	ld	r30, X+
     93a:	fc 91       	ld	r31, X
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	84 83       	std	Z+4, r24	; 0x04
}
     940:	08 95       	ret

00000942 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
     942:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
     944:	01 90       	ld	r0, Z+
     946:	f0 81       	ld	r31, Z
     948:	e0 2d       	mov	r30, r0
     94a:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
     94c:	83 70       	andi	r24, 0x03	; 3
     94e:	08 95       	ret

00000950 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
     950:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status & TWIM_STATUS_READY);
     952:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	08 95       	ret

00000958 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
     958:	0f 93       	push	r16
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	dc 01       	movw	r26, r24
     960:	72 2f       	mov	r23, r18
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
     962:	25 30       	cpi	r18, 0x05	; 5
     964:	08 f0       	brcs	.+2      	; 0x968 <TWI_MasterWriteRead+0x10>
     966:	44 c0       	rjmp	.+136    	; 0x9f0 <TWI_MasterWriteRead+0x98>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
     968:	05 30       	cpi	r16, 0x05	; 5
     96a:	08 f0       	brcs	.+2      	; 0x96e <TWI_MasterWriteRead+0x16>
     96c:	41 c0       	rjmp	.+130    	; 0x9f0 <TWI_MasterWriteRead+0x98>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
     96e:	1f 96       	adiw	r26, 0x0f	; 15
     970:	8c 91       	ld	r24, X
     972:	1f 97       	sbiw	r26, 0x0f	; 15
     974:	88 23       	and	r24, r24
     976:	e1 f5       	brne	.+120    	; 0x9f0 <TWI_MasterWriteRead+0x98>
		twi->status = TWIM_STATUS_BUSY;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	1f 96       	adiw	r26, 0x0f	; 15
     97c:	8c 93       	st	X, r24
     97e:	1f 97       	sbiw	r26, 0x0f	; 15
		twi->result = TWIM_RESULT_UNKNOWN;
     980:	50 96       	adiw	r26, 0x10	; 16
     982:	1c 92       	st	X, r1
     984:	50 97       	sbiw	r26, 0x10	; 16

		twi->address = address<<1;
     986:	66 0f       	add	r22, r22
     988:	12 96       	adiw	r26, 0x02	; 2
     98a:	6c 93       	st	X, r22
     98c:	12 97       	sbiw	r26, 0x02	; 2
     98e:	ea 01       	movw	r28, r20
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	07 c0       	rjmp	.+14     	; 0x9a4 <TWI_MasterWriteRead+0x4c>

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
			twi->writeData[bufferIndex] = writeData[bufferIndex];
     996:	89 91       	ld	r24, Y+
     998:	fd 01       	movw	r30, r26
     99a:	e2 0f       	add	r30, r18
     99c:	f3 1f       	adc	r31, r19
     99e:	83 83       	std	Z+3, r24	; 0x03
     9a0:	2f 5f       	subi	r18, 0xFF	; 255
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
     9a4:	27 17       	cp	r18, r23
     9a6:	b8 f3       	brcs	.-18     	; 0x996 <TWI_MasterWriteRead+0x3e>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
     9a8:	1b 96       	adiw	r26, 0x0b	; 11
     9aa:	7c 93       	st	X, r23
     9ac:	1b 97       	sbiw	r26, 0x0b	; 11
		twi->bytesToRead = bytesToRead;
     9ae:	1c 96       	adiw	r26, 0x0c	; 12
     9b0:	0c 93       	st	X, r16
     9b2:	1c 97       	sbiw	r26, 0x0c	; 12
		twi->bytesWritten = 0;
     9b4:	1d 96       	adiw	r26, 0x0d	; 13
     9b6:	1c 92       	st	X, r1
     9b8:	1d 97       	sbiw	r26, 0x0d	; 13
		twi->bytesRead = 0;
     9ba:	1e 96       	adiw	r26, 0x0e	; 14
     9bc:	1c 92       	st	X, r1
     9be:	1e 97       	sbiw	r26, 0x0e	; 14

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
     9c0:	1b 96       	adiw	r26, 0x0b	; 11
     9c2:	8c 91       	ld	r24, X
     9c4:	1b 97       	sbiw	r26, 0x0b	; 11
     9c6:	88 23       	and	r24, r24
     9c8:	29 f0       	breq	.+10     	; 0x9d4 <TWI_MasterWriteRead+0x7c>
			uint8_t writeAddress = twi->address & ~0x01;
     9ca:	12 96       	adiw	r26, 0x02	; 2
     9cc:	8c 91       	ld	r24, X
     9ce:	12 97       	sbiw	r26, 0x02	; 2
     9d0:	8e 7f       	andi	r24, 0xFE	; 254
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <TWI_MasterWriteRead+0x8e>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
     9d4:	1c 96       	adiw	r26, 0x0c	; 12
     9d6:	8c 91       	ld	r24, X
     9d8:	1c 97       	sbiw	r26, 0x0c	; 12
     9da:	88 23       	and	r24, r24
     9dc:	39 f0       	breq	.+14     	; 0x9ec <TWI_MasterWriteRead+0x94>
			uint8_t readAddress = twi->address | 0x01;
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	8c 91       	ld	r24, X
     9e2:	12 97       	sbiw	r26, 0x02	; 2
     9e4:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
     9e6:	ed 91       	ld	r30, X+
     9e8:	fc 91       	ld	r31, X
     9ea:	86 83       	std	Z+6, r24	; 0x06
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <TWI_MasterWriteRead+0x9a>
     9f0:	80 e0       	ldi	r24, 0x00	; 0
		}
		return true;
	} else {
		return false;
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
     9fa:	0f 93       	push	r16
     9fc:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	return twi_status;
}
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
     a0c:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
     a0e:	00 e0       	ldi	r16, 0x00	; 0
     a10:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	return twi_status;
}
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     a18:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	11 97       	sbiw	r26, 0x01	; 1
     a20:	94 81       	ldd	r25, Z+4	; 0x04

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
     a22:	92 ff       	sbrs	r25, 2
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <TWI_MasterArbitrationLostBusErrorHandler+0x12>
		twi->result = TWIM_RESULT_BUS_ERROR;
     a26:	84 e0       	ldi	r24, 0x04	; 4
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <TWI_MasterArbitrationLostBusErrorHandler+0x14>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	50 96       	adiw	r26, 0x10	; 16
     a2e:	8c 93       	st	X, r24
     a30:	50 97       	sbiw	r26, 0x10	; 16
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     a32:	ed 91       	ld	r30, X+
     a34:	fc 91       	ld	r31, X
     a36:	11 97       	sbiw	r26, 0x01	; 1
     a38:	98 60       	ori	r25, 0x08	; 8
     a3a:	94 83       	std	Z+4, r25	; 0x04

	twi->status = TWIM_STATUS_READY;
     a3c:	1f 96       	adiw	r26, 0x0f	; 15
     a3e:	1c 92       	st	X, r1
}
     a40:	08 95       	ret

00000a42 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	dc 01       	movw	r26, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     a48:	1b 96       	adiw	r26, 0x0b	; 11
     a4a:	9c 91       	ld	r25, X
     a4c:	1b 97       	sbiw	r26, 0x0b	; 11
	uint8_t bytesToRead   = twi->bytesToRead;
     a4e:	1c 96       	adiw	r26, 0x0c	; 12
     a50:	2c 91       	ld	r18, X
     a52:	1c 97       	sbiw	r26, 0x0c	; 12

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     a54:	cd 91       	ld	r28, X+
     a56:	dc 91       	ld	r29, X
     a58:	11 97       	sbiw	r26, 0x01	; 1
     a5a:	8c 81       	ldd	r24, Y+4	; 0x04
     a5c:	84 ff       	sbrs	r24, 4
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	8b 83       	std	Y+3, r24	; 0x03
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     a64:	85 e0       	ldi	r24, 0x05	; 5
     a66:	21 c0       	rjmp	.+66     	; 0xaaa <TWI_MasterWriteHandler+0x68>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     a68:	1d 96       	adiw	r26, 0x0d	; 13
     a6a:	8c 91       	ld	r24, X
     a6c:	1d 97       	sbiw	r26, 0x0d	; 13
     a6e:	89 17       	cp	r24, r25
     a70:	78 f4       	brcc	.+30     	; 0xa90 <TWI_MasterWriteHandler+0x4e>
		uint8_t data = twi->writeData[twi->bytesWritten];
     a72:	1d 96       	adiw	r26, 0x0d	; 13
     a74:	8c 91       	ld	r24, X
     a76:	1d 97       	sbiw	r26, 0x0d	; 13
     a78:	fd 01       	movw	r30, r26
     a7a:	e8 0f       	add	r30, r24
     a7c:	f1 1d       	adc	r31, r1
     a7e:	83 81       	ldd	r24, Z+3	; 0x03
		twi->interface->MASTER.DATA = data;
     a80:	8f 83       	std	Y+7, r24	; 0x07
		++twi->bytesWritten;
     a82:	1d 96       	adiw	r26, 0x0d	; 13
     a84:	8c 91       	ld	r24, X
     a86:	1d 97       	sbiw	r26, 0x0d	; 13
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	1d 96       	adiw	r26, 0x0d	; 13
     a8c:	8c 93       	st	X, r24
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <TWI_MasterWriteHandler+0x72>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     a90:	1e 96       	adiw	r26, 0x0e	; 14
     a92:	8c 91       	ld	r24, X
     a94:	1e 97       	sbiw	r26, 0x0e	; 14
     a96:	82 17       	cp	r24, r18
     a98:	28 f4       	brcc	.+10     	; 0xaa4 <TWI_MasterWriteHandler+0x62>
		uint8_t readAddress = twi->address | 0x01;
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	8c 91       	ld	r24, X
     a9e:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
     aa0:	8e 83       	std	Y+6, r24	; 0x06
     aa2:	08 c0       	rjmp	.+16     	; 0xab4 <TWI_MasterWriteHandler+0x72>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     aa4:	83 e0       	ldi	r24, 0x03	; 3
     aa6:	8b 83       	std	Y+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	50 96       	adiw	r26, 0x10	; 16
     aac:	8c 93       	st	X, r24
     aae:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     ab0:	1f 96       	adiw	r26, 0x0f	; 15
     ab2:	1c 92       	st	X, r1
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     aba:	dc 01       	movw	r26, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     abc:	1e 96       	adiw	r26, 0x0e	; 14
     abe:	8c 91       	ld	r24, X
     ac0:	1e 97       	sbiw	r26, 0x0e	; 14
     ac2:	ed 91       	ld	r30, X+
     ac4:	fc 91       	ld	r31, X
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	84 30       	cpi	r24, 0x04	; 4
     aca:	80 f4       	brcc	.+32     	; 0xaec <TWI_MasterReadHandler+0x32>
		uint8_t data = twi->interface->MASTER.DATA;
     acc:	97 81       	ldd	r25, Z+7	; 0x07
		twi->readData[twi->bytesRead] = data;
     ace:	1e 96       	adiw	r26, 0x0e	; 14
     ad0:	8c 91       	ld	r24, X
     ad2:	1e 97       	sbiw	r26, 0x0e	; 14
     ad4:	fd 01       	movw	r30, r26
     ad6:	e8 0f       	add	r30, r24
     ad8:	f1 1d       	adc	r31, r1
     ada:	97 83       	std	Z+7, r25	; 0x07
		twi->bytesRead++;
     adc:	1e 96       	adiw	r26, 0x0e	; 14
     ade:	8c 91       	ld	r24, X
     ae0:	1e 97       	sbiw	r26, 0x0e	; 14
     ae2:	8f 5f       	subi	r24, 0xFF	; 255
     ae4:	1e 96       	adiw	r26, 0x0e	; 14
     ae6:	8c 93       	st	X, r24
     ae8:	1e 97       	sbiw	r26, 0x0e	; 14
     aea:	09 c0       	rjmp	.+18     	; 0xafe <TWI_MasterReadHandler+0x44>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	50 96       	adiw	r26, 0x10	; 16
     af4:	8c 93       	st	X, r24
     af6:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     af8:	1f 96       	adiw	r26, 0x0f	; 15
     afa:	1c 92       	st	X, r1
     afc:	1f 97       	sbiw	r26, 0x0f	; 15
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     afe:	1c 96       	adiw	r26, 0x0c	; 12
     b00:	9c 91       	ld	r25, X
     b02:	1c 97       	sbiw	r26, 0x0c	; 12

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     b04:	1e 96       	adiw	r26, 0x0e	; 14
     b06:	8c 91       	ld	r24, X
     b08:	1e 97       	sbiw	r26, 0x0e	; 14
     b0a:	ed 91       	ld	r30, X+
     b0c:	fc 91       	ld	r31, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	89 17       	cp	r24, r25
     b12:	18 f4       	brcc	.+6      	; 0xb1a <TWI_MasterReadHandler+0x60>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	83 83       	std	Z+3, r24	; 0x03
     b18:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	83 83       	std	Z+3, r24	; 0x03
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	50 96       	adiw	r26, 0x10	; 16
     b22:	8c 93       	st	X, r24
     b24:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b26:	1f 96       	adiw	r26, 0x0f	; 15
     b28:	1c 92       	st	X, r1
     b2a:	08 95       	ret

00000b2c <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
     b2c:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     b36:	24 2f       	mov	r18, r20
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	c9 01       	movw	r24, r18
     b3c:	8c 70       	andi	r24, 0x0C	; 12
     b3e:	90 70       	andi	r25, 0x00	; 0
     b40:	89 2b       	or	r24, r25
     b42:	21 f0       	breq	.+8      	; 0xb4c <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
     b44:	cd 01       	movw	r24, r26
     b46:	0e 94 0c 05 	call	0xa18	; 0xa18 <TWI_MasterArbitrationLostBusErrorHandler>
     b4a:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     b4c:	46 ff       	sbrs	r20, 6
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <TWI_MasterInterruptHandler+0x2c>
		TWI_MasterWriteHandler(twi);
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 21 05 	call	0xa42	; 0xa42 <TWI_MasterWriteHandler>
     b56:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     b58:	47 ff       	sbrs	r20, 7
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <TWI_MasterInterruptHandler+0x38>
		TWI_MasterReadHandler(twi);
     b5c:	cd 01       	movw	r24, r26
     b5e:	0e 94 5d 05 	call	0xaba	; 0xaba <TWI_MasterReadHandler>
     b62:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     b64:	86 e0       	ldi	r24, 0x06	; 6
     b66:	50 96       	adiw	r26, 0x10	; 16
     b68:	8c 93       	st	X, r24
     b6a:	50 97       	sbiw	r26, 0x10	; 16
	twi->status = TWIM_STATUS_READY;
     b6c:	1f 96       	adiw	r26, 0x0f	; 15
     b6e:	1c 92       	st	X, r1
     b70:	08 95       	ret

00000b72 <TWI_MasterTransactionFinished>:
 *
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
     b72:	fc 01       	movw	r30, r24
	twi->result = result;
     b74:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
     b76:	17 86       	std	Z+15, r1	; 0x0f
}
     b78:	08 95       	ret

00000b7a <getAccelData>:


// Function to return the data - must call updateAccel() first
AccelData getAccelData()
{
	return _acc;
     b7a:	60 91 09 21 	lds	r22, 0x2109
     b7e:	70 91 0a 21 	lds	r23, 0x210A
}
     b82:	80 91 0b 21 	lds	r24, 0x210B
     b86:	90 91 0c 21 	lds	r25, 0x210C
     b8a:	08 95       	ret

00000b8c <newAccelData>:

// Tells you if new data is ready
int newAccelData()
{
	
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
     b8c:	80 91 dc 22 	lds	r24, 0x22DC
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	19 f0       	breq	.+6      	; 0xb9a <newAccelData+0xe>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	09 c0       	rjmp	.+18     	; 0xbac <newAccelData+0x20>
     b9a:	80 91 db 22 	lds	r24, 0x22DB
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	81 11       	cpse	r24, r1
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	98 27       	eor	r25, r24
     ba8:	29 2f       	mov	r18, r25
     baa:	30 e0       	ldi	r19, 0x00	; 0
}
     bac:	c9 01       	movw	r24, r18
     bae:	08 95       	ret

00000bb0 <updateAccel>:

// this is currently non-blocking. Blocking was attempted (commented out) but seemed to block forever.
void updateAccel()
{
     bb0:	0f 93       	push	r16
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	0f 92       	push	r0
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
//	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
//	{ 
		//char oldstatus = _acc.status & ACC_O_MASK;
		uint8_t buf = 0x00;// read 4 bytes, starting at 0x00 (x,y,z,status)
     bbc:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
     bbe:	8c ec       	ldi	r24, 0xCC	; 204
     bc0:	92 e2       	ldi	r25, 0x22	; 34
     bc2:	6c e4       	ldi	r22, 0x4C	; 76
     bc4:	ae 01       	movw	r20, r28
     bc6:	4f 5f       	subi	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	04 e0       	ldi	r16, 0x04	; 4
     bce:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
		
		while (twiMaster.status != TWIM_STATUS_READY);
     bd2:	80 91 db 22 	lds	r24, 0x22DB
     bd6:	88 23       	and	r24, r24
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <updateAccel+0x22>
		_acc.x = twiMaster.readData[0];
     bda:	80 91 d3 22 	lds	r24, 0x22D3
     bde:	80 93 09 21 	sts	0x2109, r24
		_acc.y = twiMaster.readData[1];
     be2:	80 91 d4 22 	lds	r24, 0x22D4
     be6:	80 93 0a 21 	sts	0x210A, r24
		_acc.z = twiMaster.readData[2];
     bea:	80 91 d5 22 	lds	r24, 0x22D5
     bee:	80 93 0b 21 	sts	0x210B, r24
		_acc.status = twiMaster.readData[3];
     bf2:	80 91 d6 22 	lds	r24, 0x22D6
     bf6:	80 93 0c 21 	sts	0x210C, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
     bfa:	10 92 dc 22 	sts	0x22DC, r1
		
//	}
}
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <initAccel>:

// Initializes the accelerometer
// Doesn't *really* need to be blocking, just checked for success
void initAccel()
{
     c08:	0f 93       	push	r16
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <initAccel+0x8>
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	cli();
     c14:	f8 94       	cli
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
	twi->interface = module;
     c16:	e0 ea       	ldi	r30, 0xA0	; 160
     c18:	f4 e0       	ldi	r31, 0x04	; 4
     c1a:	e0 93 cc 22 	sts	0x22CC, r30
     c1e:	f0 93 cd 22 	sts	0x22CD, r31
	twi->interface->MASTER.CTRLA = intLevel |
     c22:	88 e7       	ldi	r24, 0x78	; 120
     c24:	81 83       	std	Z+1, r24	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
     c26:	8b e9       	ldi	r24, 0x9B	; 155
     c28:	85 83       	std	Z+5, r24	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	84 83       	std	Z+4, r24	; 0x04
	               &TWIE,
	               TWI_MASTER_INTLVL_LO_gc,
	               TWI_BAUDSETTING);

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
     c2e:	80 91 a2 00 	lds	r24, 0x00A2
     c32:	81 60       	ori	r24, 0x01	; 1
     c34:	e0 ea       	ldi	r30, 0xA0	; 160
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	82 83       	std	Z+2, r24	; 0x02
	sei();
     c3a:	78 94       	sei

	// prepare configuration data for the accelerometer
	uint8_t buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
     c3c:	87 e0       	ldi	r24, 0x07	; 7
     c3e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b01010000;  // set interrupt to push-pull, mode to standby (mode and Ton are both 0), auto-sleep to enable
     c40:	80 e5       	ldi	r24, 0x50	; 80
     c42:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     c44:	8c ec       	ldi	r24, 0xCC	; 204
     c46:	92 e2       	ldi	r25, 0x22	; 34
     c48:	6c e4       	ldi	r22, 0x4C	; 76
     c4a:	ae 01       	movw	r20, r28
     c4c:	4f 5f       	subi	r20, 0xFF	; 255
     c4e:	5f 4f       	sbci	r21, 0xFF	; 255
     c50:	22 e0       	ldi	r18, 0x02	; 2
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	
	while (twiMaster.status != TWIM_STATUS_READY);
     c58:	80 91 db 22 	lds	r24, 0x22DB
     c5c:	88 23       	and	r24, r24
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <initAccel+0x50>


	// set sleep mode
	buf[0] = 0x05;
     c60:	85 e0       	ldi	r24, 0x05	; 5
     c62:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
     c64:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     c66:	8c ec       	ldi	r24, 0xCC	; 204
     c68:	92 e2       	ldi	r25, 0x22	; 34
     c6a:	6c e4       	ldi	r22, 0x4C	; 76
     c6c:	ae 01       	movw	r20, r28
     c6e:	4f 5f       	subi	r20, 0xFF	; 255
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	22 e0       	ldi	r18, 0x02	; 2
     c74:	00 e0       	ldi	r16, 0x00	; 0
     c76:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     c7a:	80 91 db 22 	lds	r24, 0x22DB
     c7e:	88 23       	and	r24, r24
     c80:	e1 f7       	brne	.-8      	; 0xc7a <initAccel+0x72>

	// set interrupts
	buf[0] = 0x06;
     c82:	86 e0       	ldi	r24, 0x06	; 6
     c84:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b11100100;  // set interrupts to occur with a tap or shake (PDINT, SHINTX/Y/Z)
     c86:	84 ee       	ldi	r24, 0xE4	; 228
     c88:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     c8a:	8c ec       	ldi	r24, 0xCC	; 204
     c8c:	92 e2       	ldi	r25, 0x22	; 34
     c8e:	6c e4       	ldi	r22, 0x4C	; 76
     c90:	ae 01       	movw	r20, r28
     c92:	4f 5f       	subi	r20, 0xFF	; 255
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	22 e0       	ldi	r18, 0x02	; 2
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     c9e:	80 91 db 22 	lds	r24, 0x22DB
     ca2:	88 23       	and	r24, r24
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <initAccel+0x96>

	// set filter rate
	buf[0] = 0x08;
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;		// Set filter rate to 8 samples, set number of samples to 120 in waking state, 32 in sleeping (hopefully we avoid sleep)
     caa:	80 ee       	ldi	r24, 0xE0	; 224
     cac:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cae:	8c ec       	ldi	r24, 0xCC	; 204
     cb0:	92 e2       	ldi	r25, 0x22	; 34
     cb2:	6c e4       	ldi	r22, 0x4C	; 76
     cb4:	ae 01       	movw	r20, r28
     cb6:	4f 5f       	subi	r20, 0xFF	; 255
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	22 e0       	ldi	r18, 0x02	; 2
     cbc:	00 e0       	ldi	r16, 0x00	; 0
     cbe:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     cc2:	80 91 db 22 	lds	r24, 0x22DB
     cc6:	88 23       	and	r24, r24
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <initAccel+0xba>
	
	// set tap detection
	buf[0] = 0x09;
     cca:	89 e0       	ldi	r24, 0x09	; 9
     ccc:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b00001000;  	// 0x09	Pulse detection -> +- 8 counts, all axes
     cce:	88 e0       	ldi	r24, 0x08	; 8
     cd0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cd2:	8c ec       	ldi	r24, 0xCC	; 204
     cd4:	92 e2       	ldi	r25, 0x22	; 34
     cd6:	6c e4       	ldi	r22, 0x4C	; 76
     cd8:	ae 01       	movw	r20, r28
     cda:	4f 5f       	subi	r20, 0xFF	; 255
     cdc:	5f 4f       	sbci	r21, 0xFF	; 255
     cde:	22 e0       	ldi	r18, 0x02	; 2
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     ce6:	80 91 db 22 	lds	r24, 0x22DB
     cea:	88 23       	and	r24, r24
     cec:	e1 f7       	brne	.-8      	; 0xce6 <initAccel+0xde>

	// set tap debounce
	buf[0] = 0x0A;
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// Tap debounce ->	16 detections
     cf2:	80 e1       	ldi	r24, 0x10	; 16
     cf4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     cf6:	8c ec       	ldi	r24, 0xCC	; 204
     cf8:	92 e2       	ldi	r25, 0x22	; 34
     cfa:	6c e4       	ldi	r22, 0x4C	; 76
     cfc:	ae 01       	movw	r20, r28
     cfe:	4f 5f       	subi	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	22 e0       	ldi	r18, 0x02	; 2
     d04:	00 e0       	ldi	r16, 0x00	; 0
     d06:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
     d0a:	80 91 db 22 	lds	r24, 0x22DB
     d0e:	88 23       	and	r24, r24
     d10:	e1 f7       	brne	.-8      	; 0xd0a <initAccel+0x102>
	
	// enable the accelerometer
	buf[0] = 0x07;
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0b01010001; 
     d16:	81 e5       	ldi	r24, 0x51	; 81
     d18:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
     d1a:	8c ec       	ldi	r24, 0xCC	; 204
     d1c:	92 e2       	ldi	r25, 0x22	; 34
     d1e:	6c e4       	ldi	r22, 0x4C	; 76
     d20:	ae 01       	movw	r20, r28
     d22:	4f 5f       	subi	r20, 0xFF	; 255
     d24:	5f 4f       	sbci	r21, 0xFF	; 255
     d26:	22 e0       	ldi	r18, 0x02	; 2
     d28:	00 e0       	ldi	r16, 0x00	; 0
     d2a:	0e 94 ac 04 	call	0x958	; 0x958 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
     d2e:	80 91 db 22 	lds	r24, 0x22DB
     d32:	88 23       	and	r24, r24
     d34:	e1 f7       	brne	.-8      	; 0xd2e <initAccel+0x126>
	
}
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     d64:	8c ec       	ldi	r24, 0xCC	; 204
     d66:	92 e2       	ldi	r25, 0x22	; 34
     d68:	0e 94 96 05 	call	0xb2c	; 0xb2c <TWI_MasterInterruptHandler>
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <init_dac>:
/* Functions for manipulating the Xmega's DAC, for use with Brainlink's auxiliary ports */


// Set up the DAC to dual channel mode, 8 bit operation, VCC reference.
void init_dac() {
	DACB.CTRLB = DAC_CHSEL_DUAL_gc; // Dual channel mode
     d8e:	e0 e2       	ldi	r30, 0x20	; 32
     d90:	f3 e0       	ldi	r31, 0x03	; 3
     d92:	80 e4       	ldi	r24, 0x40	; 64
     d94:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | 0x01;  // Set Analog voltage to reference, Left adjust to use just top 8 bits
     d96:	89 e0       	ldi	r24, 0x09	; 9
     d98:	82 83       	std	Z+2, r24	; 0x02
	DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_64CLK_gc; // 64 clock cycles per conversion, 256 per refresh
     d9a:	82 e5       	ldi	r24, 0x52	; 82
     d9c:	84 83       	std	Z+4, r24	; 0x04
	DACB.CTRLA = DAC_ENABLE_bm;	// Enable channels 0 and 1 and enable DAC
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 20 03 	sts	0x0320, r24
}

// Sets DAC Ch0
void set_dac0(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
     da4:	80 91 20 03 	lds	r24, 0x0320
     da8:	84 60       	ori	r24, 0x04	; 4
     daa:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
     dae:	80 91 25 03 	lds	r24, 0x0325
     db2:	80 ff       	sbrs	r24, 0
     db4:	fc cf       	rjmp	.-8      	; 0xdae <init_dac+0x20>
	
	DACB.CH0DATAH = val;
     db6:	e0 e2       	ldi	r30, 0x20	; 32
     db8:	f3 e0       	ldi	r31, 0x03	; 3
     dba:	11 8e       	std	Z+25, r1	; 0x19
}

// Sets DAC Ch1
void set_dac1(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
     dbc:	80 91 20 03 	lds	r24, 0x0320
     dc0:	88 60       	ori	r24, 0x08	; 8
     dc2:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
     dc6:	80 91 25 03 	lds	r24, 0x0325
     dca:	81 ff       	sbrs	r24, 1
     dcc:	fc cf       	rjmp	.-8      	; 0xdc6 <init_dac+0x38>
	
	DACB.CH1DATAH = val;
     dce:	e0 e2       	ldi	r30, 0x20	; 32
     dd0:	f3 e0       	ldi	r31, 0x03	; 3
     dd2:	13 8e       	std	Z+27, r1	; 0x1b
	DACB.CTRLC = DAC_REFSEL_AVCC_gc | 0x01;  // Set Analog voltage to reference, Left adjust to use just top 8 bits
	DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_64CLK_gc; // 64 clock cycles per conversion, 256 per refresh
	DACB.CTRLA = DAC_ENABLE_bm;	// Enable channels 0 and 1 and enable DAC
	set_dac0(0); // Set both DACs to 0
	set_dac1(0);
}
     dd4:	08 95       	ret

00000dd6 <set_dac0>:

// Sets DAC Ch0
void set_dac0(uint8_t val) {
     dd6:	98 2f       	mov	r25, r24
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
     dd8:	80 91 20 03 	lds	r24, 0x0320
     ddc:	84 60       	ori	r24, 0x04	; 4
     dde:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
     de2:	80 91 25 03 	lds	r24, 0x0325
     de6:	80 ff       	sbrs	r24, 0
     de8:	fc cf       	rjmp	.-8      	; 0xde2 <set_dac0+0xc>
	
	DACB.CH0DATAH = val;
     dea:	e0 e2       	ldi	r30, 0x20	; 32
     dec:	f3 e0       	ldi	r31, 0x03	; 3
     dee:	91 8f       	std	Z+25, r25	; 0x19
}
     df0:	08 95       	ret

00000df2 <set_dac1>:

// Sets DAC Ch1
void set_dac1(uint8_t val) {
     df2:	98 2f       	mov	r25, r24
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
     df4:	80 91 20 03 	lds	r24, 0x0320
     df8:	88 60       	ori	r24, 0x08	; 8
     dfa:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
     dfe:	80 91 25 03 	lds	r24, 0x0325
     e02:	81 ff       	sbrs	r24, 1
     e04:	fc cf       	rjmp	.-8      	; 0xdfe <set_dac1+0xc>
	
	DACB.CH1DATAH = val;
     e06:	e0 e2       	ldi	r30, 0x20	; 32
     e08:	f3 e0       	ldi	r31, 0x03	; 3
     e0a:	93 8f       	std	Z+27, r25	; 0x1b
}
     e0c:	08 95       	ret

00000e0e <disable_dac0>:

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
     e0e:	e0 e2       	ldi	r30, 0x20	; 32
     e10:	f3 e0       	ldi	r31, 0x03	; 3
     e12:	80 81       	ld	r24, Z
     e14:	8b 7f       	andi	r24, 0xFB	; 251
     e16:	80 83       	st	Z, r24
}
     e18:	08 95       	ret

00000e1a <disable_dac1>:

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
     e1a:	e0 e2       	ldi	r30, 0x20	; 32
     e1c:	f3 e0       	ldi	r31, 0x03	; 3
     e1e:	80 81       	ld	r24, Z
     e20:	87 7f       	andi	r24, 0xF7	; 247
     e22:	80 83       	st	Z, r24
}
     e24:	08 95       	ret

00000e26 <init_buzzer>:


// Configures the buzzer
void init_buzzer() {
	// Set frequency maximum to 62,500 - clockspeed/256
	TCD1.CTRLA = TC_CLKSEL_DIV256_gc;
     e26:	e0 e4       	ldi	r30, 0x40	; 64
     e28:	f9 e0       	ldi	r31, 0x09	; 9
     e2a:	86 e0       	ldi	r24, 0x06	; 6
     e2c:	80 83       	st	Z, r24
	// Set counter to frequency mode, this lets us vary frequency and keeps duty cycle at 50%
	TCD1.CTRLB = TC_WGMODE_FRQ_gc;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	81 83       	std	Z+1, r24	; 0x01
	// Set pin to output
	PORTD.DIRSET |= PIN4_bm;
     e32:	e0 e6       	ldi	r30, 0x60	; 96
     e34:	f6 e0       	ldi	r31, 0x06	; 6
     e36:	81 81       	ldd	r24, Z+1	; 0x01
     e38:	80 61       	ori	r24, 0x10	; 16
     e3a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR |= PIN4_bm;
     e3c:	86 81       	ldd	r24, Z+6	; 0x06
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	86 83       	std	Z+6, r24	; 0x06
}
     e42:	08 95       	ret

00000e44 <set_buzzer>:

// Set buzzer enables the waveform and sets it to a given frequency
void set_buzzer(int frequency) {
	// Enable waveform output
	TCD1.CTRLB |= TC1_CCAEN_bm;
     e44:	e0 e4       	ldi	r30, 0x40	; 64
     e46:	f9 e0       	ldi	r31, 0x09	; 9
     e48:	21 81       	ldd	r18, Z+1	; 0x01
     e4a:	20 61       	ori	r18, 0x10	; 16
     e4c:	21 83       	std	Z+1, r18	; 0x01
	// Set the frequency
	cli();
     e4e:	f8 94       	cli
	TCD1.CCA = frequency;
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f9 e0       	ldi	r31, 0x09	; 9
     e54:	80 a7       	std	Z+40, r24	; 0x28
     e56:	91 a7       	std	Z+41, r25	; 0x29
	sei();
     e58:	78 94       	sei
}
     e5a:	08 95       	ret

00000e5c <turn_off_buzzer>:

// Disables the buzzer, and if the output is on, turns it off
void turn_off_buzzer() {
	// Disable the Waveform output
	TCD1.CTRLB &= (~TC1_CCAEN_bm);
     e5c:	e0 e4       	ldi	r30, 0x40	; 64
     e5e:	f9 e0       	ldi	r31, 0x09	; 9
     e60:	81 81       	ldd	r24, Z+1	; 0x01
     e62:	8f 7e       	andi	r24, 0xEF	; 239
     e64:	81 83       	std	Z+1, r24	; 0x01
	// Turn off the pin just in case
	PORTD.OUTCLR |= PIN4_bm;
     e66:	e0 e6       	ldi	r30, 0x60	; 96
     e68:	f6 e0       	ldi	r31, 0x06	; 6
     e6a:	86 81       	ldd	r24, Z+6	; 0x06
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	86 83       	std	Z+6, r24	; 0x06
}
     e70:	08 95       	ret

00000e72 <set_pwm>:

// Sets up PWM to a given frequency (both channels must share the same frequency)
void set_pwm() {

	// Set clock to 32 MHz
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
     e72:	e0 e0       	ldi	r30, 0x00	; 0
     e74:	fa e0       	ldi	r31, 0x0A	; 10
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 83       	st	Z, r24
	
	// Turn on single slope pwm waveform generation
	TCE0.CTRLB = TC_WGMODE_SS_gc;
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	81 83       	std	Z+1, r24	; 0x01
	// Turn off other registers in case they were set by IR read
	TCE0.CTRLD = 0x00;
     e7e:	13 82       	std	Z+3, r1	; 0x03
	// Set frequency of the PWM signal
	TCE0.PERBUF = pwm_frequency;
     e80:	80 91 00 20 	lds	r24, 0x2000
     e84:	90 91 01 20 	lds	r25, 0x2001
     e88:	86 ab       	std	Z+54, r24	; 0x36
     e8a:	97 ab       	std	Z+55, r25	; 0x37

}
     e8c:	08 95       	ret

00000e8e <turn_off_pwm0>:

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
     e90:	fa e0       	ldi	r31, 0x0A	; 10
     e92:	81 81       	ldd	r24, Z+1	; 0x01
     e94:	8f 7b       	andi	r24, 0xBF	; 191
     e96:	81 83       	std	Z+1, r24	; 0x01
}
     e98:	08 95       	ret

00000e9a <turn_off_pwm1>:

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
     e9a:	e0 e0       	ldi	r30, 0x00	; 0
     e9c:	fa e0       	ldi	r31, 0x0A	; 10
     e9e:	81 81       	ldd	r24, Z+1	; 0x01
     ea0:	8f 77       	andi	r24, 0x7F	; 127
     ea2:	81 83       	std	Z+1, r24	; 0x01
}
     ea4:	08 95       	ret

00000ea6 <set_pwm0>:

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm0(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCCEN_bm;
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	ba e0       	ldi	r27, 0x0A	; 10
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	2c 91       	ld	r18, X
     eae:	11 97       	sbiw	r26, 0x01	; 1
     eb0:	20 64       	ori	r18, 0x40	; 64
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	2c 93       	st	X, r18
     eb6:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = PIN2_bm;
     eb8:	24 e0       	ldi	r18, 0x04	; 4
     eba:	e0 e8       	ldi	r30, 0x80	; 128
     ebc:	f6 e0       	ldi	r31, 0x06	; 6
     ebe:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CCC = duty;
     ec0:	9c 96       	adiw	r26, 0x2c	; 44
     ec2:	8d 93       	st	X+, r24
     ec4:	9c 93       	st	X, r25
     ec6:	9d 97       	sbiw	r26, 0x2d	; 45
}
     ec8:	08 95       	ret

00000eca <set_pwm1>:

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm1(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCDEN_bm;
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	ba e0       	ldi	r27, 0x0A	; 10
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	2c 91       	ld	r18, X
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	20 68       	ori	r18, 0x80	; 128
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	2c 93       	st	X, r18
     eda:	11 97       	sbiw	r26, 0x01	; 1
	PORTE.DIRSET = PIN3_bm;
     edc:	28 e0       	ldi	r18, 0x08	; 8
     ede:	e0 e8       	ldi	r30, 0x80	; 128
     ee0:	f6 e0       	ldi	r31, 0x06	; 6
     ee2:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CCD = duty;
     ee4:	9e 96       	adiw	r26, 0x2e	; 46
     ee6:	8d 93       	st	X+, r24
     ee8:	9c 93       	st	X, r25
     eea:	9f 97       	sbiw	r26, 0x2f	; 47
}
     eec:	08 95       	ret

00000eee <set_output>:
// Helper functions for setting outputs and reading inputs on the auxiliary digital I/O.

//turns any of the external DIO into an ouput and sets its value
void set_output(char port, char value) {
	switch(port) {
     eee:	84 33       	cpi	r24, 0x34	; 52
     ef0:	71 f1       	breq	.+92     	; 0xf4e <set_output+0x60>
     ef2:	85 33       	cpi	r24, 0x35	; 53
     ef4:	70 f4       	brcc	.+28     	; 0xf12 <set_output+0x24>
     ef6:	81 33       	cpi	r24, 0x31	; 49
     ef8:	01 f1       	breq	.+64     	; 0xf3a <set_output+0x4c>
     efa:	82 33       	cpi	r24, 0x32	; 50
     efc:	20 f4       	brcc	.+8      	; 0xf06 <set_output+0x18>
     efe:	80 33       	cpi	r24, 0x30	; 48
     f00:	09 f0       	breq	.+2      	; 0xf04 <set_output+0x16>
     f02:	5b c0       	rjmp	.+182    	; 0xfba <set_output+0xcc>
     f04:	16 c0       	rjmp	.+44     	; 0xf32 <set_output+0x44>
     f06:	82 33       	cpi	r24, 0x32	; 50
     f08:	e1 f0       	breq	.+56     	; 0xf42 <set_output+0x54>
     f0a:	83 33       	cpi	r24, 0x33	; 51
     f0c:	09 f0       	breq	.+2      	; 0xf10 <set_output+0x22>
     f0e:	55 c0       	rjmp	.+170    	; 0xfba <set_output+0xcc>
     f10:	1b c0       	rjmp	.+54     	; 0xf48 <set_output+0x5a>
     f12:	87 33       	cpi	r24, 0x37	; 55
     f14:	61 f1       	breq	.+88     	; 0xf6e <set_output+0x80>
     f16:	88 33       	cpi	r24, 0x38	; 56
     f18:	30 f4       	brcc	.+12     	; 0xf26 <set_output+0x38>
     f1a:	85 33       	cpi	r24, 0x35	; 53
     f1c:	e1 f0       	breq	.+56     	; 0xf56 <set_output+0x68>
     f1e:	86 33       	cpi	r24, 0x36	; 54
     f20:	09 f0       	breq	.+2      	; 0xf24 <set_output+0x36>
     f22:	4b c0       	rjmp	.+150    	; 0xfba <set_output+0xcc>
     f24:	1c c0       	rjmp	.+56     	; 0xf5e <set_output+0x70>
     f26:	88 33       	cpi	r24, 0x38	; 56
     f28:	59 f1       	breq	.+86     	; 0xf80 <set_output+0x92>
     f2a:	89 33       	cpi	r24, 0x39	; 57
     f2c:	09 f0       	breq	.+2      	; 0xf30 <set_output+0x42>
     f2e:	45 c0       	rjmp	.+138    	; 0xfba <set_output+0xcc>
     f30:	35 c0       	rjmp	.+106    	; 0xf9c <set_output+0xae>
		case '0':
			PORTA.DIRSET = PIN0_bm;
     f32:	e0 e0       	ldi	r30, 0x00	; 0
     f34:	f6 e0       	ldi	r31, 0x06	; 6
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	2c c0       	rjmp	.+88     	; 0xf92 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN0_bm;
			}
			break;
		case '1':
			PORTA.DIRSET = PIN1_bm;
     f3a:	e0 e0       	ldi	r30, 0x00	; 0
     f3c:	f6 e0       	ldi	r31, 0x06	; 6
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	28 c0       	rjmp	.+80     	; 0xf92 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN1_bm;
			}
			break;
		case '2':
			PORTA.DIRSET = PIN2_bm;
     f42:	e0 e0       	ldi	r30, 0x00	; 0
     f44:	f6 e0       	ldi	r31, 0x06	; 6
     f46:	24 c0       	rjmp	.+72     	; 0xf90 <set_output+0xa2>
			else {
				PORTA.OUTCLR = PIN2_bm;
			}
			break;
		case '3':
			PORTA.DIRSET = PIN3_bm;
     f48:	e0 e0       	ldi	r30, 0x00	; 0
     f4a:	f6 e0       	ldi	r31, 0x06	; 6
     f4c:	17 c0       	rjmp	.+46     	; 0xf7c <set_output+0x8e>
			else {
				PORTA.OUTCLR = PIN3_bm;
			}
			break;
		case '4':
			PORTA.DIRSET = PIN4_bm;
     f4e:	e0 e0       	ldi	r30, 0x00	; 0
     f50:	f6 e0       	ldi	r31, 0x06	; 6
     f52:	80 e1       	ldi	r24, 0x10	; 16
     f54:	1e c0       	rjmp	.+60     	; 0xf92 <set_output+0xa4>
			else {
				PORTA.OUTCLR = PIN4_bm;
			}
			break;
		case '5':
			PORTA.DIRSET = PIN5_bm;
     f56:	e0 e0       	ldi	r30, 0x00	; 0
     f58:	f6 e0       	ldi	r31, 0x06	; 6
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	1a c0       	rjmp	.+52     	; 0xf92 <set_output+0xa4>
	DACB.CH1DATAH = val;
}

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
     f5e:	80 91 20 03 	lds	r24, 0x0320
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	80 93 20 03 	sts	0x0320, r24
			}
			break;
		case '6':
			// Disable the DAC ch0 in case it's on
			disable_dac0();
			PORTB.DIRSET = PIN2_bm;
     f68:	e0 e2       	ldi	r30, 0x20	; 32
     f6a:	f6 e0       	ldi	r31, 0x06	; 6
     f6c:	11 c0       	rjmp	.+34     	; 0xf90 <set_output+0xa2>
}

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
     f6e:	80 91 20 03 	lds	r24, 0x0320
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 93 20 03 	sts	0x0320, r24
			}
			break;
		case '7':
			// Disable the DAC ch1 in case it's on
			disable_dac1();
			PORTB.DIRSET = PIN3_bm;
     f78:	e0 e2       	ldi	r30, 0x20	; 32
     f7a:	f6 e0       	ldi	r31, 0x06	; 6
     f7c:	88 e0       	ldi	r24, 0x08	; 8
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <set_output+0xa4>

}

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
     f80:	80 91 01 0a 	lds	r24, 0x0A01
     f84:	8f 7b       	andi	r24, 0xBF	; 191
     f86:	e0 e0       	ldi	r30, 0x00	; 0
     f88:	fa e0       	ldi	r31, 0x0A	; 10
     f8a:	81 83       	std	Z+1, r24	; 0x01
			}
			break;
		case '8':
			// Disable PWM ch0 in case it's on
			turn_off_pwm0();
			PORTE.DIRSET = PIN2_bm;
     f8c:	e0 e8       	ldi	r30, 0x80	; 128
     f8e:	f6 e0       	ldi	r31, 0x06	; 6
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	81 83       	std	Z+1, r24	; 0x01
			if(value) {
     f94:	66 23       	and	r22, r22
     f96:	71 f4       	brne	.+28     	; 0xfb4 <set_output+0xc6>
				PORTE.OUTSET = PIN2_bm;
			}
			else {
				PORTE.OUTCLR = PIN2_bm;
     f98:	86 83       	std	Z+6, r24	; 0x06
     f9a:	08 95       	ret
}

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
     f9c:	80 91 01 0a 	lds	r24, 0x0A01
     fa0:	8f 77       	andi	r24, 0x7F	; 127
     fa2:	e0 e0       	ldi	r30, 0x00	; 0
     fa4:	fa e0       	ldi	r31, 0x0A	; 10
     fa6:	81 83       	std	Z+1, r24	; 0x01
			}
			break;
		case '9':
			// Disable PWM ch1 in case it's on
			turn_off_pwm1();
			PORTE.DIRSET = PIN3_bm;
     fa8:	e0 e8       	ldi	r30, 0x80	; 128
     faa:	f6 e0       	ldi	r31, 0x06	; 6
     fac:	88 e0       	ldi	r24, 0x08	; 8
     fae:	81 83       	std	Z+1, r24	; 0x01
			if(value) {
     fb0:	66 23       	and	r22, r22
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <set_output+0xca>
				PORTE.OUTSET = PIN3_bm;
     fb4:	85 83       	std	Z+5, r24	; 0x05
     fb6:	08 95       	ret
			}
			else {
				PORTE.OUTCLR = PIN3_bm;
     fb8:	86 83       	std	Z+6, r24	; 0x06
     fba:	08 95       	ret

00000fbc <read_input>:

}

// Turns any of the external DIO into an input and reads the value
char read_input(char port) {
	switch(port) {
     fbc:	84 33       	cpi	r24, 0x34	; 52
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <read_input+0x6>
     fc0:	42 c0       	rjmp	.+132    	; 0x1046 <read_input+0x8a>
     fc2:	85 33       	cpi	r24, 0x35	; 53
     fc4:	60 f4       	brcc	.+24     	; 0xfde <read_input+0x22>
     fc6:	81 33       	cpi	r24, 0x31	; 49
     fc8:	21 f1       	breq	.+72     	; 0x1012 <read_input+0x56>
     fca:	82 33       	cpi	r24, 0x32	; 50
     fcc:	18 f4       	brcc	.+6      	; 0xfd4 <read_input+0x18>
     fce:	80 33       	cpi	r24, 0x30	; 48
     fd0:	b1 f4       	brne	.+44     	; 0xffe <read_input+0x42>
     fd2:	17 c0       	rjmp	.+46     	; 0x1002 <read_input+0x46>
     fd4:	82 33       	cpi	r24, 0x32	; 50
     fd6:	49 f1       	breq	.+82     	; 0x102a <read_input+0x6e>
     fd8:	83 33       	cpi	r24, 0x33	; 51
     fda:	89 f4       	brne	.+34     	; 0xffe <read_input+0x42>
     fdc:	2d c0       	rjmp	.+90     	; 0x1038 <read_input+0x7c>
     fde:	87 33       	cpi	r24, 0x37	; 55
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <read_input+0x28>
     fe2:	5b c0       	rjmp	.+182    	; 0x109a <read_input+0xde>
     fe4:	88 33       	cpi	r24, 0x38	; 56
     fe6:	28 f4       	brcc	.+10     	; 0xff2 <read_input+0x36>
     fe8:	85 33       	cpi	r24, 0x35	; 53
     fea:	e1 f1       	breq	.+120    	; 0x1064 <read_input+0xa8>
     fec:	86 33       	cpi	r24, 0x36	; 54
     fee:	39 f4       	brne	.+14     	; 0xffe <read_input+0x42>
     ff0:	48 c0       	rjmp	.+144    	; 0x1082 <read_input+0xc6>
     ff2:	88 33       	cpi	r24, 0x38	; 56
     ff4:	09 f4       	brne	.+2      	; 0xff8 <read_input+0x3c>
     ff6:	65 c0       	rjmp	.+202    	; 0x10c2 <read_input+0x106>
     ff8:	89 33       	cpi	r24, 0x39	; 57
     ffa:	09 f4       	brne	.+2      	; 0xffe <read_input+0x42>
     ffc:	76 c0       	rjmp	.+236    	; 0x10ea <read_input+0x12e>
     ffe:	80 ed       	ldi	r24, 0xD0	; 208
    1000:	08 95       	ret
		case '0':
			PORTA.DIRCLR = PIN0_bm;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	e0 e0       	ldi	r30, 0x00	; 0
    1006:	f6 e0       	ldi	r31, 0x06	; 6
    1008:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN0_bm)>>0;
    100a:	80 91 08 06 	lds	r24, 0x0608
    100e:	81 70       	andi	r24, 0x01	; 1
    1010:	08 95       	ret
			break;
		case '1':
			PORTA.DIRCLR = PIN1_bm;
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	e0 e0       	ldi	r30, 0x00	; 0
    1016:	f6 e0       	ldi	r31, 0x06	; 6
    1018:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN1_bm)>>1;
    101a:	80 91 08 06 	lds	r24, 0x0608
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	82 70       	andi	r24, 0x02	; 2
    1022:	90 70       	andi	r25, 0x00	; 0
    1024:	95 95       	asr	r25
    1026:	87 95       	ror	r24
    1028:	08 95       	ret
			break;
		case '2':
			PORTA.DIRCLR= PIN2_bm;
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	e0 e0       	ldi	r30, 0x00	; 0
    102e:	f6 e0       	ldi	r31, 0x06	; 6
    1030:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN2_bm)>>2;
    1032:	80 91 08 06 	lds	r24, 0x0608
    1036:	51 c0       	rjmp	.+162    	; 0x10da <read_input+0x11e>
			break;
		case '3':
			PORTA.DIRCLR= PIN3_bm;
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	e0 e0       	ldi	r30, 0x00	; 0
    103c:	f6 e0       	ldi	r31, 0x06	; 6
    103e:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN3_bm)>>3;
    1040:	80 91 08 06 	lds	r24, 0x0608
    1044:	35 c0       	rjmp	.+106    	; 0x10b0 <read_input+0xf4>
			break;
		case '4':
			PORTA.DIRCLR = PIN4_bm;
    1046:	80 e1       	ldi	r24, 0x10	; 16
    1048:	e0 e0       	ldi	r30, 0x00	; 0
    104a:	f6 e0       	ldi	r31, 0x06	; 6
    104c:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN4_bm)>>4;
    104e:	80 91 08 06 	lds	r24, 0x0608
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	80 71       	andi	r24, 0x10	; 16
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	b4 e0       	ldi	r27, 0x04	; 4
    105a:	95 95       	asr	r25
    105c:	87 95       	ror	r24
    105e:	ba 95       	dec	r27
    1060:	e1 f7       	brne	.-8      	; 0x105a <read_input+0x9e>
    1062:	08 95       	ret
			break;
		case '5':
			PORTA.DIRCLR = PIN5_bm;
    1064:	80 e2       	ldi	r24, 0x20	; 32
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	f6 e0       	ldi	r31, 0x06	; 6
    106a:	82 83       	std	Z+2, r24	; 0x02
			return (PORTA.IN & PIN5_bm)>>5;
    106c:	80 91 08 06 	lds	r24, 0x0608
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	80 72       	andi	r24, 0x20	; 32
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	a5 e0       	ldi	r26, 0x05	; 5
    1078:	95 95       	asr	r25
    107a:	87 95       	ror	r24
    107c:	aa 95       	dec	r26
    107e:	e1 f7       	brne	.-8      	; 0x1078 <read_input+0xbc>
    1080:	08 95       	ret
	DACB.CH1DATAH = val;
}

// Turn off the DAC on channel 0 to use the pin as regular I/O
void disable_dac0() {
	DACB.CTRLA &= (~DAC_CH0EN_bm);
    1082:	80 91 20 03 	lds	r24, 0x0320
    1086:	8b 7f       	andi	r24, 0xFB	; 251
    1088:	80 93 20 03 	sts	0x0320, r24
			break;
		case '6':
			// Disable DAC ch0 in case it's on
			disable_dac0();
			PORTB.DIRCLR = PIN2_bm;
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	e0 e2       	ldi	r30, 0x20	; 32
    1090:	f6 e0       	ldi	r31, 0x06	; 6
    1092:	82 83       	std	Z+2, r24	; 0x02
			return (PORTB.IN & PIN2_bm)>>2;
    1094:	80 91 28 06 	lds	r24, 0x0628
    1098:	20 c0       	rjmp	.+64     	; 0x10da <read_input+0x11e>
}

// Turn off the DAC on channel 1 to use the pin as regular I/O
void disable_dac1() {
	DACB.CTRLA &= (~DAC_CH1EN_bm);
    109a:	80 91 20 03 	lds	r24, 0x0320
    109e:	87 7f       	andi	r24, 0xF7	; 247
    10a0:	80 93 20 03 	sts	0x0320, r24
			break;
		case '7':
			// Disable DAC ch0 in case it's on
			disable_dac1();
			PORTB.DIRCLR = PIN3_bm;
    10a4:	88 e0       	ldi	r24, 0x08	; 8
    10a6:	e0 e2       	ldi	r30, 0x20	; 32
    10a8:	f6 e0       	ldi	r31, 0x06	; 6
    10aa:	82 83       	std	Z+2, r24	; 0x02
			return (PORTB.IN & PIN3_bm)>>3;
    10ac:	80 91 28 06 	lds	r24, 0x0628
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	88 70       	andi	r24, 0x08	; 8
    10b4:	90 70       	andi	r25, 0x00	; 0
    10b6:	f3 e0       	ldi	r31, 0x03	; 3
    10b8:	95 95       	asr	r25
    10ba:	87 95       	ror	r24
    10bc:	fa 95       	dec	r31
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <read_input+0xfc>
    10c0:	08 95       	ret

}

// Turns off the waveform on channel 0, so regular I/O can be used
void turn_off_pwm0() {
	TCE0.CTRLB &= (~TC0_CCCEN_bm);
    10c2:	80 91 01 0a 	lds	r24, 0x0A01
    10c6:	8f 7b       	andi	r24, 0xBF	; 191
    10c8:	e0 e0       	ldi	r30, 0x00	; 0
    10ca:	fa e0       	ldi	r31, 0x0A	; 10
    10cc:	81 83       	std	Z+1, r24	; 0x01
			break;
		case '8':
			// Disable PWM ch0 in case it's on
			turn_off_pwm0();
			PORTE.DIRCLR = PIN2_bm;
    10ce:	84 e0       	ldi	r24, 0x04	; 4
    10d0:	e0 e8       	ldi	r30, 0x80	; 128
    10d2:	f6 e0       	ldi	r31, 0x06	; 6
    10d4:	82 83       	std	Z+2, r24	; 0x02
			return (PORTE.IN & PIN2_bm)>>2;
    10d6:	80 91 88 06 	lds	r24, 0x0688
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	84 70       	andi	r24, 0x04	; 4
    10de:	90 70       	andi	r25, 0x00	; 0
    10e0:	95 95       	asr	r25
    10e2:	87 95       	ror	r24
    10e4:	95 95       	asr	r25
    10e6:	87 95       	ror	r24
    10e8:	08 95       	ret
}

// Turns off the waveform on channel 1, so regular I/O can be used
void turn_off_pwm1() {
	TCE0.CTRLB &= (~TC0_CCDEN_bm);
    10ea:	80 91 01 0a 	lds	r24, 0x0A01
    10ee:	8f 77       	andi	r24, 0x7F	; 127
    10f0:	e0 e0       	ldi	r30, 0x00	; 0
    10f2:	fa e0       	ldi	r31, 0x0A	; 10
    10f4:	81 83       	std	Z+1, r24	; 0x01
			break;
		case '9':
			// Disable PWM ch1 in case it's on
			turn_off_pwm1();
			PORTE.DIRCLR = PIN3_bm;
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	e0 e8       	ldi	r30, 0x80	; 128
    10fa:	f6 e0       	ldi	r31, 0x06	; 6
    10fc:	82 83       	std	Z+2, r24	; 0x02
			return (PORTE.IN & PIN3_bm)>>3;
    10fe:	80 91 88 06 	lds	r24, 0x0688
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	88 70       	andi	r24, 0x08	; 8
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	73 e0       	ldi	r23, 0x03	; 3
    110a:	95 95       	asr	r25
    110c:	87 95       	ror	r24
    110e:	7a 95       	dec	r23
    1110:	e1 f7       	brne	.-8      	; 0x110a <read_input+0x14e>
		default:
			return -48;
			break;
	}

    1112:	08 95       	ret

00001114 <init_ir_read>:
/* Used for capturing IR signals. */

// Initializes the IR capture capability, must be done each time a signal needs to be captured.
void init_ir_read() {
	
	ir_read_flag = 1; // Stays high until we return success or failure
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 04 20 	sts	0x2004, r24
	//divide clock by 64, so timer clock is 500 KHz
	TCE0.CTRLA = TC_CLKSEL_DIV64_gc; 
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	ba e0       	ldi	r27, 0x0A	; 10
    111e:	85 e0       	ldi	r24, 0x05	; 5
    1120:	8c 93       	st	X, r24

	//normal operation with capture compare port enabled
	TCE0.CTRLB = TC0_CCAEN_bm | TC_WGMODE_NORMAL_gc;
    1122:	90 e1       	ldi	r25, 0x10	; 16
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	9c 93       	st	X, r25
    1128:	11 97       	sbiw	r26, 0x01	; 1

	//pin change event from any pin triggers setting
	// Set up input capture when event channel 0 fires
	TCE0.CTRLD = TC_EVACT_CAPT_gc | TC_EVSEL_CH0_gc;
    112a:	88 e2       	ldi	r24, 0x28	; 40
    112c:	13 96       	adiw	r26, 0x03	; 3
    112e:	8c 93       	st	X, r24
    1130:	13 97       	sbiw	r26, 0x03	; 3
	// Clear the direction of the pin to make it an input
	PORTC.DIRCLR = PIN4_bm;
    1132:	e0 e4       	ldi	r30, 0x40	; 64
    1134:	f6 e0       	ldi	r31, 0x06	; 6
    1136:	92 83       	std	Z+2, r25	; 0x02
	// Invert the signal so we start with a rising edge
	// Defaults to sensing both edges, which is what we want
	PORTC.PIN4CTRL |= PORT_INVEN_bm;
    1138:	84 89       	ldd	r24, Z+20	; 0x14
    113a:	80 64       	ori	r24, 0x40	; 64
    113c:	84 8b       	std	Z+20, r24	; 0x14
	// Set event channel 0 to register events from port C pin 4
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN4_gc;
    113e:	84 e6       	ldi	r24, 0x64	; 100
    1140:	80 93 80 01 	sts	0x0180, r24

	//set PER to a value that will cut things off if no signal after 16 MS or so
	TCE0.PERBUF = 0x1F40;//TCE0.PERBUF = 0x7FFF;
    1144:	80 e4       	ldi	r24, 0x40	; 64
    1146:	9f e1       	ldi	r25, 0x1F	; 31
    1148:	d6 96       	adiw	r26, 0x36	; 54
    114a:	8d 93       	st	X+, r24
    114c:	9c 93       	st	X, r25
    114e:	d7 97       	sbiw	r26, 0x37	; 55
	
	// Reset signal_count and time out
	signal_count = 0;
    1150:	10 92 02 20 	sts	0x2002, r1
	ir_read_time_out = 0;
    1154:	10 92 03 20 	sts	0x2003, r1
	
	// Enable interrupts on CCA and Overflow
	TCE0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	16 96       	adiw	r26, 0x06	; 6
    115c:	8c 93       	st	X, r24
    115e:	16 97       	sbiw	r26, 0x06	; 6
	TCE0.INTCTRLB = TC_CCAINTLVL_HI_gc; 
    1160:	17 96       	adiw	r26, 0x07	; 7
    1162:	8c 93       	st	X, r24
	PMIC.CTRL |= PMIC_HILVLEN_bm;
    1164:	e0 ea       	ldi	r30, 0xA0	; 160
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	84 60       	ori	r24, 0x04	; 4
    116c:	82 83       	std	Z+2, r24	; 0x02
	Buzzer: TCD1
	LED: TCD0
	PWM: TCE0
	IR Reading: TCE0 */
	
}
    116e:	08 95       	ret

00001170 <ir_fail>:
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1170:	80 91 b1 09 	lds	r24, 0x09B1
    1174:	85 ff       	sbrs	r24, 5
    1176:	fc cf       	rjmp	.-8      	; 0x1170 <ir_fail>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1178:	85 e4       	ldi	r24, 0x45	; 69
    117a:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    117e:	80 91 b1 09 	lds	r24, 0x09B1
    1182:	85 ff       	sbrs	r24, 5
    1184:	fc cf       	rjmp	.-8      	; 0x117e <ir_fail+0xe>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1186:	82 e5       	ldi	r24, 0x52	; 82
    1188:	80 93 b0 09 	sts	0x09B0, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    118c:	80 91 b1 09 	lds	r24, 0x09B1
    1190:	85 ff       	sbrs	r24, 5
    1192:	fc cf       	rjmp	.-8      	; 0x118c <ir_fail+0x1c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1194:	82 e5       	ldi	r24, 0x52	; 82
    1196:	80 93 b0 09 	sts	0x09B0, r24
void ir_fail() 
{
	uart_putchar(&BT_USART, 'E');
	uart_putchar(&BT_USART, 'R');
	uart_putchar(&BT_USART, 'R');
	ir_read_flag = 0;
    119a:	10 92 04 20 	sts	0x2004, r1
}
    119e:	08 95       	ret

000011a0 <disable_ir_read>:

// Disables the interrupts/event system used to capture IR signal
void disable_ir_read() 
{
	// Turn off interrupts:
	TCE0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    11a0:	e0 e0       	ldi	r30, 0x00	; 0
    11a2:	fa e0       	ldi	r31, 0x0A	; 10
    11a4:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = TC_CCAINTLVL_OFF_gc; 
    11a6:	17 82       	std	Z+7, r1	; 0x07
	// Turn off event system
	EVSYS.CH0MUX  = 0;
    11a8:	10 92 80 01 	sts	0x0180, r1
	TCE0.CTRLD = 0;
    11ac:	13 82       	std	Z+3, r1	; 0x03
	//Turn off Timer-counter
	TCE0.CTRLB = 0;
    11ae:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA = 0;
    11b0:	10 82       	st	Z, r1
}
    11b2:	08 95       	ret

000011b4 <dump_data>:

// Dumps the captured data over serial
void dump_data()
{
	// If signal_count is 2 or 4, we picked up some spurious signal, so don't print those out, instead, send ir_fail()
	if(signal_count > 4) {
    11b4:	80 91 02 20 	lds	r24, 0x2002
    11b8:	85 30       	cpi	r24, 0x05	; 5
    11ba:	f0 f0       	brcs	.+60     	; 0x11f8 <dump_data+0x44>
		uart_putchar(&BT_USART, signal_count-1); // print the length of the signal including the signal length byte. Does not include first two bytes
    11bc:	90 91 02 20 	lds	r25, 0x2002
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    11c0:	80 91 b1 09 	lds	r24, 0x09B1
    11c4:	85 ff       	sbrs	r24, 5
    11c6:	fc cf       	rjmp	.-8      	; 0x11c0 <dump_data+0xc>
    11c8:	91 50       	subi	r25, 0x01	; 1
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    11ca:	90 93 b0 09 	sts	0x09B0, r25
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0c c0       	rjmp	.+24     	; 0x11ea <dump_data+0x36>
		// First two bytes don't get considered part of the signal because they represent a random value (random time to the time of the first edge)
		for(uint8_t i = 2; i < signal_count; i++)
		{
			uart_putchar(&BT_USART, captured_signal[i]);
    11d2:	e9 2f       	mov	r30, r25
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	e5 5f       	subi	r30, 0xF5	; 245
    11d8:	fd 4d       	sbci	r31, 0xDD	; 221
    11da:	e0 81       	ld	r30, Z
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    11dc:	80 91 b1 09 	lds	r24, 0x09B1
    11e0:	85 ff       	sbrs	r24, 5
    11e2:	fc cf       	rjmp	.-8      	; 0x11dc <dump_data+0x28>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    11e4:	e0 93 b0 09 	sts	0x09B0, r30
{
	// If signal_count is 2 or 4, we picked up some spurious signal, so don't print those out, instead, send ir_fail()
	if(signal_count > 4) {
		uart_putchar(&BT_USART, signal_count-1); // print the length of the signal including the signal length byte. Does not include first two bytes
		// First two bytes don't get considered part of the signal because they represent a random value (random time to the time of the first edge)
		for(uint8_t i = 2; i < signal_count; i++)
    11e8:	9f 5f       	subi	r25, 0xFF	; 255
    11ea:	80 91 02 20 	lds	r24, 0x2002
    11ee:	98 17       	cp	r25, r24
    11f0:	80 f3       	brcs	.-32     	; 0x11d2 <dump_data+0x1e>
		{
			uart_putchar(&BT_USART, captured_signal[i]);
		}
		ir_read_flag = 0;
    11f2:	10 92 04 20 	sts	0x2004, r1
    11f6:	08 95       	ret
	}
	else {
		ir_fail();
    11f8:	0e 94 b8 08 	call	0x1170	; 0x1170 <ir_fail>
    11fc:	08 95       	ret

000011fe <__vector_47>:
	}
	signal_count+=2; // Count by 2s because the signal time data takes two bytes
}

// If we get to an overflow (roughly every 16 ms if no captures occur), then either no signal has been seen yet, or one has been seen and has ended
ISR(TCE0_OVF_vect) {
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
    1208:	2f 93       	push	r18
    120a:	3f 93       	push	r19
    120c:	4f 93       	push	r20
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
	// If the signal_count is non zero, we've seen a signal, so dump it over serial
	if(signal_count != 0) {
    1220:	80 91 02 20 	lds	r24, 0x2002
    1224:	88 23       	and	r24, r24
    1226:	29 f0       	breq	.+10     	; 0x1232 <__vector_47+0x34>
		disable_ir_read();
    1228:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <disable_ir_read>
		dump_data();
    122c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <dump_data>
    1230:	0d c0       	rjmp	.+26     	; 0x124c <__vector_47+0x4e>
	}
	// Otherwise, increment the time out counter - if we overflow 250 or more times, report failure to read a signal
	else {
		ir_read_time_out++;
    1232:	80 91 03 20 	lds	r24, 0x2003
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	80 93 03 20 	sts	0x2003, r24
		if(ir_read_time_out > 250) {
    123c:	80 91 03 20 	lds	r24, 0x2003
    1240:	8b 3f       	cpi	r24, 0xFB	; 251
    1242:	20 f0       	brcs	.+8      	; 0x124c <__vector_47+0x4e>
			disable_ir_read();
    1244:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <disable_ir_read>
			ir_fail();
    1248:	0e 94 b8 08 	call	0x1170	; 0x1170 <ir_fail>
		}
	}
}
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <__vector_49>:
	IR Reading: TCE0 */
	
}

// All the fun stuff happens here - this interrupt is triggered when the input signal rises or falls
ISR(TCE0_CCA_vect) {
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	2f 93       	push	r18
    127a:	3f 93       	push	r19
    127c:	4f 93       	push	r20
    127e:	5f 93       	push	r21
    1280:	6f 93       	push	r22
    1282:	7f 93       	push	r23
    1284:	8f 93       	push	r24
    1286:	9f 93       	push	r25
    1288:	af 93       	push	r26
    128a:	bf 93       	push	r27
    128c:	ef 93       	push	r30
    128e:	ff 93       	push	r31
	TCE0.CNT = 0; // Reset the counter
    1290:	e0 e0       	ldi	r30, 0x00	; 0
    1292:	fa e0       	ldi	r31, 0x0A	; 10
    1294:	10 a2       	std	Z+32, r1	; 0x20
    1296:	11 a2       	std	Z+33, r1	; 0x21
	
	// If the number of edges is greater than 191, the signal is longer than we can store - so stop and return failure
	if(signal_count > 191) {
    1298:	80 91 02 20 	lds	r24, 0x2002
    129c:	80 3c       	cpi	r24, 0xC0	; 192
    129e:	28 f0       	brcs	.+10     	; 0x12aa <__vector_49+0x3c>
		disable_ir_read();
    12a0:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <disable_ir_read>
		ir_fail();
    12a4:	0e 94 b8 08 	call	0x1170	; 0x1170 <ir_fail>
    12a8:	39 c0       	rjmp	.+114    	; 0x131c <__vector_49+0xae>
		return;
	}
	// Read the captured signal's time value (CCA register without the highest bit) into our array
	captured_signal[signal_count+1] = TCE0.CCAL;
    12aa:	e0 91 02 20 	lds	r30, 0x2002
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 91 28 0a 	lds	r24, 0x0A28
    12b4:	e4 5f       	subi	r30, 0xF4	; 244
    12b6:	fd 4d       	sbci	r31, 0xDD	; 221
    12b8:	80 83       	st	Z, r24
	captured_signal[signal_count] = TCE0.CCAH&0b01111111;
    12ba:	e0 91 02 20 	lds	r30, 0x2002
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 91 29 0a 	lds	r24, 0x0A29
    12c4:	8f 77       	andi	r24, 0x7F	; 127
    12c6:	e5 5f       	subi	r30, 0xF5	; 245
    12c8:	fd 4d       	sbci	r31, 0xDD	; 221
    12ca:	80 83       	st	Z, r24
	// Ignore spurious signals - software control for glitches from lighting, other remotes, etc - basically, ignores anything that's shorter than 200 microseconds and resets the counter
	if((captured_signal[signal_count+1] < 0x40) && (captured_signal[signal_count] == 0)) 
    12cc:	e0 91 02 20 	lds	r30, 0x2002
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	e4 5f       	subi	r30, 0xF4	; 244
    12d4:	fd 4d       	sbci	r31, 0xDD	; 221
    12d6:	80 81       	ld	r24, Z
    12d8:	80 34       	cpi	r24, 0x40	; 64
    12da:	50 f4       	brcc	.+20     	; 0x12f0 <__vector_49+0x82>
    12dc:	e0 91 02 20 	lds	r30, 0x2002
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	e5 5f       	subi	r30, 0xF5	; 245
    12e4:	fd 4d       	sbci	r31, 0xDD	; 221
    12e6:	80 81       	ld	r24, Z
    12e8:	88 23       	and	r24, r24
    12ea:	11 f4       	brne	.+4      	; 0x12f0 <__vector_49+0x82>
	{
		signal_count = 0;
    12ec:	10 92 02 20 	sts	0x2002, r1
	}
	// If the signal count increases past a typical "start-up" section, tighten the spacing between
	// rising and falling edges to 8 ms to prevent multiple consecutive reads of the same signal
	if((signal_count > 16) & (captured_signal[signal_count] > 0x10)) {
    12f0:	80 91 02 20 	lds	r24, 0x2002
    12f4:	e0 91 02 20 	lds	r30, 0x2002
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	e5 5f       	subi	r30, 0xF5	; 245
    12fc:	fd 4d       	sbci	r31, 0xDD	; 221
    12fe:	e0 81       	ld	r30, Z
    1300:	81 31       	cpi	r24, 0x11	; 17
    1302:	38 f0       	brcs	.+14     	; 0x1312 <__vector_49+0xa4>
    1304:	e1 31       	cpi	r30, 0x11	; 17
    1306:	28 f0       	brcs	.+10     	; 0x1312 <__vector_49+0xa4>
		disable_ir_read();
    1308:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <disable_ir_read>
		dump_data(); // Prints all of the data over serial
    130c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <dump_data>
    1310:	05 c0       	rjmp	.+10     	; 0x131c <__vector_49+0xae>
		return;	
	}
	signal_count+=2; // Count by 2s because the signal time data takes two bytes
    1312:	80 91 02 20 	lds	r24, 0x2002
    1316:	8e 5f       	subi	r24, 0xFE	; 254
    1318:	80 93 02 20 	sts	0x2002, r24
}
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <read_data_from_serial>:
	}
}

// Reads raw data from the host into the robotData structure, where it can be used to re-transmit the data.
int read_data_from_serial()
{
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
	int signal_length = uart_getchar_timeout(&BT_USART);
    1348:	80 eb       	ldi	r24, 0xB0	; 176
    134a:	99 e0       	ldi	r25, 0x09	; 9
    134c:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1350:	9c 01       	movw	r18, r24
	int temp = 0;

	uart_putchar(&BT_USART, signal_length);
    1352:	18 2f       	mov	r17, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1354:	80 91 b1 09 	lds	r24, 0x09B1
    1358:	85 ff       	sbrs	r24, 5
    135a:	fc cf       	rjmp	.-8      	; 0x1354 <read_data_from_serial+0x16>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    135c:	10 93 b0 09 	sts	0x09B0, r17
    1360:	c0 e0       	ldi	r28, 0x00	; 0
    1362:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(int i = 0; i < signal_length-1; i++) {
    1364:	79 01       	movw	r14, r18
    1366:	08 94       	sec
    1368:	e1 08       	sbc	r14, r1
    136a:	f1 08       	sbc	r15, r1
    136c:	17 c0       	rjmp	.+46     	; 0x139c <read_data_from_serial+0x5e>
		temp = uart_getchar_timeout(&BT_USART);
    136e:	80 eb       	ldi	r24, 0xB0	; 176
    1370:	99 e0       	ldi	r25, 0x09	; 9
    1372:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
		if(temp == 256) {
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	80 30       	cpi	r24, 0x00	; 0
    137a:	92 07       	cpc	r25, r18
    137c:	19 f4       	brne	.+6      	; 0x1384 <read_data_from_serial+0x46>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <read_data_from_serial+0x6e>
			return 0;
		}
		else {
			uart_putchar(&BT_USART, temp);
    1384:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1386:	80 91 b1 09 	lds	r24, 0x09B1
    138a:	85 ff       	sbrs	r24, 5
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <read_data_from_serial+0x48>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    138e:	90 93 b0 09 	sts	0x09B0, r25
			robotData.irBytes[i] = (char)temp;
    1392:	fe 01       	movw	r30, r28
    1394:	e5 5e       	subi	r30, 0xE5	; 229
    1396:	fe 4d       	sbci	r31, 0xDE	; 222
    1398:	94 a7       	std	Z+44, r25	; 0x2c
	int signal_length = uart_getchar_timeout(&BT_USART);
	int temp = 0;

	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < signal_length-1; i++) {
    139a:	21 96       	adiw	r28, 0x01	; 1
    139c:	ce 15       	cp	r28, r14
    139e:	df 05       	cpc	r29, r15
    13a0:	34 f3       	brlt	.-52     	; 0x136e <read_data_from_serial+0x30>
			uart_putchar(&BT_USART, temp);
			robotData.irBytes[i] = (char)temp;
		}
	}
	
	robotData.numBits = signal_length-1;
    13a2:	11 50       	subi	r17, 0x01	; 1
    13a4:	10 93 3f 21 	sts	0x213F, r17
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	30 e0       	ldi	r19, 0x00	; 0
	return 1;
}	
    13ac:	c9 01       	movw	r24, r18
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	08 95       	ret

000013ba <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    13ba:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    13bc:	e0 ec       	ldi	r30, 0xC0	; 192
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	80 91 cf 01 	lds	r24, 0x01CF
    13c4:	87 fd       	sbrc	r24, 7
    13c6:	fa cf       	rjmp	.-12     	; 0x13bc <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    13c8:	26 2f       	mov	r18, r22
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	2f 71       	andi	r18, 0x1F	; 31
    13ce:	30 70       	andi	r19, 0x00	; 0
    13d0:	89 2f       	mov	r24, r25
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	45 e0       	ldi	r20, 0x05	; 5
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	4a 95       	dec	r20
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <EEPROM_ReadByte+0x1c>
    13de:	28 2b       	or	r18, r24
    13e0:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    13e2:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    13e6:	83 2f       	mov	r24, r19
    13e8:	8f 71       	andi	r24, 0x1F	; 31
    13ea:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    13ec:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
    13f6:	0f 93       	push	r16
    13f8:	2f 93       	push	r18
    13fa:	eb ec       	ldi	r30, 0xCB	; 203
    13fc:	f1 e0       	ldi	r31, 0x01	; 1
    13fe:	08 ed       	ldi	r16, 0xD8	; 216
    1400:	21 e0       	ldi	r18, 0x01	; 1
    1402:	04 bf       	out	0x34, r16	; 52
    1404:	20 83       	st	Z, r18
    1406:	2f 91       	pop	r18
    1408:	0f 91       	pop	r16
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30

	return NVM.DATA0;
    140e:	80 91 c4 01 	lds	r24, 0x01C4
}
    1412:	08 95       	ret

00001414 <print_data_from_eeprom>:
	robotData.numBits = signal_length-1;
}	

// Sends the data in EEPROM over bluetooth to the host
void print_data_from_eeprom(int position)
{
    1414:	af 92       	push	r10
    1416:	bf 92       	push	r11
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
	int signal_length = EEPROM_ReadByte(position*6, 0);
    1428:	9c 01       	movw	r18, r24
    142a:	22 0f       	add	r18, r18
    142c:	33 1f       	adc	r19, r19
    142e:	28 0f       	add	r18, r24
    1430:	39 1f       	adc	r19, r25
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	c2 2e       	mov	r12, r18
    1438:	82 2f       	mov	r24, r18
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EEPROM_ReadByte>
    1440:	28 2f       	mov	r18, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
	int pages = signal_length/32;
    1444:	7c 01       	movw	r14, r24
    1446:	65 e0       	ldi	r22, 0x05	; 5
    1448:	f5 94       	asr	r15
    144a:	e7 94       	ror	r14
    144c:	6a 95       	dec	r22
    144e:	e1 f7       	brne	.-8      	; 0x1448 <print_data_from_eeprom+0x34>
	int remainder = signal_length%32;
    1450:	5f e1       	ldi	r21, 0x1F	; 31
    1452:	a5 2e       	mov	r10, r21
    1454:	b1 2c       	mov	r11, r1
    1456:	a8 22       	and	r10, r24
    1458:	b9 22       	and	r11, r25
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    145a:	80 91 b1 09 	lds	r24, 0x09B1
    145e:	85 ff       	sbrs	r24, 5
    1460:	fc cf       	rjmp	.-8      	; 0x145a <print_data_from_eeprom+0x46>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1462:	20 93 b0 09 	sts	0x09B0, r18
    1466:	c1 e0       	ldi	r28, 0x01	; 1
    1468:	d0 e0       	ldi	r29, 0x00	; 0
    146a:	00 e0       	ldi	r16, 0x00	; 0
    146c:	10 e0       	ldi	r17, 0x00	; 0
    146e:	15 c0       	rjmp	.+42     	; 0x149a <print_data_from_eeprom+0x86>
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + i, j));
    1470:	dc 2c       	mov	r13, r12
    1472:	d0 0e       	add	r13, r16
    1474:	8d 2d       	mov	r24, r13
    1476:	6c 2f       	mov	r22, r28
    1478:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EEPROM_ReadByte>
    147c:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    147e:	80 91 b1 09 	lds	r24, 0x09B1
    1482:	85 ff       	sbrs	r24, 5
    1484:	fc cf       	rjmp	.-8      	; 0x147e <print_data_from_eeprom+0x6a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1486:	90 93 b0 09 	sts	0x09B0, r25
			j++;
    148a:	21 96       	adiw	r28, 0x01	; 1
	int j = 1;
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    148c:	c0 32       	cpi	r28, 0x20	; 32
    148e:	d1 05       	cpc	r29, r1
    1490:	8c f3       	brlt	.-30     	; 0x1474 <print_data_from_eeprom+0x60>
	int remainder = signal_length%32;
	int j = 1;
	
	uart_putchar(&BT_USART, signal_length);
	
	for(int i = 0; i < pages; i++) {
    1492:	0f 5f       	subi	r16, 0xFF	; 255
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	c0 e0       	ldi	r28, 0x00	; 0
    1498:	d0 e0       	ldi	r29, 0x00	; 0
    149a:	0e 15       	cp	r16, r14
    149c:	1f 05       	cpc	r17, r15
    149e:	44 f3       	brlt	.-48     	; 0x1470 <print_data_from_eeprom+0x5c>
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <print_data_from_eeprom+0xa8>
		}
		j = 0;
	}
	
	while(j < remainder) {
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
    14a2:	81 2f       	mov	r24, r17
    14a4:	6c 2f       	mov	r22, r28
    14a6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EEPROM_ReadByte>
    14aa:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    14ac:	80 91 b1 09 	lds	r24, 0x09B1
    14b0:	85 ff       	sbrs	r24, 5
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <print_data_from_eeprom+0x98>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    14b4:	90 93 b0 09 	sts	0x09B0, r25
		j++;
    14b8:	21 96       	adiw	r28, 0x01	; 1
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <print_data_from_eeprom+0xac>
		}
		j = 0;
	}
	
	while(j < remainder) {
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
    14bc:	1c 2d       	mov	r17, r12
    14be:	1e 0d       	add	r17, r14
			j++;
		}
		j = 0;
	}
	
	while(j < remainder) {
    14c0:	ca 15       	cp	r28, r10
    14c2:	db 05       	cpc	r29, r11
    14c4:	74 f3       	brlt	.-36     	; 0x14a2 <print_data_from_eeprom+0x8e>
		uart_putchar(&BT_USART, EEPROM_ReadByte(position*6 + pages, j));
		j++;
	}
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	df 90       	pop	r13
    14d4:	cf 90       	pop	r12
    14d6:	bf 90       	pop	r11
    14d8:	af 90       	pop	r10
    14da:	08 95       	ret

000014dc <read_data_from_eeprom>:
	}
}	

// Reads the data in a given EEPROM position into the robotData structure, from where it can be used to re-transmit the signal
void read_data_from_eeprom(int position)
{
    14dc:	5f 92       	push	r5
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
	int signal_length = EEPROM_ReadByte(position*6, 0);
    14fa:	9c 01       	movw	r18, r24
    14fc:	22 0f       	add	r18, r18
    14fe:	33 1f       	adc	r19, r19
    1500:	28 0f       	add	r18, r24
    1502:	39 1f       	adc	r19, r25
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	52 2e       	mov	r5, r18
    150a:	82 2f       	mov	r24, r18
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EEPROM_ReadByte>
    1512:	b8 2e       	mov	r11, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
	int pages = signal_length/32;
    1516:	4c 01       	movw	r8, r24
    1518:	b5 e0       	ldi	r27, 0x05	; 5
    151a:	95 94       	asr	r9
    151c:	87 94       	ror	r8
    151e:	ba 95       	dec	r27
    1520:	e1 f7       	brne	.-8      	; 0x151a <read_data_from_eeprom+0x3e>
	int remainder = signal_length%32;
    1522:	af e1       	ldi	r26, 0x1F	; 31
    1524:	6a 2e       	mov	r6, r26
    1526:	71 2c       	mov	r7, r1
    1528:	68 22       	and	r6, r24
    152a:	79 22       	and	r7, r25
    152c:	ee 24       	eor	r14, r14
    152e:	ff 24       	eor	r15, r15
    1530:	c1 e0       	ldi	r28, 0x01	; 1
    1532:	d0 e0       	ldi	r29, 0x00	; 0
    1534:	00 e0       	ldi	r16, 0x00	; 0
    1536:	10 e0       	ldi	r17, 0x00	; 0
    1538:	12 c0       	rjmp	.+36     	; 0x155e <read_data_from_eeprom+0x82>
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + i, j);
    153a:	8a 2d       	mov	r24, r10
    153c:	6c 2f       	mov	r22, r28
    153e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EEPROM_ReadByte>
    1542:	f6 01       	movw	r30, r12
    1544:	81 93       	st	Z+, r24
    1546:	6f 01       	movw	r12, r30
			array_counter++;
    1548:	08 94       	sec
    154a:	e1 1c       	adc	r14, r1
    154c:	f1 1c       	adc	r15, r1
			j++;
    154e:	21 96       	adiw	r28, 0x01	; 1
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    1550:	c0 32       	cpi	r28, 0x20	; 32
    1552:	d1 05       	cpc	r29, r1
    1554:	94 f3       	brlt	.-28     	; 0x153a <read_data_from_eeprom+0x5e>
	int pages = signal_length/32;
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
    1556:	0f 5f       	subi	r16, 0xFF	; 255
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	c0 e0       	ldi	r28, 0x00	; 0
    155c:	d0 e0       	ldi	r29, 0x00	; 0
    155e:	c7 01       	movw	r24, r14
    1560:	8c 96       	adiw	r24, 0x2c	; 44
    1562:	08 15       	cp	r16, r8
    1564:	19 05       	cpc	r17, r9
    1566:	34 f0       	brlt	.+12     	; 0x1574 <read_data_from_eeprom+0x98>
    1568:	8c 01       	movw	r16, r24
    156a:	05 5e       	subi	r16, 0xE5	; 229
    156c:	1e 4d       	sbci	r17, 0xDE	; 222
		}
		j = 0;
	}
	
	while(j < remainder) {
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
    156e:	f5 2c       	mov	r15, r5
    1570:	f8 0c       	add	r15, r8
    1572:	11 c0       	rjmp	.+34     	; 0x1596 <read_data_from_eeprom+0xba>
	int pages = signal_length/32;
	int remainder = signal_length%32;
	int array_counter = 0;
	int j = 1;
	
	for(int i = 0; i < pages; i++) {
    1574:	fb e1       	ldi	r31, 0x1B	; 27
    1576:	cf 2e       	mov	r12, r31
    1578:	f1 e2       	ldi	r31, 0x21	; 33
    157a:	df 2e       	mov	r13, r31
    157c:	c8 0e       	add	r12, r24
    157e:	d9 1e       	adc	r13, r25
		while(j < EEPROM_PAGESIZE) {
			robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + i, j);
    1580:	a5 2c       	mov	r10, r5
    1582:	a0 0e       	add	r10, r16
    1584:	da cf       	rjmp	.-76     	; 0x153a <read_data_from_eeprom+0x5e>
		}
		j = 0;
	}
	
	while(j < remainder) {
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
    1586:	8f 2d       	mov	r24, r15
    1588:	6c 2f       	mov	r22, r28
    158a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EEPROM_ReadByte>
    158e:	f8 01       	movw	r30, r16
    1590:	81 93       	st	Z+, r24
    1592:	8f 01       	movw	r16, r30
		array_counter++;
		j++;
    1594:	21 96       	adiw	r28, 0x01	; 1
			j++;
		}
		j = 0;
	}
	
	while(j < remainder) {
    1596:	c6 15       	cp	r28, r6
    1598:	d7 05       	cpc	r29, r7
    159a:	ac f3       	brlt	.-22     	; 0x1586 <read_data_from_eeprom+0xaa>
		robotData.irBytes[array_counter] = EEPROM_ReadByte(position*6 + pages, j);
		array_counter++;
		j++;
	}
	robotData.numBits = signal_length-1;
    159c:	ba 94       	dec	r11
    159e:	b0 92 3f 21 	sts	0x213F, r11
}	
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	bf 90       	pop	r11
    15b4:	af 90       	pop	r10
    15b6:	9f 90       	pop	r9
    15b8:	8f 90       	pop	r8
    15ba:	7f 90       	pop	r7
    15bc:	6f 90       	pop	r6
    15be:	5f 90       	pop	r5
    15c0:	08 95       	ret

000015c2 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    15c2:	80 91 cf 01 	lds	r24, 0x01CF
    15c6:	87 fd       	sbrc	r24, 7
    15c8:	fc cf       	rjmp	.-8      	; 0x15c2 <EEPROM_WaitForNVM>
}
    15ca:	08 95       	ret

000015cc <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    15cc:	80 91 cf 01 	lds	r24, 0x01CF
    15d0:	87 fd       	sbrc	r24, 7
    15d2:	fc cf       	rjmp	.-8      	; 0x15cc <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    15d4:	80 91 cf 01 	lds	r24, 0x01CF
    15d8:	81 ff       	sbrs	r24, 1
    15da:	12 c0       	rjmp	.+36     	; 0x1600 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    15dc:	86 e3       	ldi	r24, 0x36	; 54
    15de:	e0 ec       	ldi	r30, 0xC0	; 192
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	0f 93       	push	r16
    15ea:	2f 93       	push	r18
    15ec:	eb ec       	ldi	r30, 0xCB	; 203
    15ee:	f1 e0       	ldi	r31, 0x01	; 1
    15f0:	08 ed       	ldi	r16, 0xD8	; 216
    15f2:	21 e0       	ldi	r18, 0x01	; 1
    15f4:	04 bf       	out	0x34, r16	; 52
    15f6:	20 83       	st	Z, r18
    15f8:	2f 91       	pop	r18
    15fa:	0f 91       	pop	r16
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	08 95       	ret

00001602 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    1602:	df 92       	push	r13
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	e8 2e       	mov	r14, r24
    160e:	06 2f       	mov	r16, r22
    1610:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    1612:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1616:	e0 ec       	ldi	r30, 0xC0	; 192
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	83 e3       	ldi	r24, 0x33	; 51
    161c:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	0f 71       	andi	r16, 0x1F	; 31
    1622:	10 70       	andi	r17, 0x00	; 0
    1624:	ff 24       	eor	r15, r15
    1626:	85 e0       	ldi	r24, 0x05	; 5
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	8a 95       	dec	r24
    162e:	e1 f7       	brne	.-8      	; 0x1628 <EEPROM_WriteByte+0x26>
    1630:	0e 29       	or	r16, r14
    1632:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    1634:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1636:	81 2f       	mov	r24, r17
    1638:	8f 71       	andi	r24, 0x1F	; 31
    163a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    163c:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    163e:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1640:	85 e3       	ldi	r24, 0x35	; 53
    1642:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
    1648:	0f 93       	push	r16
    164a:	2f 93       	push	r18
    164c:	eb ec       	ldi	r30, 0xCB	; 203
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	08 ed       	ldi	r16, 0xD8	; 216
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	04 bf       	out	0x34, r16	; 52
    1656:	20 83       	st	Z, r18
    1658:	2f 91       	pop	r18
    165a:	0f 91       	pop	r16
    165c:	ff 91       	pop	r31
    165e:	ef 91       	pop	r30
}
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	08 95       	ret

0000166c <write_data_to_eeprom>:
	}
}

// Write data takes the captured signal array and writes it into eeprom
void write_data_to_eeprom(int position) 
{
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	9c 01       	movw	r18, r24
	int pages = (signal_count-1)/32; // The first two bytes of the signal are invalid, but we need an extra byte to hold the length of the signal
    1686:	80 91 02 20 	lds	r24, 0x2002
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	60 e2       	ldi	r22, 0x20	; 32
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
    1696:	6b 01       	movw	r12, r22
	int remainder = (signal_count-1)%32;
    1698:	80 91 02 20 	lds	r24, 0x2002
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	60 e2       	ldi	r22, 0x20	; 32
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
    16a8:	5c 01       	movw	r10, r24
	int array_counter = 2;
	int j = 0;
	
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
    16aa:	c9 01       	movw	r24, r18
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	88 2e       	mov	r8, r24
    16ba:	40 91 02 20 	lds	r20, 0x2002
    16be:	41 50       	subi	r20, 0x01	; 1
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	0e 94 01 0b 	call	0x1602	; 0x1602 <EEPROM_WriteByte>
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	e9 2e       	mov	r14, r25
    16ca:	f1 2c       	mov	r15, r1
    16cc:	c1 e0       	ldi	r28, 0x01	; 1
    16ce:	d0 e0       	ldi	r29, 0x00	; 0
    16d0:	00 e0       	ldi	r16, 0x00	; 0
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	15 c0       	rjmp	.+42     	; 0x1700 <write_data_to_eeprom+0x94>
	j++;
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
			EEPROM_WriteByte(position*6 + i, j, captured_signal[array_counter]);
    16d6:	98 2c       	mov	r9, r8
    16d8:	90 0e       	add	r9, r16
    16da:	f7 01       	movw	r30, r14
    16dc:	e5 5f       	subi	r30, 0xF5	; 245
    16de:	fd 4d       	sbci	r31, 0xDD	; 221
    16e0:	40 81       	ld	r20, Z
    16e2:	89 2d       	mov	r24, r9
    16e4:	6c 2f       	mov	r22, r28
    16e6:	0e 94 01 0b 	call	0x1602	; 0x1602 <EEPROM_WriteByte>
			array_counter++;
    16ea:	08 94       	sec
    16ec:	e1 1c       	adc	r14, r1
    16ee:	f1 1c       	adc	r15, r1
			j++;
    16f0:	21 96       	adiw	r28, 0x01	; 1
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
	j++;
	for(int i = 0; i < pages; i++) {
		while(j < EEPROM_PAGESIZE) {
    16f2:	c0 32       	cpi	r28, 0x20	; 32
    16f4:	d1 05       	cpc	r29, r1
    16f6:	8c f3       	brlt	.-30     	; 0x16da <write_data_to_eeprom+0x6e>
	
	// Write the length of the data - signal_count-2, plus 1 byte to hold the length of the signal
	// Uses the EEPROM driver by Atmel, included in the source package.
	EEPROM_WriteByte(position*6, j, signal_count-1);
	j++;
	for(int i = 0; i < pages; i++) {
    16f8:	0f 5f       	subi	r16, 0xFF	; 255
    16fa:	1f 4f       	sbci	r17, 0xFF	; 255
    16fc:	c0 e0       	ldi	r28, 0x00	; 0
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
    1700:	0c 15       	cp	r16, r12
    1702:	1d 05       	cpc	r17, r13
    1704:	44 f3       	brlt	.-48     	; 0x16d6 <write_data_to_eeprom+0x6a>
    1706:	0d c0       	rjmp	.+26     	; 0x1722 <write_data_to_eeprom+0xb6>
		}
		j=0;
	}
	
	while(j < remainder) {
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
    1708:	f7 01       	movw	r30, r14
    170a:	e5 5f       	subi	r30, 0xF5	; 245
    170c:	fd 4d       	sbci	r31, 0xDD	; 221
    170e:	40 81       	ld	r20, Z
    1710:	81 2f       	mov	r24, r17
    1712:	6c 2f       	mov	r22, r28
    1714:	0e 94 01 0b 	call	0x1602	; 0x1602 <EEPROM_WriteByte>
		array_counter++;
    1718:	08 94       	sec
    171a:	e1 1c       	adc	r14, r1
    171c:	f1 1c       	adc	r15, r1
		j++;
    171e:	21 96       	adiw	r28, 0x01	; 1
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <write_data_to_eeprom+0xba>
		}
		j=0;
	}
	
	while(j < remainder) {
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
    1722:	18 2d       	mov	r17, r8
    1724:	1c 0d       	add	r17, r12
			j++;
		}
		j=0;
	}
	
	while(j < remainder) {
    1726:	ca 15       	cp	r28, r10
    1728:	db 05       	cpc	r29, r11
    172a:	74 f3       	brlt	.-36     	; 0x1708 <write_data_to_eeprom+0x9c>
		EEPROM_WriteByte(position*6 + pages, j, captured_signal[array_counter]);
		array_counter++;
		j++;
	}
}	
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	9f 90       	pop	r9
    1742:	8f 90       	pop	r8
    1744:	08 95       	ret

00001746 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    1746:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1748:	e0 ec       	ldi	r30, 0xC0	; 192
    174a:	f1 e0       	ldi	r31, 0x01	; 1
    174c:	80 91 cf 01 	lds	r24, 0x01CF
    1750:	87 fd       	sbrc	r24, 7
    1752:	fa cf       	rjmp	.-12     	; 0x1748 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1754:	83 e3       	ldi	r24, 0x33	; 51
    1756:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    1758:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    175c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    175e:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    1760:	64 83       	std	Z+4, r22	; 0x04
}
    1762:	08 95       	ret

00001764 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    1764:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1766:	e0 ec       	ldi	r30, 0xC0	; 192
    1768:	f1 e0       	ldi	r31, 0x01	; 1
    176a:	80 91 cf 01 	lds	r24, 0x01CF
    176e:	87 fd       	sbrc	r24, 7
    1770:	fa cf       	rjmp	.-12     	; 0x1766 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1772:	83 e3       	ldi	r24, 0x33	; 51
    1774:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    1776:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    1778:	12 82       	std	Z+2, r1	; 0x02
    177a:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    177c:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    1780:	8d 91       	ld	r24, X+
    1782:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    1784:	9f 5f       	subi	r25, 0xFF	; 255
    1786:	90 32       	cpi	r25, 0x20	; 32
    1788:	c9 f7       	brne	.-14     	; 0x177c <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    178a:	08 95       	ret

0000178c <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    178c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    178e:	e0 ec       	ldi	r30, 0xC0	; 192
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	80 91 cf 01 	lds	r24, 0x01CF
    1796:	87 fd       	sbrc	r24, 7
    1798:	fa cf       	rjmp	.-12     	; 0x178e <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    179a:	89 2f       	mov	r24, r25
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	55 e0       	ldi	r21, 0x05	; 5
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	5a 95       	dec	r21
    17a6:	e1 f7       	brne	.-8      	; 0x17a0 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    17a8:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    17ac:	89 2f       	mov	r24, r25
    17ae:	8f 71       	andi	r24, 0x1F	; 31
    17b0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    17b2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    17b4:	85 e3       	ldi	r24, 0x35	; 53
    17b6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
    17bc:	0f 93       	push	r16
    17be:	2f 93       	push	r18
    17c0:	eb ec       	ldi	r30, 0xCB	; 203
    17c2:	f1 e0       	ldi	r31, 0x01	; 1
    17c4:	08 ed       	ldi	r16, 0xD8	; 216
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	04 bf       	out	0x34, r16	; 52
    17ca:	20 83       	st	Z, r18
    17cc:	2f 91       	pop	r18
    17ce:	0f 91       	pop	r16
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
}
    17d4:	08 95       	ret

000017d6 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    17d6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    17d8:	e0 ec       	ldi	r30, 0xC0	; 192
    17da:	f1 e0       	ldi	r31, 0x01	; 1
    17dc:	80 91 cf 01 	lds	r24, 0x01CF
    17e0:	87 fd       	sbrc	r24, 7
    17e2:	fa cf       	rjmp	.-12     	; 0x17d8 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    17e4:	89 2f       	mov	r24, r25
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	65 e0       	ldi	r22, 0x05	; 5
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	6a 95       	dec	r22
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    17f2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    17f6:	89 2f       	mov	r24, r25
    17f8:	8f 71       	andi	r24, 0x1F	; 31
    17fa:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    17fc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    17fe:	82 e3       	ldi	r24, 0x32	; 50
    1800:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
    1806:	0f 93       	push	r16
    1808:	2f 93       	push	r18
    180a:	eb ec       	ldi	r30, 0xCB	; 203
    180c:	f1 e0       	ldi	r31, 0x01	; 1
    180e:	08 ed       	ldi	r16, 0xD8	; 216
    1810:	21 e0       	ldi	r18, 0x01	; 1
    1812:	04 bf       	out	0x34, r16	; 52
    1814:	20 83       	st	Z, r18
    1816:	2f 91       	pop	r18
    1818:	0f 91       	pop	r16
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
}
    181e:	08 95       	ret

00001820 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    1820:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    1822:	e0 ec       	ldi	r30, 0xC0	; 192
    1824:	f1 e0       	ldi	r31, 0x01	; 1
    1826:	80 91 cf 01 	lds	r24, 0x01CF
    182a:	87 fd       	sbrc	r24, 7
    182c:	fa cf       	rjmp	.-12     	; 0x1822 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    182e:	89 2f       	mov	r24, r25
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	75 e0       	ldi	r23, 0x05	; 5
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	7a 95       	dec	r23
    183a:	e1 f7       	brne	.-8      	; 0x1834 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    183c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1840:	89 2f       	mov	r24, r25
    1842:	8f 71       	andi	r24, 0x1F	; 31
    1844:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    1846:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    1848:	84 e3       	ldi	r24, 0x34	; 52
    184a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
    1850:	0f 93       	push	r16
    1852:	2f 93       	push	r18
    1854:	eb ec       	ldi	r30, 0xCB	; 203
    1856:	f1 e0       	ldi	r31, 0x01	; 1
    1858:	08 ed       	ldi	r16, 0xD8	; 216
    185a:	21 e0       	ldi	r18, 0x01	; 1
    185c:	04 bf       	out	0x34, r16	; 52
    185e:	20 83       	st	Z, r18
    1860:	2f 91       	pop	r18
    1862:	0f 91       	pop	r16
    1864:	ff 91       	pop	r31
    1866:	ef 91       	pop	r30
}
    1868:	08 95       	ret

0000186a <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    186a:	80 91 cf 01 	lds	r24, 0x01CF
    186e:	87 fd       	sbrc	r24, 7
    1870:	fc cf       	rjmp	.-8      	; 0x186a <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    1872:	80 e3       	ldi	r24, 0x30	; 48
    1874:	e0 ec       	ldi	r30, 0xC0	; 192
    1876:	f1 e0       	ldi	r31, 0x01	; 1
    1878:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    187a:	ef 93       	push	r30
    187c:	ff 93       	push	r31
    187e:	0f 93       	push	r16
    1880:	2f 93       	push	r18
    1882:	eb ec       	ldi	r30, 0xCB	; 203
    1884:	f1 e0       	ldi	r31, 0x01	; 1
    1886:	08 ed       	ldi	r16, 0xD8	; 216
    1888:	21 e0       	ldi	r18, 0x01	; 1
    188a:	04 bf       	out	0x34, r16	; 52
    188c:	20 83       	st	Z, r18
    188e:	2f 91       	pop	r18
    1890:	0f 91       	pop	r16
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
}
    1896:	08 95       	ret

00001898 <main>:

// Includes all header files for libraries/drivers
#include "brainlink.h"

int main(void)
{
    1898:	2f 92       	push	r2
    189a:	3f 92       	push	r3
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	a3 97       	sbiw	r28, 0x23	; 35
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	de bf       	out	0x3e, r29	; 62

	
	long int time_out=0; // Counter which counts to a preset level corresponding to roughly 1 minute
	
	// Initialize system
	init_clock();
    18c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <init_clock>
	
	init_led();
    18ca:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init_led>

	init_adc();
    18ce:	0e 94 56 02 	call	0x4ac	; 0x4ac <init_adc>
	
	init_ir();
    18d2:	0e 94 ad 02 	call	0x55a	; 0x55a <init_ir>
	
	init_BT();
    18d6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <init_BT>
	
	init_dac();
    18da:	0e 94 c7 06 	call	0xd8e	; 0xd8e <init_dac>
	
	init_buzzer();
    18de:	0e 94 13 07 	call	0xe26	; 0xe26 <init_buzzer>
		
	initAccel();
    18e2:	0e 94 04 06 	call	0xc08	; 0xc08 <initAccel>

	init_aux_uart(131, -3); // Set the auxiliary uart to 9600 8n1
    18e6:	83 e8       	ldi	r24, 0x83	; 131
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	6d ef       	ldi	r22, 0xFD	; 253
    18ec:	0e 94 30 01 	call	0x260	; 0x260 <init_aux_uart>
	
	EEPROM_DisableMapping();
    18f0:	80 91 cc 01 	lds	r24, 0x01CC
    18f4:	87 7f       	andi	r24, 0xF7	; 247
    18f6:	e0 ec       	ldi	r30, 0xC0	; 192
    18f8:	f1 e0       	ldi	r31, 0x01	; 1
    18fa:	84 87       	std	Z+12, r24	; 0x0c

	// Enable global interrupts
	sei();
    18fc:	78 94       	sei
    18fe:	cc 24       	eor	r12, r12
    1900:	dd 24       	eor	r13, r13
    1902:	85 e4       	ldi	r24, 0x45	; 69
    1904:	88 2e       	mov	r8, r24

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
    1906:	02 e5       	ldi	r16, 0x52	; 82
    1908:	90 2e       	mov	r9, r16
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	20 93 39 09 	sts	0x0939, r18
	TCD0.CCBBUFH = 255-blue;
    1910:	20 93 3b 09 	sts	0x093B, r18
	TCD0.CCCBUFH = 255-green;
    1914:	20 93 3d 09 	sts	0x093D, r18
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1918:	e0 e4       	ldi	r30, 0x40	; 64
    191a:	f8 e0       	ldi	r31, 0x08	; 8
    191c:	16 82       	std	Z+6, r1	; 0x06
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
    191e:	f8 94       	cli
	TCC0.CCA = 0x0000;
    1920:	e0 e0       	ldi	r30, 0x00	; 0
    1922:	f8 e0       	ldi	r31, 0x08	; 8
    1924:	10 a6       	std	Z+40, r1	; 0x28
    1926:	11 a6       	std	Z+41, r1	; 0x29
	sei();
    1928:	78 94       	sei
    192a:	20 e0       	ldi	r18, 0x00	; 0
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    192c:	80 91 b1 09 	lds	r24, 0x09B1
    1930:	85 ff       	sbrs	r24, 5
    1932:	fc cf       	rjmp	.-8      	; 0x192c <main+0x94>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1934:	32 e4       	ldi	r19, 0x42	; 66
    1936:	30 93 b0 09 	sts	0x09B0, r19
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    193a:	80 91 b1 09 	lds	r24, 0x09B1
    193e:	85 ff       	sbrs	r24, 5
    1940:	fc cf       	rjmp	.-8      	; 0x193a <main+0xa2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1942:	4c e4       	ldi	r20, 0x4C	; 76
    1944:	40 93 b0 09 	sts	0x09B0, r20
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1948:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    194c:	80 91 08 21 	lds	r24, 0x2108
		
		// Sing a BL song in idle mode so you can be found. Stop as soon as you get a *
		while(choice != 42) {
			uart_putchar(&BT_USART, 'B');
			uart_putchar(&BT_USART, 'L');
			if (USART_RXBufferData_Available(&BT_data)) {
    1950:	98 17       	cp	r25, r24
    1952:	89 f0       	breq	.+34     	; 0x1976 <main+0xde>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    1954:	e0 91 08 21 	lds	r30, 0x2108
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	eb 5f       	subi	r30, 0xFB	; 251
    195c:	ff 4d       	sbci	r31, 0xDF	; 223
    195e:	22 81       	ldd	r18, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    1960:	80 91 08 21 	lds	r24, 0x2108
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	80 93 08 21 	sts	0x2108, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    196a:	80 91 b1 09 	lds	r24, 0x09B1
    196e:	85 ff       	sbrs	r24, 5
    1970:	fc cf       	rjmp	.-8      	; 0x196a <main+0xd2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1972:	20 93 b0 09 	sts	0x09B0, r18
    1976:	88 e8       	ldi	r24, 0x88	; 136
    1978:	93 e1       	ldi	r25, 0x13	; 19
    197a:	e0 e2       	ldi	r30, 0x20	; 32
    197c:	f3 e0       	ldi	r31, 0x03	; 3
    197e:	31 97       	sbiw	r30, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <main+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1984:	d1 f7       	brne	.-12     	; 0x197a <main+0xe2>
		choice = 0;
		time_out = 0;
		stop_ir_timer();
		
		// Sing a BL song in idle mode so you can be found. Stop as soon as you get a *
		while(choice != 42) {
    1986:	2a 32       	cpi	r18, 0x2A	; 42
    1988:	89 f6       	brne	.-94     	; 0x192c <main+0x94>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e0       	ldi	r27, 0x00	; 0

// Sets up PWM to a given frequency (both channels must share the same frequency)
void set_pwm() {

	// Set clock to 32 MHz
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;
    1992:	41 2c       	mov	r4, r1
    1994:	1a e0       	ldi	r17, 0x0A	; 10
    1996:	51 2e       	mov	r5, r17
		}
	
		// Active part of the program - listens for commands and responds as necessary
		while(exit == 0) {
			// Checks if we haven't heard anything for a long time, in which case we exit loop and go back to idle mode
			time_out++;
    1998:	9c 01       	movw	r18, r24
    199a:	ad 01       	movw	r20, r26
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	4f 4f       	sbci	r20, 0xFF	; 255
    19a2:	5f 4f       	sbci	r21, 0xFF	; 255
    19a4:	28 a3       	std	Y+32, r18	; 0x20
    19a6:	39 a3       	std	Y+33, r19	; 0x21
    19a8:	4a a3       	std	Y+34, r20	; 0x22
    19aa:	5b a3       	std	Y+35, r21	; 0x23
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    19ac:	90 91 07 21 	lds	r25, 0x2107
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    19b0:	80 91 08 21 	lds	r24, 0x2108
			if(time_out > 33840000) {
				exit = 1;
			}
	
			// Check for a command character
			if (USART_RXBufferData_Available(&BT_data)) {
    19b4:	98 17       	cp	r25, r24
    19b6:	11 f4       	brne	.+4      	; 0x19bc <main+0x124>
    19b8:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__stack+0x34d>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    19bc:	e0 91 08 21 	lds	r30, 0x2108
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	eb 5f       	subi	r30, 0xFB	; 251
    19c4:	ff 4d       	sbci	r31, 0xDF	; 223
    19c6:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    19c8:	80 91 08 21 	lds	r24, 0x2108
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	80 93 08 21 	sts	0x2108, r24
			}
			else {
				choice = 0;
			}
			// If it exists, act on command
			if(choice != 0) {
    19d2:	99 23       	and	r25, r25
    19d4:	11 f4       	brne	.+4      	; 0x19da <main+0x142>
    19d6:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__stack+0x34d>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    19da:	80 91 b1 09 	lds	r24, 0x09B1
    19de:	85 ff       	sbrs	r24, 5
    19e0:	fc cf       	rjmp	.-8      	; 0x19da <main+0x142>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    19e2:	90 93 b0 09 	sts	0x09B0, r25
				time_out = 0;
				// Return the command so the host knows we got it
				uart_putchar(&BT_USART, choice);
				
				// Giant switch statement to decide what to do with the command
				switch(choice) {
    19e6:	93 35       	cpi	r25, 0x53	; 83
    19e8:	09 f4       	brne	.+2      	; 0x19ec <main+0x154>
    19ea:	5d c4       	rjmp	.+2234   	; 0x22a6 <main+0xa0e>
    19ec:	94 35       	cpi	r25, 0x54	; 84
    19ee:	c8 f5       	brcc	.+114    	; 0x1a62 <main+0x1ca>
    19f0:	99 34       	cpi	r25, 0x49	; 73
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <main+0x15e>
    19f4:	a7 c1       	rjmp	.+846    	; 0x1d44 <main+0x4ac>
    19f6:	9a 34       	cpi	r25, 0x4A	; 74
    19f8:	f8 f4       	brcc	.+62     	; 0x1a38 <main+0x1a0>
    19fa:	92 34       	cpi	r25, 0x42	; 66
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <main+0x168>
    19fe:	85 c0       	rjmp	.+266    	; 0x1b0a <main+0x272>
    1a00:	93 34       	cpi	r25, 0x43	; 67
    1a02:	90 f4       	brcc	.+36     	; 0x1a28 <main+0x190>
    1a04:	9e 33       	cpi	r25, 0x3E	; 62
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <main+0x172>
    1a08:	99 c5       	rjmp	.+2866   	; 0x253c <main+0xca4>
    1a0a:	9f 33       	cpi	r25, 0x3F	; 63
    1a0c:	40 f4       	brcc	.+16     	; 0x1a1e <main+0x186>
    1a0e:	91 32       	cpi	r25, 0x21	; 33
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <main+0x17c>
    1a12:	35 c4       	rjmp	.+2154   	; 0x227e <main+0x9e6>
    1a14:	9c 33       	cpi	r25, 0x3C	; 60
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <main+0x184>
    1a18:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a1c:	d6 c5       	rjmp	.+2988   	; 0x25ca <main+0xd32>
    1a1e:	91 34       	cpi	r25, 0x41	; 65
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <main+0x18e>
    1a22:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a26:	50 c0       	rjmp	.+160    	; 0x1ac8 <main+0x230>
    1a28:	93 34       	cpi	r25, 0x43	; 67
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <main+0x196>
    1a2c:	9f c7       	rjmp	.+3902   	; 0x296c <__stack+0x16d>
    1a2e:	97 34       	cpi	r25, 0x47	; 71
    1a30:	11 f0       	breq	.+4      	; 0x1a36 <main+0x19e>
    1a32:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a36:	ce c4       	rjmp	.+2460   	; 0x23d4 <main+0xb3c>
    1a38:	90 35       	cpi	r25, 0x50	; 80
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <main+0x1a6>
    1a3c:	f7 c5       	rjmp	.+3054   	; 0x262c <main+0xd94>
    1a3e:	91 35       	cpi	r25, 0x51	; 81
    1a40:	40 f4       	brcc	.+16     	; 0x1a52 <main+0x1ba>
    1a42:	9c 34       	cpi	r25, 0x4C	; 76
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <main+0x1b0>
    1a46:	bd c0       	rjmp	.+378    	; 0x1bc2 <main+0x32a>
    1a48:	9f 34       	cpi	r25, 0x4F	; 79
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <main+0x1b8>
    1a4c:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a50:	0f c1       	rjmp	.+542    	; 0x1c70 <main+0x3d8>
    1a52:	91 35       	cpi	r25, 0x51	; 81
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <main+0x1c0>
    1a56:	59 cf       	rjmp	.-334    	; 0x190a <main+0x72>
    1a58:	92 35       	cpi	r25, 0x52	; 82
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <main+0x1c8>
    1a5c:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a60:	1b c4       	rjmp	.+2102   	; 0x2298 <main+0xa00>
    1a62:	97 36       	cpi	r25, 0x67	; 103
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <main+0x1d0>
    1a66:	44 c5       	rjmp	.+2696   	; 0x24f0 <main+0xc58>
    1a68:	98 36       	cpi	r25, 0x68	; 104
    1a6a:	a8 f4       	brcc	.+42     	; 0x1a96 <main+0x1fe>
    1a6c:	98 35       	cpi	r25, 0x58	; 88
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <main+0x1da>
    1a70:	c2 c0       	rjmp	.+388    	; 0x1bf6 <main+0x35e>
    1a72:	99 35       	cpi	r25, 0x59	; 89
    1a74:	40 f4       	brcc	.+16     	; 0x1a86 <main+0x1ee>
    1a76:	94 35       	cpi	r25, 0x54	; 84
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <main+0x1e4>
    1a7a:	ac c0       	rjmp	.+344    	; 0x1bd4 <main+0x33c>
    1a7c:	96 35       	cpi	r25, 0x56	; 86
    1a7e:	11 f0       	breq	.+4      	; 0x1a84 <main+0x1ec>
    1a80:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a84:	af c0       	rjmp	.+350    	; 0x1be4 <main+0x34c>
    1a86:	92 36       	cpi	r25, 0x62	; 98
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <main+0x1f4>
    1a8a:	90 c0       	rjmp	.+288    	; 0x1bac <main+0x314>
    1a8c:	94 36       	cpi	r25, 0x64	; 100
    1a8e:	11 f0       	breq	.+4      	; 0x1a94 <main+0x1fc>
    1a90:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1a94:	ec c6       	rjmp	.+3544   	; 0x286e <__stack+0x6f>
    1a96:	92 37       	cpi	r25, 0x72	; 114
    1a98:	91 f0       	breq	.+36     	; 0x1abe <main+0x226>
    1a9a:	93 37       	cpi	r25, 0x73	; 115
    1a9c:	38 f4       	brcc	.+14     	; 0x1aac <main+0x214>
    1a9e:	99 36       	cpi	r25, 0x69	; 105
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <main+0x22a>
    1aa2:	90 37       	cpi	r25, 0x70	; 112
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <main+0x212>
    1aa6:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1aaa:	0a c6       	rjmp	.+3092   	; 0x26c0 <main+0xe28>
    1aac:	93 37       	cpi	r25, 0x73	; 115
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <main+0x21a>
    1ab0:	24 c4       	rjmp	.+2120   	; 0x22fa <main+0xa62>
    1ab2:	94 37       	cpi	r25, 0x74	; 116
    1ab4:	11 f0       	breq	.+4      	; 0x1aba <main+0x222>
    1ab6:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__stack+0x343>
    1aba:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__stack+0x2c9>
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	e2 c7       	rjmp	.+4036   	; 0x2a86 <__stack+0x287>
    1ac2:	00 e0       	ldi	r16, 0x00	; 0
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    1ac6:	78 c3       	rjmp	.+1776   	; 0x21b8 <main+0x920>
					// Return the currect accelerometer data - X, Y, Z, and status (contains tapped and shaken bits)
					case 'A':
						updateAccel();
    1ac8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <updateAccel>
						uart_putchar(&BT_USART, _acc.x);
    1acc:	90 91 09 21 	lds	r25, 0x2109
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ad0:	80 91 b1 09 	lds	r24, 0x09B1
    1ad4:	85 ff       	sbrs	r24, 5
    1ad6:	fc cf       	rjmp	.-8      	; 0x1ad0 <main+0x238>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ad8:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.y);
    1adc:	90 91 0a 21 	lds	r25, 0x210A
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ae0:	80 91 b1 09 	lds	r24, 0x09B1
    1ae4:	85 ff       	sbrs	r24, 5
    1ae6:	fc cf       	rjmp	.-8      	; 0x1ae0 <main+0x248>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ae8:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.z);
    1aec:	90 91 0b 21 	lds	r25, 0x210B
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1af0:	80 91 b1 09 	lds	r24, 0x09B1
    1af4:	85 ff       	sbrs	r24, 5
    1af6:	fc cf       	rjmp	.-8      	; 0x1af0 <main+0x258>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1af8:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, _acc.status);
    1afc:	90 91 0c 21 	lds	r25, 0x210C
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b00:	80 91 b1 09 	lds	r24, 0x09B1
    1b04:	85 ff       	sbrs	r24, 5
    1b06:	fc cf       	rjmp	.-8      	; 0x1b00 <main+0x268>
    1b08:	b0 c0       	rjmp	.+352    	; 0x1c6a <main+0x3d2>
						break;
					// Set the buzzer
					case 'B':
						temph = uart_getchar_timeout(&BT_USART);
    1b0a:	80 eb       	ldi	r24, 0xB0	; 176
    1b0c:	99 e0       	ldi	r25, 0x09	; 9
    1b0e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1b12:	8c 01       	movw	r16, r24
						// If temph is 256, it means we didn't get a follow up character and timed out, so respond with ERR
						if(temph == 256) {
    1b14:	31 e0       	ldi	r19, 0x01	; 1
    1b16:	80 30       	cpi	r24, 0x00	; 0
    1b18:	93 07       	cpc	r25, r19
    1b1a:	89 f4       	brne	.+34     	; 0x1b3e <main+0x2a6>
    1b1c:	80 91 b1 09 	lds	r24, 0x09B1
    1b20:	85 ff       	sbrs	r24, 5
    1b22:	fc cf       	rjmp	.-8      	; 0x1b1c <main+0x284>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b24:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b28:	80 91 b1 09 	lds	r24, 0x09B1
    1b2c:	85 ff       	sbrs	r24, 5
    1b2e:	fc cf       	rjmp	.-8      	; 0x1b28 <main+0x290>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b30:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b34:	80 91 b1 09 	lds	r24, 0x09B1
    1b38:	85 ff       	sbrs	r24, 5
    1b3a:	fc cf       	rjmp	.-8      	; 0x1b34 <main+0x29c>
    1b3c:	ec c7       	rjmp	.+4056   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b3e:	80 91 b1 09 	lds	r24, 0x09B1
    1b42:	85 ff       	sbrs	r24, 5
    1b44:	fc cf       	rjmp	.-8      	; 0x1b3e <main+0x2a6>
    1b46:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1b4a:	80 eb       	ldi	r24, 0xB0	; 176
    1b4c:	99 e0       	ldi	r25, 0x09	; 9
    1b4e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1b52:	9c 01       	movw	r18, r24
    1b54:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	80 30       	cpi	r24, 0x00	; 0
    1b5a:	94 07       	cpc	r25, r20
    1b5c:	89 f4       	brne	.+34     	; 0x1b80 <main+0x2e8>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b5e:	80 91 b1 09 	lds	r24, 0x09B1
    1b62:	85 ff       	sbrs	r24, 5
    1b64:	fc cf       	rjmp	.-8      	; 0x1b5e <main+0x2c6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b66:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b6a:	80 91 b1 09 	lds	r24, 0x09B1
    1b6e:	85 ff       	sbrs	r24, 5
    1b70:	fc cf       	rjmp	.-8      	; 0x1b6a <main+0x2d2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b72:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1b76:	80 91 b1 09 	lds	r24, 0x09B1
    1b7a:	85 ff       	sbrs	r24, 5
    1b7c:	fc cf       	rjmp	.-8      	; 0x1b76 <main+0x2de>
    1b7e:	cb c7       	rjmp	.+3990   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1b80:	80 91 b1 09 	lds	r24, 0x09B1
    1b84:	85 ff       	sbrs	r24, 5
    1b86:	fc cf       	rjmp	.-8      	; 0x1b80 <main+0x2e8>
    1b88:	20 93 b0 09 	sts	0x09B0, r18
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						frequency = ((temph)<<8) + templ;	
    1b8c:	90 2f       	mov	r25, r16
    1b8e:	88 27       	eor	r24, r24
    1b90:	28 0f       	add	r18, r24
    1b92:	39 1f       	adc	r19, r25
}

// Set buzzer enables the waveform and sets it to a given frequency
void set_buzzer(int frequency) {
	// Enable waveform output
	TCD1.CTRLB |= TC1_CCAEN_bm;
    1b94:	80 91 41 09 	lds	r24, 0x0941
    1b98:	80 61       	ori	r24, 0x10	; 16
    1b9a:	80 93 41 09 	sts	0x0941, r24
	// Set the frequency
	cli();
    1b9e:	f8 94       	cli
	TCD1.CCA = frequency;
    1ba0:	20 93 68 09 	sts	0x0968, r18
    1ba4:	30 93 69 09 	sts	0x0969, r19
	sei();
    1ba8:	78 94       	sei
    1baa:	cb c7       	rjmp	.+3990   	; 0x2b42 <__stack+0x343>
}

// Disables the buzzer, and if the output is on, turns it off
void turn_off_buzzer() {
	// Disable the Waveform output
	TCD1.CTRLB &= (~TC1_CCAEN_bm);
    1bac:	80 91 41 09 	lds	r24, 0x0941
    1bb0:	8f 7e       	andi	r24, 0xEF	; 239
    1bb2:	80 93 41 09 	sts	0x0941, r24
	// Turn off the pin just in case
	PORTD.OUTCLR |= PIN4_bm;
    1bb6:	80 91 66 06 	lds	r24, 0x0666
    1bba:	80 61       	ori	r24, 0x10	; 16
    1bbc:	80 93 66 06 	sts	0x0666, r24
    1bc0:	c0 c7       	rjmp	.+3968   	; 0x2b42 <__stack+0x343>
					case 'b':
						turn_off_buzzer();
						break;
					// Returns the value of the light sensor
					case 'L':
						sensor[0] = read_analog(LIGHT);
    1bc2:	80 e3       	ldi	r24, 0x30	; 48
    1bc4:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1bc8:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1bca:	80 91 b1 09 	lds	r24, 0x09B1
    1bce:	85 ff       	sbrs	r24, 5
    1bd0:	fc cf       	rjmp	.-8      	; 0x1bca <main+0x332>
    1bd2:	4b c0       	rjmp	.+150    	; 0x1c6a <main+0x3d2>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the Xmegas internal temperature read - this is undocumented because the value returned is very erratic
					case 'T':
						sensor[0] = read_internal_temperature();
    1bd4:	0e 94 9b 02 	call	0x536	; 0x536 <read_internal_temperature>
    1bd8:	98 2f       	mov	r25, r24
    1bda:	80 91 b1 09 	lds	r24, 0x09B1
    1bde:	85 ff       	sbrs	r24, 5
    1be0:	fc cf       	rjmp	.-8      	; 0x1bda <main+0x342>
    1be2:	43 c0       	rjmp	.+134    	; 0x1c6a <main+0x3d2>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the battery voltage
					case 'V':
						sensor[0] = read_analog(BATT_VOLT);
    1be4:	88 e3       	ldi	r24, 0x38	; 56
    1be6:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1bea:	98 2f       	mov	r25, r24
    1bec:	80 91 b1 09 	lds	r24, 0x09B1
    1bf0:	85 ff       	sbrs	r24, 5
    1bf2:	fc cf       	rjmp	.-8      	; 0x1bec <main+0x354>
    1bf4:	3a c0       	rjmp	.+116    	; 0x1c6a <main+0x3d2>
						uart_putchar(&BT_USART, sensor[0]);
						break;
					// Returns the readings on all six ADC ports
					case 'X':
						sensor[0] = read_analog(AUX0);
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	80 91 b1 09 	lds	r24, 0x09B1
    1c02:	85 ff       	sbrs	r24, 5
    1c04:	fc cf       	rjmp	.-8      	; 0x1bfe <main+0x366>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c06:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[0]);
						sensor[1] = read_analog(AUX1);
    1c0a:	88 e0       	ldi	r24, 0x08	; 8
    1c0c:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1c10:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c12:	80 91 b1 09 	lds	r24, 0x09B1
    1c16:	85 ff       	sbrs	r24, 5
    1c18:	fc cf       	rjmp	.-8      	; 0x1c12 <main+0x37a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c1a:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[1]);
						sensor[2] = read_analog(AUX2);
    1c1e:	80 e1       	ldi	r24, 0x10	; 16
    1c20:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1c24:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c26:	80 91 b1 09 	lds	r24, 0x09B1
    1c2a:	85 ff       	sbrs	r24, 5
    1c2c:	fc cf       	rjmp	.-8      	; 0x1c26 <main+0x38e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c2e:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[2]);
						sensor[3] = read_analog(AUX3);
    1c32:	88 e1       	ldi	r24, 0x18	; 24
    1c34:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1c38:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c3a:	80 91 b1 09 	lds	r24, 0x09B1
    1c3e:	85 ff       	sbrs	r24, 5
    1c40:	fc cf       	rjmp	.-8      	; 0x1c3a <main+0x3a2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c42:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[3]);
						sensor[4] = read_analog(AUX4);
    1c46:	80 e2       	ldi	r24, 0x20	; 32
    1c48:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1c4c:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c4e:	80 91 b1 09 	lds	r24, 0x09B1
    1c52:	85 ff       	sbrs	r24, 5
    1c54:	fc cf       	rjmp	.-8      	; 0x1c4e <main+0x3b6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c56:	90 93 b0 09 	sts	0x09B0, r25
						uart_putchar(&BT_USART, sensor[4]);
						sensor[5] = read_analog(AUX4);
    1c5a:	80 e2       	ldi	r24, 0x20	; 32
    1c5c:	0e 94 82 02 	call	0x504	; 0x504 <read_analog>
    1c60:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c62:	80 91 b1 09 	lds	r24, 0x09B1
    1c66:	85 ff       	sbrs	r24, 5
    1c68:	fc cf       	rjmp	.-8      	; 0x1c62 <main+0x3ca>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c6a:	90 93 b0 09 	sts	0x09B0, r25
    1c6e:	69 c7       	rjmp	.+3794   	; 0x2b42 <__stack+0x343>
						uart_putchar(&BT_USART, sensor[5]);
						break;
					// Sets the full-color LED
					case 'O':
						red = uart_getchar_timeout(&BT_USART);
    1c70:	80 eb       	ldi	r24, 0xB0	; 176
    1c72:	99 e0       	ldi	r25, 0x09	; 9
    1c74:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(red == 256) {
    1c78:	51 e0       	ldi	r21, 0x01	; 1
    1c7a:	80 30       	cpi	r24, 0x00	; 0
    1c7c:	95 07       	cpc	r25, r21
    1c7e:	89 f4       	brne	.+34     	; 0x1ca2 <main+0x40a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c80:	80 91 b1 09 	lds	r24, 0x09B1
    1c84:	85 ff       	sbrs	r24, 5
    1c86:	fc cf       	rjmp	.-8      	; 0x1c80 <main+0x3e8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c88:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c8c:	80 91 b1 09 	lds	r24, 0x09B1
    1c90:	85 ff       	sbrs	r24, 5
    1c92:	fc cf       	rjmp	.-8      	; 0x1c8c <main+0x3f4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1c94:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1c98:	80 91 b1 09 	lds	r24, 0x09B1
    1c9c:	85 ff       	sbrs	r24, 5
    1c9e:	fc cf       	rjmp	.-8      	; 0x1c98 <main+0x400>
    1ca0:	3a c7       	rjmp	.+3700   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, red);
    1ca2:	08 2f       	mov	r16, r24
    1ca4:	80 91 b1 09 	lds	r24, 0x09B1
    1ca8:	85 ff       	sbrs	r24, 5
    1caa:	fc cf       	rjmp	.-8      	; 0x1ca4 <main+0x40c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cac:	00 93 b0 09 	sts	0x09B0, r16
						}
						green = uart_getchar_timeout(&BT_USART);
    1cb0:	80 eb       	ldi	r24, 0xB0	; 176
    1cb2:	99 e0       	ldi	r25, 0x09	; 9
    1cb4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(green == 256) {
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	80 30       	cpi	r24, 0x00	; 0
    1cbc:	96 07       	cpc	r25, r22
    1cbe:	89 f4       	brne	.+34     	; 0x1ce2 <main+0x44a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cc0:	80 91 b1 09 	lds	r24, 0x09B1
    1cc4:	85 ff       	sbrs	r24, 5
    1cc6:	fc cf       	rjmp	.-8      	; 0x1cc0 <main+0x428>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cc8:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1ccc:	80 91 b1 09 	lds	r24, 0x09B1
    1cd0:	85 ff       	sbrs	r24, 5
    1cd2:	fc cf       	rjmp	.-8      	; 0x1ccc <main+0x434>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cd4:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1cd8:	80 91 b1 09 	lds	r24, 0x09B1
    1cdc:	85 ff       	sbrs	r24, 5
    1cde:	fc cf       	rjmp	.-8      	; 0x1cd8 <main+0x440>
    1ce0:	1a c7       	rjmp	.+3636   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, green);
    1ce2:	18 2f       	mov	r17, r24
    1ce4:	80 91 b1 09 	lds	r24, 0x09B1
    1ce8:	85 ff       	sbrs	r24, 5
    1cea:	fc cf       	rjmp	.-8      	; 0x1ce4 <main+0x44c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1cec:	10 93 b0 09 	sts	0x09B0, r17
						}
						blue = uart_getchar_timeout(&BT_USART);
    1cf0:	80 eb       	ldi	r24, 0xB0	; 176
    1cf2:	99 e0       	ldi	r25, 0x09	; 9
    1cf4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(blue == 256) {
    1cf8:	e1 e0       	ldi	r30, 0x01	; 1
    1cfa:	80 30       	cpi	r24, 0x00	; 0
    1cfc:	9e 07       	cpc	r25, r30
    1cfe:	89 f4       	brne	.+34     	; 0x1d22 <main+0x48a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d00:	80 91 b1 09 	lds	r24, 0x09B1
    1d04:	85 ff       	sbrs	r24, 5
    1d06:	fc cf       	rjmp	.-8      	; 0x1d00 <main+0x468>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d08:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d0c:	80 91 b1 09 	lds	r24, 0x09B1
    1d10:	85 ff       	sbrs	r24, 5
    1d12:	fc cf       	rjmp	.-8      	; 0x1d0c <main+0x474>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d14:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d18:	80 91 b1 09 	lds	r24, 0x09B1
    1d1c:	85 ff       	sbrs	r24, 5
    1d1e:	fc cf       	rjmp	.-8      	; 0x1d18 <main+0x480>
    1d20:	fa c6       	rjmp	.+3572   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, blue);
    1d22:	98 2f       	mov	r25, r24
    1d24:	80 91 b1 09 	lds	r24, 0x09B1
    1d28:	85 ff       	sbrs	r24, 5
    1d2a:	fc cf       	rjmp	.-8      	; 0x1d24 <main+0x48c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d2c:	90 93 b0 09 	sts	0x09B0, r25

// Update the capture compare registers with new led values
// Invert values since our LED is common anode
void set_led(int red, int green, int blue) {
	// Use just the high byte of the CC buffer, since we only desire 8 bit color
	TCD0.CCABUFH = 255-red;
    1d30:	00 95       	com	r16
    1d32:	00 93 39 09 	sts	0x0939, r16
	TCD0.CCBBUFH = 255-blue;
    1d36:	90 95       	com	r25
    1d38:	90 93 3b 09 	sts	0x093B, r25
	TCD0.CCCBUFH = 255-green;
    1d3c:	10 95       	com	r17
    1d3e:	10 93 3d 09 	sts	0x093D, r17
    1d42:	ff c6       	rjmp	.+3582   	; 0x2b42 <__stack+0x343>
						}
						set_led(red, green, blue);
						break;		
					// Sets up the IR transmitter with signal characteristics
					case 'I':
						temph = uart_getchar_timeout(&BT_USART);
    1d44:	80 eb       	ldi	r24, 0xB0	; 176
    1d46:	99 e0       	ldi	r25, 0x09	; 9
    1d48:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1d4c:	8c 01       	movw	r16, r24
    1d4e:	5c 01       	movw	r10, r24
						if(temph == 256) {
    1d50:	f1 e0       	ldi	r31, 0x01	; 1
    1d52:	80 30       	cpi	r24, 0x00	; 0
    1d54:	9f 07       	cpc	r25, r31
    1d56:	89 f4       	brne	.+34     	; 0x1d7a <main+0x4e2>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d58:	80 91 b1 09 	lds	r24, 0x09B1
    1d5c:	85 ff       	sbrs	r24, 5
    1d5e:	fc cf       	rjmp	.-8      	; 0x1d58 <main+0x4c0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d60:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d64:	80 91 b1 09 	lds	r24, 0x09B1
    1d68:	85 ff       	sbrs	r24, 5
    1d6a:	fc cf       	rjmp	.-8      	; 0x1d64 <main+0x4cc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d6c:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d70:	80 91 b1 09 	lds	r24, 0x09B1
    1d74:	85 ff       	sbrs	r24, 5
    1d76:	fc cf       	rjmp	.-8      	; 0x1d70 <main+0x4d8>
    1d78:	ce c6       	rjmp	.+3484   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1d7a:	80 91 b1 09 	lds	r24, 0x09B1
    1d7e:	85 ff       	sbrs	r24, 5
    1d80:	fc cf       	rjmp	.-8      	; 0x1d7a <main+0x4e2>
    1d82:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1d86:	80 eb       	ldi	r24, 0xB0	; 176
    1d88:	99 e0       	ldi	r25, 0x09	; 9
    1d8a:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1d8e:	9c 01       	movw	r18, r24
    1d90:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	80 30       	cpi	r24, 0x00	; 0
    1d96:	94 07       	cpc	r25, r20
    1d98:	89 f4       	brne	.+34     	; 0x1dbc <main+0x524>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1d9a:	80 91 b1 09 	lds	r24, 0x09B1
    1d9e:	85 ff       	sbrs	r24, 5
    1da0:	fc cf       	rjmp	.-8      	; 0x1d9a <main+0x502>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1da2:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1da6:	80 91 b1 09 	lds	r24, 0x09B1
    1daa:	85 ff       	sbrs	r24, 5
    1dac:	fc cf       	rjmp	.-8      	; 0x1da6 <main+0x50e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dae:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1db2:	80 91 b1 09 	lds	r24, 0x09B1
    1db6:	85 ff       	sbrs	r24, 5
    1db8:	fc cf       	rjmp	.-8      	; 0x1db2 <main+0x51a>
    1dba:	ad c6       	rjmp	.+3418   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dbc:	80 91 b1 09 	lds	r24, 0x09B1
    1dc0:	85 ff       	sbrs	r24, 5
    1dc2:	fc cf       	rjmp	.-8      	; 0x1dbc <main+0x524>
    1dc4:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set the frequency of the IR carrier
						robotData.frequency = ((temph)<<8) + templ;
    1dc8:	90 2f       	mov	r25, r16
    1dca:	88 27       	eor	r24, r24
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	80 93 1b 21 	sts	0x211B, r24
    1dd4:	90 93 1c 21 	sts	0x211C, r25
}

// Sets the frequency of the IR carrier
void set_ir_carrier(int frequency) {
	
	cli();
    1dd8:	f8 94       	cli
	TCC0.PERBUF = frequency;
    1dda:	80 93 36 08 	sts	0x0836, r24
    1dde:	90 93 37 08 	sts	0x0837, r25
	sei();
    1de2:	78 94       	sei
						set_ir_carrier(robotData.frequency);
						templ = uart_getchar_timeout(&BT_USART);
    1de4:	80 eb       	ldi	r24, 0xB0	; 176
    1de6:	99 e0       	ldi	r25, 0x09	; 9
    1de8:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1dec:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1dee:	51 e0       	ldi	r21, 0x01	; 1
    1df0:	80 30       	cpi	r24, 0x00	; 0
    1df2:	95 07       	cpc	r25, r21
    1df4:	89 f4       	brne	.+34     	; 0x1e18 <main+0x580>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1df6:	80 91 b1 09 	lds	r24, 0x09B1
    1dfa:	85 ff       	sbrs	r24, 5
    1dfc:	fc cf       	rjmp	.-8      	; 0x1df6 <main+0x55e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1dfe:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e02:	80 91 b1 09 	lds	r24, 0x09B1
    1e06:	85 ff       	sbrs	r24, 5
    1e08:	fc cf       	rjmp	.-8      	; 0x1e02 <main+0x56a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e0a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e0e:	80 91 b1 09 	lds	r24, 0x09B1
    1e12:	85 ff       	sbrs	r24, 5
    1e14:	fc cf       	rjmp	.-8      	; 0x1e0e <main+0x576>
    1e16:	7f c6       	rjmp	.+3326   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
						// Set the length of the start up pulses
							robotData.startUpPulseLength = templ;
    1e18:	98 2f       	mov	r25, r24
    1e1a:	c0 92 1d 21 	sts	0x211D, r12
    1e1e:	80 91 b1 09 	lds	r24, 0x09B1
    1e22:	85 ff       	sbrs	r24, 5
    1e24:	fc cf       	rjmp	.-8      	; 0x1e1e <main+0x586>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e26:	90 93 b0 09 	sts	0x09B0, r25
							uart_putchar(&BT_USART, robotData.startUpPulseLength);
						}
						if(robotData.startUpPulseLength > 16) {
    1e2a:	91 31       	cpi	r25, 0x11	; 17
    1e2c:	38 f4       	brcc	.+14     	; 0x1e3c <main+0x5a4>
    1e2e:	fe e1       	ldi	r31, 0x1E	; 30
    1e30:	6f 2e       	mov	r6, r31
    1e32:	f1 e2       	ldi	r31, 0x21	; 33
    1e34:	7f 2e       	mov	r7, r31
    1e36:	00 e0       	ldi	r16, 0x00	; 0
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	52 c0       	rjmp	.+164    	; 0x1ee0 <main+0x648>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e3c:	80 91 b1 09 	lds	r24, 0x09B1
    1e40:	85 ff       	sbrs	r24, 5
    1e42:	fc cf       	rjmp	.-8      	; 0x1e3c <main+0x5a4>
    1e44:	68 c6       	rjmp	.+3280   	; 0x2b16 <__stack+0x317>
							break;
						}
						
						// Read in the start up pulse timing data
						for(i=0; i < robotData.startUpPulseLength; i++) {
							temph = uart_getchar_timeout(&BT_USART);
    1e46:	80 eb       	ldi	r24, 0xB0	; 176
    1e48:	99 e0       	ldi	r25, 0x09	; 9
    1e4a:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1e4e:	f8 2e       	mov	r15, r24
    1e50:	5c 01       	movw	r10, r24
							if(temph == 256) {
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	a6 16       	cp	r10, r22
    1e56:	61 e0       	ldi	r22, 0x01	; 1
    1e58:	b6 06       	cpc	r11, r22
    1e5a:	89 f4       	brne	.+34     	; 0x1e7e <main+0x5e6>
    1e5c:	80 91 b1 09 	lds	r24, 0x09B1
    1e60:	85 ff       	sbrs	r24, 5
    1e62:	fc cf       	rjmp	.-8      	; 0x1e5c <main+0x5c4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e64:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e68:	80 91 b1 09 	lds	r24, 0x09B1
    1e6c:	85 ff       	sbrs	r24, 5
    1e6e:	fc cf       	rjmp	.-8      	; 0x1e68 <main+0x5d0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e70:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e74:	80 91 b1 09 	lds	r24, 0x09B1
    1e78:	85 ff       	sbrs	r24, 5
    1e7a:	fc cf       	rjmp	.-8      	; 0x1e74 <main+0x5dc>
    1e7c:	4c c6       	rjmp	.+3224   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1e7e:	80 91 b1 09 	lds	r24, 0x09B1
    1e82:	85 ff       	sbrs	r24, 5
    1e84:	fc cf       	rjmp	.-8      	; 0x1e7e <main+0x5e6>
    1e86:	f0 92 b0 09 	sts	0x09B0, r15
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    1e8a:	80 eb       	ldi	r24, 0xB0	; 176
    1e8c:	99 e0       	ldi	r25, 0x09	; 9
    1e8e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1e92:	9c 01       	movw	r18, r24
    1e94:	6c 01       	movw	r12, r24
							if(templ == 256) {
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	20 30       	cpi	r18, 0x00	; 0
    1e9a:	38 07       	cpc	r19, r24
    1e9c:	89 f4       	brne	.+34     	; 0x1ec0 <main+0x628>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1e9e:	80 91 b1 09 	lds	r24, 0x09B1
    1ea2:	85 ff       	sbrs	r24, 5
    1ea4:	fc cf       	rjmp	.-8      	; 0x1e9e <main+0x606>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ea6:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1eaa:	80 91 b1 09 	lds	r24, 0x09B1
    1eae:	85 ff       	sbrs	r24, 5
    1eb0:	fc cf       	rjmp	.-8      	; 0x1eaa <main+0x612>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1eb2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1eb6:	80 91 b1 09 	lds	r24, 0x09B1
    1eba:	85 ff       	sbrs	r24, 5
    1ebc:	fc cf       	rjmp	.-8      	; 0x1eb6 <main+0x61e>
    1ebe:	2b c6       	rjmp	.+3158   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1ec0:	80 91 b1 09 	lds	r24, 0x09B1
    1ec4:	85 ff       	sbrs	r24, 5
    1ec6:	fc cf       	rjmp	.-8      	; 0x1ec0 <main+0x628>
    1ec8:	20 93 b0 09 	sts	0x09B0, r18
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.startUpPulse[i] = ((temph)<<8) + templ;
    1ecc:	3f 2c       	mov	r3, r15
    1ece:	22 24       	eor	r2, r2
    1ed0:	22 0d       	add	r18, r2
    1ed2:	33 1d       	adc	r19, r3
    1ed4:	f3 01       	movw	r30, r6
    1ed6:	21 93       	st	Z+, r18
    1ed8:	31 93       	st	Z+, r19
    1eda:	3f 01       	movw	r6, r30
							uart_putchar(&BT_USART, 'R');
							break;
						}
						
						// Read in the start up pulse timing data
						for(i=0; i < robotData.startUpPulseLength; i++) {
    1edc:	0f 5f       	subi	r16, 0xFF	; 255
    1ede:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee0:	80 91 1d 21 	lds	r24, 0x211D
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	08 17       	cp	r16, r24
    1ee8:	19 07       	cpc	r17, r25
    1eea:	0c f4       	brge	.+2      	; 0x1eee <main+0x656>
    1eec:	ac cf       	rjmp	.-168    	; 0x1e46 <main+0x5ae>
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.startUpPulse[i] = ((temph)<<8) + templ;
						}
						if(temph == 256 || templ == 256) {
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	af 16       	cp	r10, r31
    1ef2:	f1 e0       	ldi	r31, 0x01	; 1
    1ef4:	bf 06       	cpc	r11, r31
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <main+0x662>
    1ef8:	24 c6       	rjmp	.+3144   	; 0x2b42 <__stack+0x343>
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	c2 16       	cp	r12, r18
    1efe:	21 e0       	ldi	r18, 0x01	; 1
    1f00:	d2 06       	cpc	r13, r18
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <main+0x66e>
    1f04:	1e c6       	rjmp	.+3132   	; 0x2b42 <__stack+0x343>
							break;
						}
						templ = uart_getchar_timeout(&BT_USART);
    1f06:	80 eb       	ldi	r24, 0xB0	; 176
    1f08:	99 e0       	ldi	r25, 0x09	; 9
    1f0a:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1f0e:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1f10:	31 e0       	ldi	r19, 0x01	; 1
    1f12:	80 30       	cpi	r24, 0x00	; 0
    1f14:	93 07       	cpc	r25, r19
    1f16:	89 f4       	brne	.+34     	; 0x1f3a <main+0x6a2>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f18:	80 91 b1 09 	lds	r24, 0x09B1
    1f1c:	85 ff       	sbrs	r24, 5
    1f1e:	fc cf       	rjmp	.-8      	; 0x1f18 <main+0x680>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f20:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f24:	80 91 b1 09 	lds	r24, 0x09B1
    1f28:	85 ff       	sbrs	r24, 5
    1f2a:	fc cf       	rjmp	.-8      	; 0x1f24 <main+0x68c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f2c:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f30:	80 91 b1 09 	lds	r24, 0x09B1
    1f34:	85 ff       	sbrs	r24, 5
    1f36:	fc cf       	rjmp	.-8      	; 0x1f30 <main+0x698>
    1f38:	ee c5       	rjmp	.+3036   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
						// Set the bit encoding to one of four pre-determined settings (see protocol instructions for more information)
							robotData.bitEncoding = templ;
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	c0 92 3e 21 	sts	0x213E, r12
    1f40:	80 91 b1 09 	lds	r24, 0x09B1
    1f44:	85 ff       	sbrs	r24, 5
    1f46:	fc cf       	rjmp	.-8      	; 0x1f40 <main+0x6a8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f48:	90 93 b0 09 	sts	0x09B0, r25
							uart_putchar(&BT_USART, robotData.bitEncoding);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1f4c:	80 eb       	ldi	r24, 0xB0	; 176
    1f4e:	99 e0       	ldi	r25, 0x09	; 9
    1f50:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1f54:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	80 30       	cpi	r24, 0x00	; 0
    1f5a:	94 07       	cpc	r25, r20
    1f5c:	89 f4       	brne	.+34     	; 0x1f80 <main+0x6e8>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f5e:	80 91 b1 09 	lds	r24, 0x09B1
    1f62:	85 ff       	sbrs	r24, 5
    1f64:	fc cf       	rjmp	.-8      	; 0x1f5e <main+0x6c6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f66:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f6a:	80 91 b1 09 	lds	r24, 0x09B1
    1f6e:	85 ff       	sbrs	r24, 5
    1f70:	fc cf       	rjmp	.-8      	; 0x1f6a <main+0x6d2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f72:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1f76:	80 91 b1 09 	lds	r24, 0x09B1
    1f7a:	85 ff       	sbrs	r24, 5
    1f7c:	fc cf       	rjmp	.-8      	; 0x1f76 <main+0x6de>
    1f7e:	cb c5       	rjmp	.+2966   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    1f80:	28 2f       	mov	r18, r24
    1f82:	80 91 b1 09 	lds	r24, 0x09B1
    1f86:	85 ff       	sbrs	r24, 5
    1f88:	fc cf       	rjmp	.-8      	; 0x1f82 <main+0x6ea>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1f8a:	20 93 b0 09 	sts	0x09B0, r18
						}
						// Set the number of bits (and bytes) contained in an IR command
						robotData.numBits = templ;
    1f8e:	20 93 3f 21 	sts	0x213F, r18
						robotData.numBytes = (robotData.numBits-1)/8 + 1;
    1f92:	82 2f       	mov	r24, r18
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	68 e0       	ldi	r22, 0x08	; 8
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
    1fa0:	6f 5f       	subi	r22, 0xFF	; 255
    1fa2:	60 93 40 21 	sts	0x2140, r22
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fa6:	80 91 b1 09 	lds	r24, 0x09B1
    1faa:	85 ff       	sbrs	r24, 5
    1fac:	fc cf       	rjmp	.-8      	; 0x1fa6 <main+0x70e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fae:	20 93 b0 09 	sts	0x09B0, r18
						uart_putchar(&BT_USART, robotData.numBits);
						temph = uart_getchar_timeout(&BT_USART);
    1fb2:	80 eb       	ldi	r24, 0xB0	; 176
    1fb4:	99 e0       	ldi	r25, 0x09	; 9
    1fb6:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1fba:	8c 01       	movw	r16, r24
						if(temph == 256) {
    1fbc:	51 e0       	ldi	r21, 0x01	; 1
    1fbe:	80 30       	cpi	r24, 0x00	; 0
    1fc0:	95 07       	cpc	r25, r21
    1fc2:	89 f4       	brne	.+34     	; 0x1fe6 <main+0x74e>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fc4:	80 91 b1 09 	lds	r24, 0x09B1
    1fc8:	85 ff       	sbrs	r24, 5
    1fca:	fc cf       	rjmp	.-8      	; 0x1fc4 <main+0x72c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fcc:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fd0:	80 91 b1 09 	lds	r24, 0x09B1
    1fd4:	85 ff       	sbrs	r24, 5
    1fd6:	fc cf       	rjmp	.-8      	; 0x1fd0 <main+0x738>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fd8:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    1fdc:	80 91 b1 09 	lds	r24, 0x09B1
    1fe0:	85 ff       	sbrs	r24, 5
    1fe2:	fc cf       	rjmp	.-8      	; 0x1fdc <main+0x744>
    1fe4:	98 c5       	rjmp	.+2864   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    1fe6:	80 91 b1 09 	lds	r24, 0x09B1
    1fea:	85 ff       	sbrs	r24, 5
    1fec:	fc cf       	rjmp	.-8      	; 0x1fe6 <main+0x74e>
    1fee:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    1ff2:	80 eb       	ldi	r24, 0xB0	; 176
    1ff4:	99 e0       	ldi	r25, 0x09	; 9
    1ff6:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    1ffa:	9c 01       	movw	r18, r24
    1ffc:	6c 01       	movw	r12, r24
						if(templ == 256) {
    1ffe:	61 e0       	ldi	r22, 0x01	; 1
    2000:	80 30       	cpi	r24, 0x00	; 0
    2002:	96 07       	cpc	r25, r22
    2004:	89 f4       	brne	.+34     	; 0x2028 <main+0x790>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2006:	80 91 b1 09 	lds	r24, 0x09B1
    200a:	85 ff       	sbrs	r24, 5
    200c:	fc cf       	rjmp	.-8      	; 0x2006 <main+0x76e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    200e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2012:	80 91 b1 09 	lds	r24, 0x09B1
    2016:	85 ff       	sbrs	r24, 5
    2018:	fc cf       	rjmp	.-8      	; 0x2012 <main+0x77a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    201a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    201e:	80 91 b1 09 	lds	r24, 0x09B1
    2022:	85 ff       	sbrs	r24, 5
    2024:	fc cf       	rjmp	.-8      	; 0x201e <main+0x786>
    2026:	77 c5       	rjmp	.+2798   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2028:	80 91 b1 09 	lds	r24, 0x09B1
    202c:	85 ff       	sbrs	r24, 5
    202e:	fc cf       	rjmp	.-8      	; 0x2028 <main+0x790>
    2030:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for a high bit
						robotData.highBitTime = ((temph)<<8) + templ;				
    2034:	90 2f       	mov	r25, r16
    2036:	88 27       	eor	r24, r24
    2038:	28 0f       	add	r18, r24
    203a:	39 1f       	adc	r19, r25
    203c:	20 93 41 21 	sts	0x2141, r18
    2040:	30 93 42 21 	sts	0x2142, r19
						temph = uart_getchar_timeout(&BT_USART);
    2044:	80 eb       	ldi	r24, 0xB0	; 176
    2046:	99 e0       	ldi	r25, 0x09	; 9
    2048:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    204c:	8c 01       	movw	r16, r24
						if(temph == 256) {
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	00 30       	cpi	r16, 0x00	; 0
    2052:	18 07       	cpc	r17, r24
    2054:	89 f4       	brne	.+34     	; 0x2078 <main+0x7e0>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2056:	80 91 b1 09 	lds	r24, 0x09B1
    205a:	85 ff       	sbrs	r24, 5
    205c:	fc cf       	rjmp	.-8      	; 0x2056 <main+0x7be>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    205e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2062:	80 91 b1 09 	lds	r24, 0x09B1
    2066:	85 ff       	sbrs	r24, 5
    2068:	fc cf       	rjmp	.-8      	; 0x2062 <main+0x7ca>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    206a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    206e:	80 91 b1 09 	lds	r24, 0x09B1
    2072:	85 ff       	sbrs	r24, 5
    2074:	fc cf       	rjmp	.-8      	; 0x206e <main+0x7d6>
    2076:	4f c5       	rjmp	.+2718   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2078:	80 91 b1 09 	lds	r24, 0x09B1
    207c:	85 ff       	sbrs	r24, 5
    207e:	fc cf       	rjmp	.-8      	; 0x2078 <main+0x7e0>
    2080:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2084:	80 eb       	ldi	r24, 0xB0	; 176
    2086:	99 e0       	ldi	r25, 0x09	; 9
    2088:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    208c:	9c 01       	movw	r18, r24
    208e:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	20 30       	cpi	r18, 0x00	; 0
    2094:	39 07       	cpc	r19, r25
    2096:	89 f4       	brne	.+34     	; 0x20ba <main+0x822>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2098:	80 91 b1 09 	lds	r24, 0x09B1
    209c:	85 ff       	sbrs	r24, 5
    209e:	fc cf       	rjmp	.-8      	; 0x2098 <main+0x800>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20a0:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20a4:	80 91 b1 09 	lds	r24, 0x09B1
    20a8:	85 ff       	sbrs	r24, 5
    20aa:	fc cf       	rjmp	.-8      	; 0x20a4 <main+0x80c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20ac:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20b0:	80 91 b1 09 	lds	r24, 0x09B1
    20b4:	85 ff       	sbrs	r24, 5
    20b6:	fc cf       	rjmp	.-8      	; 0x20b0 <main+0x818>
    20b8:	2e c5       	rjmp	.+2652   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20ba:	80 91 b1 09 	lds	r24, 0x09B1
    20be:	85 ff       	sbrs	r24, 5
    20c0:	fc cf       	rjmp	.-8      	; 0x20ba <main+0x822>
    20c2:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for a low bit
						robotData.lowBitTime = ((temph)<<8) + templ;				
    20c6:	90 2f       	mov	r25, r16
    20c8:	88 27       	eor	r24, r24
    20ca:	28 0f       	add	r18, r24
    20cc:	39 1f       	adc	r19, r25
    20ce:	20 93 43 21 	sts	0x2143, r18
    20d2:	30 93 44 21 	sts	0x2144, r19
						temph = uart_getchar_timeout(&BT_USART);
    20d6:	80 eb       	ldi	r24, 0xB0	; 176
    20d8:	99 e0       	ldi	r25, 0x09	; 9
    20da:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    20de:	8c 01       	movw	r16, r24
						if(temph == 256) {
    20e0:	e1 e0       	ldi	r30, 0x01	; 1
    20e2:	80 30       	cpi	r24, 0x00	; 0
    20e4:	9e 07       	cpc	r25, r30
    20e6:	89 f4       	brne	.+34     	; 0x210a <main+0x872>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20e8:	80 91 b1 09 	lds	r24, 0x09B1
    20ec:	85 ff       	sbrs	r24, 5
    20ee:	fc cf       	rjmp	.-8      	; 0x20e8 <main+0x850>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20f0:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    20f4:	80 91 b1 09 	lds	r24, 0x09B1
    20f8:	85 ff       	sbrs	r24, 5
    20fa:	fc cf       	rjmp	.-8      	; 0x20f4 <main+0x85c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    20fc:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2100:	80 91 b1 09 	lds	r24, 0x09B1
    2104:	85 ff       	sbrs	r24, 5
    2106:	fc cf       	rjmp	.-8      	; 0x2100 <main+0x868>
    2108:	06 c5       	rjmp	.+2572   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    210a:	80 91 b1 09 	lds	r24, 0x09B1
    210e:	85 ff       	sbrs	r24, 5
    2110:	fc cf       	rjmp	.-8      	; 0x210a <main+0x872>
    2112:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2116:	80 eb       	ldi	r24, 0xB0	; 176
    2118:	99 e0       	ldi	r25, 0x09	; 9
    211a:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    211e:	9c 01       	movw	r18, r24
    2120:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2122:	f1 e0       	ldi	r31, 0x01	; 1
    2124:	80 30       	cpi	r24, 0x00	; 0
    2126:	9f 07       	cpc	r25, r31
    2128:	89 f4       	brne	.+34     	; 0x214c <main+0x8b4>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    212a:	80 91 b1 09 	lds	r24, 0x09B1
    212e:	85 ff       	sbrs	r24, 5
    2130:	fc cf       	rjmp	.-8      	; 0x212a <main+0x892>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2132:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2136:	80 91 b1 09 	lds	r24, 0x09B1
    213a:	85 ff       	sbrs	r24, 5
    213c:	fc cf       	rjmp	.-8      	; 0x2136 <main+0x89e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    213e:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2142:	80 91 b1 09 	lds	r24, 0x09B1
    2146:	85 ff       	sbrs	r24, 5
    2148:	fc cf       	rjmp	.-8      	; 0x2142 <main+0x8aa>
    214a:	e5 c4       	rjmp	.+2506   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    214c:	80 91 b1 09 	lds	r24, 0x09B1
    2150:	85 ff       	sbrs	r24, 5
    2152:	fc cf       	rjmp	.-8      	; 0x214c <main+0x8b4>
    2154:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Set timing data for on or off
						robotData.offTime = ((temph)<<8) + templ;
    2158:	90 2f       	mov	r25, r16
    215a:	88 27       	eor	r24, r24
    215c:	28 0f       	add	r18, r24
    215e:	39 1f       	adc	r19, r25
    2160:	20 93 45 21 	sts	0x2145, r18
    2164:	30 93 46 21 	sts	0x2146, r19
    2168:	ec c4       	rjmp	.+2520   	; 0x2b42 <__stack+0x343>
						break;
					// Transmit an IR signal according to the previously determined configuration
					case 'i':
						// Get the signal data as one or more bytes
						for(i = 0; i < robotData.numBytes; i++) {
							templ = uart_getchar_timeout(&BT_USART);
    216a:	80 eb       	ldi	r24, 0xB0	; 176
    216c:	99 e0       	ldi	r25, 0x09	; 9
    216e:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2172:	6c 01       	movw	r12, r24
							if(templ == 256) {
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	80 30       	cpi	r24, 0x00	; 0
    2178:	92 07       	cpc	r25, r18
    217a:	89 f4       	brne	.+34     	; 0x219e <main+0x906>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    217c:	80 91 b1 09 	lds	r24, 0x09B1
    2180:	85 ff       	sbrs	r24, 5
    2182:	fc cf       	rjmp	.-8      	; 0x217c <main+0x8e4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2184:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2188:	80 91 b1 09 	lds	r24, 0x09B1
    218c:	85 ff       	sbrs	r24, 5
    218e:	fc cf       	rjmp	.-8      	; 0x2188 <main+0x8f0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2190:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2194:	80 91 b1 09 	lds	r24, 0x09B1
    2198:	85 ff       	sbrs	r24, 5
    219a:	fc cf       	rjmp	.-8      	; 0x2194 <main+0x8fc>
    219c:	bc c4       	rjmp	.+2424   	; 0x2b16 <__stack+0x317>
								uart_putchar(&BT_USART, 'R');
								uart_putchar(&BT_USART, 'R');
								break;
							}
							else {
								robotData.irBytes[i] = templ;
    219e:	98 2f       	mov	r25, r24
    21a0:	f8 01       	movw	r30, r16
    21a2:	e5 5e       	subi	r30, 0xE5	; 229
    21a4:	fe 4d       	sbci	r31, 0xDE	; 222
    21a6:	c4 a6       	std	Z+44, r12	; 0x2c
    21a8:	80 91 b1 09 	lds	r24, 0x09B1
    21ac:	85 ff       	sbrs	r24, 5
    21ae:	fc cf       	rjmp	.-8      	; 0x21a8 <main+0x910>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21b0:	90 93 b0 09 	sts	0x09B0, r25
						robotData.offTime = ((temph)<<8) + templ;
						break;
					// Transmit an IR signal according to the previously determined configuration
					case 'i':
						// Get the signal data as one or more bytes
						for(i = 0; i < robotData.numBytes; i++) {
    21b4:	0f 5f       	subi	r16, 0xFF	; 255
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255
    21b8:	80 91 40 21 	lds	r24, 0x2140
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	08 17       	cp	r16, r24
    21c0:	19 07       	cpc	r17, r25
    21c2:	9c f2       	brlt	.-90     	; 0x216a <main+0x8d2>
							else {
								robotData.irBytes[i] = templ;
								uart_putchar(&BT_USART, robotData.irBytes[i]);
							}
						}
						if(templ == 256) {
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	c3 16       	cp	r12, r19
    21c8:	31 e0       	ldi	r19, 0x01	; 1
    21ca:	d3 06       	cpc	r13, r19
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <main+0x938>
    21ce:	b9 c4       	rjmp	.+2418   	; 0x2b42 <__stack+0x343>
							break;
						}
						temph = uart_getchar_timeout(&BT_USART);
    21d0:	80 eb       	ldi	r24, 0xB0	; 176
    21d2:	99 e0       	ldi	r25, 0x09	; 9
    21d4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    21d8:	8c 01       	movw	r16, r24
						if(temph == 256) {
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	80 30       	cpi	r24, 0x00	; 0
    21de:	94 07       	cpc	r25, r20
    21e0:	89 f4       	brne	.+34     	; 0x2204 <main+0x96c>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21e2:	80 91 b1 09 	lds	r24, 0x09B1
    21e6:	85 ff       	sbrs	r24, 5
    21e8:	fc cf       	rjmp	.-8      	; 0x21e2 <main+0x94a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21ea:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21ee:	80 91 b1 09 	lds	r24, 0x09B1
    21f2:	85 ff       	sbrs	r24, 5
    21f4:	fc cf       	rjmp	.-8      	; 0x21ee <main+0x956>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    21f6:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    21fa:	80 91 b1 09 	lds	r24, 0x09B1
    21fe:	85 ff       	sbrs	r24, 5
    2200:	fc cf       	rjmp	.-8      	; 0x21fa <main+0x962>
    2202:	89 c4       	rjmp	.+2322   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2204:	80 91 b1 09 	lds	r24, 0x09B1
    2208:	85 ff       	sbrs	r24, 5
    220a:	fc cf       	rjmp	.-8      	; 0x2204 <main+0x96c>
    220c:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    2210:	80 eb       	ldi	r24, 0xB0	; 176
    2212:	99 e0       	ldi	r25, 0x09	; 9
    2214:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2218:	9c 01       	movw	r18, r24
    221a:	6c 01       	movw	r12, r24
						if(templ == 256) {
    221c:	51 e0       	ldi	r21, 0x01	; 1
    221e:	80 30       	cpi	r24, 0x00	; 0
    2220:	95 07       	cpc	r25, r21
    2222:	89 f4       	brne	.+34     	; 0x2246 <main+0x9ae>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2224:	80 91 b1 09 	lds	r24, 0x09B1
    2228:	85 ff       	sbrs	r24, 5
    222a:	fc cf       	rjmp	.-8      	; 0x2224 <main+0x98c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    222c:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2230:	80 91 b1 09 	lds	r24, 0x09B1
    2234:	85 ff       	sbrs	r24, 5
    2236:	fc cf       	rjmp	.-8      	; 0x2230 <main+0x998>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2238:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    223c:	80 91 b1 09 	lds	r24, 0x09B1
    2240:	85 ff       	sbrs	r24, 5
    2242:	fc cf       	rjmp	.-8      	; 0x223c <main+0x9a4>
    2244:	68 c4       	rjmp	.+2256   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2246:	80 91 b1 09 	lds	r24, 0x09B1
    224a:	85 ff       	sbrs	r24, 5
    224c:	fc cf       	rjmp	.-8      	; 0x2246 <main+0x9ae>
    224e:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Determine if the signal is repeated or not, and if so, with what frequency
						robotData.repeatTime = ((temph)<<8) + templ;
    2252:	90 2f       	mov	r25, r16
    2254:	88 27       	eor	r24, r24
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	80 93 07 22 	sts	0x2207, r24
    225e:	90 93 08 22 	sts	0x2208, r25
						if(robotData.repeatTime != 0) {
    2262:	89 2b       	or	r24, r25
    2264:	39 f0       	breq	.+14     	; 0x2274 <main+0x9dc>
							robotData.repeatFlag = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	80 93 09 22 	sts	0x2209, r24
    226e:	90 93 0a 22 	sts	0x220A, r25
    2272:	2a c1       	rjmp	.+596    	; 0x24c8 <main+0xc30>
						}
						else {
							robotData.repeatFlag = 0;
    2274:	10 92 09 22 	sts	0x2209, r1
    2278:	10 92 0a 22 	sts	0x220A, r1
    227c:	25 c1       	rjmp	.+586    	; 0x24c8 <main+0xc30>
						// Startup timer interrupts
						start_ir_timer();
						break;
					// Turn off any repeating IR signal
					case '!':
						robotData.repeatFlag = 0;
    227e:	10 92 09 22 	sts	0x2209, r1
    2282:	10 92 0a 22 	sts	0x220A, r1
	PMIC.CTRL |= PMIC_HILVLEN_bm;
}

// Stops the timer by turning off the interrupt
void stop_ir_timer() {
	TCC1.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    2286:	10 92 46 08 	sts	0x0846, r1
	sei();
}

// Turn the IR LED off
void set_ir0() {
	cli();
    228a:	f8 94       	cli
	TCC0.CCA = 0x0000;
    228c:	10 92 28 08 	sts	0x0828, r1
    2290:	10 92 29 08 	sts	0x0829, r1
	sei();
    2294:	78 94       	sei
    2296:	55 c4       	rjmp	.+2218   	; 0x2b42 <__stack+0x343>
						stop_ir_timer();
						break;
					// Capture a signal from the IR receiver
					case 'R':
						init_ir_read();
    2298:	0e 94 8a 08 	call	0x1114	; 0x1114 <init_ir_read>
						while(ir_read_flag!=0);
    229c:	80 91 04 20 	lds	r24, 0x2004
    22a0:	88 23       	and	r24, r24
    22a2:	e1 f7       	brne	.-8      	; 0x229c <main+0xa04>
    22a4:	4e c4       	rjmp	.+2204   	; 0x2b42 <__stack+0x343>
						break;
					// Store the captured signal in an EEPROM location	
					case 'S':
						location = uart_getchar_timeout(&BT_USART)-48; // Subtracing 48 converts from ASCII to numeric numbers
    22a6:	80 eb       	ldi	r24, 0xB0	; 176
    22a8:	99 e0       	ldi	r25, 0x09	; 9
    22aa:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    22ae:	98 2f       	mov	r25, r24
    22b0:	90 53       	subi	r25, 0x30	; 48
						if((location >= 0) && (location < 5) && (signal_count > 4)) {
    22b2:	95 30       	cpi	r25, 0x05	; 5
    22b4:	88 f4       	brcc	.+34     	; 0x22d8 <main+0xa40>
    22b6:	80 91 02 20 	lds	r24, 0x2002
    22ba:	85 30       	cpi	r24, 0x05	; 5
    22bc:	68 f0       	brcs	.+26     	; 0x22d8 <main+0xa40>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22be:	80 91 b1 09 	lds	r24, 0x09B1
    22c2:	85 ff       	sbrs	r24, 5
    22c4:	fc cf       	rjmp	.-8      	; 0x22be <main+0xa26>
							uart_putchar(&BT_USART, location+48);
    22c6:	90 5d       	subi	r25, 0xD0	; 208
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22c8:	90 93 b0 09 	sts	0x09B0, r25
    22cc:	90 53       	subi	r25, 0x30	; 48
							write_data_to_eeprom(location);
    22ce:	89 2f       	mov	r24, r25
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 36 0b 	call	0x166c	; 0x166c <write_data_to_eeprom>
    22d6:	35 c4       	rjmp	.+2154   	; 0x2b42 <__stack+0x343>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22d8:	80 91 b1 09 	lds	r24, 0x09B1
    22dc:	85 ff       	sbrs	r24, 5
    22de:	fc cf       	rjmp	.-8      	; 0x22d8 <main+0xa40>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22e0:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22e4:	80 91 b1 09 	lds	r24, 0x09B1
    22e8:	85 ff       	sbrs	r24, 5
    22ea:	fc cf       	rjmp	.-8      	; 0x22e4 <main+0xa4c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    22ec:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    22f0:	80 91 b1 09 	lds	r24, 0x09B1
    22f4:	85 ff       	sbrs	r24, 5
    22f6:	fc cf       	rjmp	.-8      	; 0x22f0 <main+0xa58>
    22f8:	0e c4       	rjmp	.+2076   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
						}
						break;
					// Receive a raw IR signal over bluetooth and transmit it with the IR LED
					case 's':
						if(read_data_from_serial()) {
    22fa:	0e 94 9f 09 	call	0x133e	; 0x133e <read_data_from_serial>
    22fe:	89 2b       	or	r24, r25
    2300:	09 f4       	brne	.+2      	; 0x2304 <main+0xa6c>
    2302:	57 c0       	rjmp	.+174    	; 0x23b2 <main+0xb1a>
							temph = uart_getchar_timeout(&BT_USART);
    2304:	80 eb       	ldi	r24, 0xB0	; 176
    2306:	99 e0       	ldi	r25, 0x09	; 9
    2308:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    230c:	8c 01       	movw	r16, r24
							if(temph == 256) {
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	00 30       	cpi	r16, 0x00	; 0
    2312:	19 07       	cpc	r17, r25
    2314:	89 f4       	brne	.+34     	; 0x2338 <main+0xaa0>
    2316:	80 91 b1 09 	lds	r24, 0x09B1
    231a:	85 ff       	sbrs	r24, 5
    231c:	fc cf       	rjmp	.-8      	; 0x2316 <main+0xa7e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    231e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2322:	80 91 b1 09 	lds	r24, 0x09B1
    2326:	85 ff       	sbrs	r24, 5
    2328:	fc cf       	rjmp	.-8      	; 0x2322 <main+0xa8a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    232a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    232e:	80 91 b1 09 	lds	r24, 0x09B1
    2332:	85 ff       	sbrs	r24, 5
    2334:	fc cf       	rjmp	.-8      	; 0x232e <main+0xa96>
    2336:	ef c3       	rjmp	.+2014   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2338:	80 91 b1 09 	lds	r24, 0x09B1
    233c:	85 ff       	sbrs	r24, 5
    233e:	fc cf       	rjmp	.-8      	; 0x2338 <main+0xaa0>
    2340:	00 93 b0 09 	sts	0x09B0, r16
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    2344:	80 eb       	ldi	r24, 0xB0	; 176
    2346:	99 e0       	ldi	r25, 0x09	; 9
    2348:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    234c:	9c 01       	movw	r18, r24
    234e:	6c 01       	movw	r12, r24
							if(templ == 256) {
    2350:	e1 e0       	ldi	r30, 0x01	; 1
    2352:	80 30       	cpi	r24, 0x00	; 0
    2354:	9e 07       	cpc	r25, r30
    2356:	89 f4       	brne	.+34     	; 0x237a <main+0xae2>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2358:	80 91 b1 09 	lds	r24, 0x09B1
    235c:	85 ff       	sbrs	r24, 5
    235e:	fc cf       	rjmp	.-8      	; 0x2358 <main+0xac0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2360:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2364:	80 91 b1 09 	lds	r24, 0x09B1
    2368:	85 ff       	sbrs	r24, 5
    236a:	fc cf       	rjmp	.-8      	; 0x2364 <main+0xacc>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    236c:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2370:	80 91 b1 09 	lds	r24, 0x09B1
    2374:	85 ff       	sbrs	r24, 5
    2376:	fc cf       	rjmp	.-8      	; 0x2370 <main+0xad8>
    2378:	ce c3       	rjmp	.+1948   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    237a:	80 91 b1 09 	lds	r24, 0x09B1
    237e:	85 ff       	sbrs	r24, 5
    2380:	fc cf       	rjmp	.-8      	; 0x237a <main+0xae2>
    2382:	20 93 b0 09 	sts	0x09B0, r18
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							// Set if the signal should repeat and if so, with what frequency
							robotData.repeatTime = ((temph)<<8) + templ;
    2386:	90 2f       	mov	r25, r16
    2388:	88 27       	eor	r24, r24
    238a:	82 0f       	add	r24, r18
    238c:	93 1f       	adc	r25, r19
    238e:	80 93 07 22 	sts	0x2207, r24
    2392:	90 93 08 22 	sts	0x2208, r25
							if(robotData.repeatTime != 0) {
    2396:	89 2b       	or	r24, r25
    2398:	39 f0       	breq	.+14     	; 0x23a8 <main+0xb10>
								robotData.repeatFlag = 1;
    239a:	21 e0       	ldi	r18, 0x01	; 1
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	20 93 09 22 	sts	0x2209, r18
    23a2:	30 93 0a 22 	sts	0x220A, r19
    23a6:	85 c0       	rjmp	.+266    	; 0x24b2 <main+0xc1a>
							}
							else {
								robotData.repeatFlag = 0;
    23a8:	10 92 09 22 	sts	0x2209, r1
    23ac:	10 92 0a 22 	sts	0x220A, r1
    23b0:	80 c0       	rjmp	.+256    	; 0x24b2 <main+0xc1a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23b2:	80 91 b1 09 	lds	r24, 0x09B1
    23b6:	85 ff       	sbrs	r24, 5
    23b8:	fc cf       	rjmp	.-8      	; 0x23b2 <main+0xb1a>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23ba:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23be:	80 91 b1 09 	lds	r24, 0x09B1
    23c2:	85 ff       	sbrs	r24, 5
    23c4:	fc cf       	rjmp	.-8      	; 0x23be <main+0xb26>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23c6:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    23ca:	80 91 b1 09 	lds	r24, 0x09B1
    23ce:	85 ff       	sbrs	r24, 5
    23d0:	fc cf       	rjmp	.-8      	; 0x23ca <main+0xb32>
    23d2:	a1 c3       	rjmp	.+1858   	; 0x2b16 <__stack+0x317>
								break;
						}
						break;
					// Get a stored signal from an EEPROM location and transmit it over the IR LED (and repeat as desired)
					case 'G':
						location = uart_getchar_timeout(&BT_USART)-48;
    23d4:	80 eb       	ldi	r24, 0xB0	; 176
    23d6:	99 e0       	ldi	r25, 0x09	; 9
    23d8:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    23dc:	20 ed       	ldi	r18, 0xD0	; 208
    23de:	f2 2e       	mov	r15, r18
    23e0:	f8 0e       	add	r15, r24
						if(location >= 0 && location < 5) {
    23e2:	64 e0       	ldi	r22, 0x04	; 4
    23e4:	6f 15       	cp	r22, r15
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <main+0xb52>
    23e8:	72 c0       	rjmp	.+228    	; 0x24ce <main+0xc36>
    23ea:	80 91 b1 09 	lds	r24, 0x09B1
    23ee:	85 ff       	sbrs	r24, 5
    23f0:	fc cf       	rjmp	.-8      	; 0x23ea <main+0xb52>
							uart_putchar(&BT_USART, location+48);
    23f2:	80 e3       	ldi	r24, 0x30	; 48
    23f4:	f8 0e       	add	r15, r24
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    23f6:	f0 92 b0 09 	sts	0x09B0, r15
    23fa:	90 ed       	ldi	r25, 0xD0	; 208
    23fc:	f9 0e       	add	r15, r25
							temph = uart_getchar_timeout(&BT_USART);
    23fe:	80 eb       	ldi	r24, 0xB0	; 176
    2400:	99 e0       	ldi	r25, 0x09	; 9
    2402:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2406:	8c 01       	movw	r16, r24
							if(temph == 256) {
    2408:	e1 e0       	ldi	r30, 0x01	; 1
    240a:	80 30       	cpi	r24, 0x00	; 0
    240c:	9e 07       	cpc	r25, r30
    240e:	89 f4       	brne	.+34     	; 0x2432 <main+0xb9a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2410:	80 91 b1 09 	lds	r24, 0x09B1
    2414:	85 ff       	sbrs	r24, 5
    2416:	fc cf       	rjmp	.-8      	; 0x2410 <main+0xb78>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2418:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    241c:	80 91 b1 09 	lds	r24, 0x09B1
    2420:	85 ff       	sbrs	r24, 5
    2422:	fc cf       	rjmp	.-8      	; 0x241c <main+0xb84>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2424:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2428:	80 91 b1 09 	lds	r24, 0x09B1
    242c:	85 ff       	sbrs	r24, 5
    242e:	fc cf       	rjmp	.-8      	; 0x2428 <main+0xb90>
    2430:	72 c3       	rjmp	.+1764   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2432:	80 91 b1 09 	lds	r24, 0x09B1
    2436:	85 ff       	sbrs	r24, 5
    2438:	fc cf       	rjmp	.-8      	; 0x2432 <main+0xb9a>
    243a:	00 93 b0 09 	sts	0x09B0, r16
								break;
							}
							else {
								uart_putchar(&BT_USART, temph);
							}
							templ = uart_getchar_timeout(&BT_USART);
    243e:	80 eb       	ldi	r24, 0xB0	; 176
    2440:	99 e0       	ldi	r25, 0x09	; 9
    2442:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2446:	9c 01       	movw	r18, r24
    2448:	6c 01       	movw	r12, r24
							if(templ == 256) {
    244a:	f1 e0       	ldi	r31, 0x01	; 1
    244c:	80 30       	cpi	r24, 0x00	; 0
    244e:	9f 07       	cpc	r25, r31
    2450:	89 f4       	brne	.+34     	; 0x2474 <main+0xbdc>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2452:	80 91 b1 09 	lds	r24, 0x09B1
    2456:	85 ff       	sbrs	r24, 5
    2458:	fc cf       	rjmp	.-8      	; 0x2452 <main+0xbba>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    245a:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    245e:	80 91 b1 09 	lds	r24, 0x09B1
    2462:	85 ff       	sbrs	r24, 5
    2464:	fc cf       	rjmp	.-8      	; 0x245e <main+0xbc6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2466:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    246a:	80 91 b1 09 	lds	r24, 0x09B1
    246e:	85 ff       	sbrs	r24, 5
    2470:	fc cf       	rjmp	.-8      	; 0x246a <main+0xbd2>
    2472:	51 c3       	rjmp	.+1698   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2474:	80 91 b1 09 	lds	r24, 0x09B1
    2478:	85 ff       	sbrs	r24, 5
    247a:	fc cf       	rjmp	.-8      	; 0x2474 <main+0xbdc>
    247c:	20 93 b0 09 	sts	0x09B0, r18
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
							}
							robotData.repeatTime = ((temph)<<8) + templ;
    2480:	90 2f       	mov	r25, r16
    2482:	88 27       	eor	r24, r24
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	80 93 07 22 	sts	0x2207, r24
    248c:	90 93 08 22 	sts	0x2208, r25
							if(robotData.repeatTime != 0) {
    2490:	89 2b       	or	r24, r25
    2492:	39 f0       	breq	.+14     	; 0x24a2 <main+0xc0a>
								robotData.repeatFlag = 1;
    2494:	21 e0       	ldi	r18, 0x01	; 1
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	20 93 09 22 	sts	0x2209, r18
    249c:	30 93 0a 22 	sts	0x220A, r19
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <main+0xc12>
							}
							else {
								robotData.repeatFlag = 0;
    24a2:	10 92 09 22 	sts	0x2209, r1
    24a6:	10 92 0a 22 	sts	0x220A, r1
							}
							read_data_from_eeprom(location);
    24aa:	8f 2d       	mov	r24, r15
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <read_data_from_eeprom>
							robotData.frequency = 0x0349;
    24b2:	49 e4       	ldi	r20, 0x49	; 73
    24b4:	53 e0       	ldi	r21, 0x03	; 3
    24b6:	40 93 1b 21 	sts	0x211B, r20
    24ba:	50 93 1c 21 	sts	0x211C, r21
							robotData.startUpPulseLength = 0;
    24be:	10 92 1d 21 	sts	0x211D, r1
							robotData.bitEncoding = 0x04;
    24c2:	54 e0       	ldi	r21, 0x04	; 4
    24c4:	50 93 3e 21 	sts	0x213E, r21
							start_ir_timer();
    24c8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <start_ir_timer>
    24cc:	3a c3       	rjmp	.+1652   	; 0x2b42 <__stack+0x343>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24ce:	80 91 b1 09 	lds	r24, 0x09B1
    24d2:	85 ff       	sbrs	r24, 5
    24d4:	fc cf       	rjmp	.-8      	; 0x24ce <main+0xc36>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24d6:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24da:	80 91 b1 09 	lds	r24, 0x09B1
    24de:	85 ff       	sbrs	r24, 5
    24e0:	fc cf       	rjmp	.-8      	; 0x24da <main+0xc42>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    24e2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    24e6:	80 91 b1 09 	lds	r24, 0x09B1
    24ea:	85 ff       	sbrs	r24, 5
    24ec:	fc cf       	rjmp	.-8      	; 0x24e6 <main+0xc4e>
    24ee:	13 c3       	rjmp	.+1574   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
						}
						break;	
					// Get a stored signal from EEPROM and print it over bluetooth to the host
					case 'g':
						location = uart_getchar_timeout(&BT_USART)-48;
    24f0:	80 eb       	ldi	r24, 0xB0	; 176
    24f2:	99 e0       	ldi	r25, 0x09	; 9
    24f4:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    24f8:	98 2f       	mov	r25, r24
    24fa:	90 53       	subi	r25, 0x30	; 48
						if(location >= 0 && location < 5) {
    24fc:	95 30       	cpi	r25, 0x05	; 5
    24fe:	68 f4       	brcc	.+26     	; 0x251a <main+0xc82>
    2500:	80 91 b1 09 	lds	r24, 0x09B1
    2504:	85 ff       	sbrs	r24, 5
    2506:	fc cf       	rjmp	.-8      	; 0x2500 <main+0xc68>
							uart_putchar(&BT_USART, location+48);
    2508:	90 5d       	subi	r25, 0xD0	; 208
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    250a:	90 93 b0 09 	sts	0x09B0, r25
    250e:	90 53       	subi	r25, 0x30	; 48
							print_data_from_eeprom(location);
    2510:	89 2f       	mov	r24, r25
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 0a 0a 	call	0x1414	; 0x1414 <print_data_from_eeprom>
    2518:	14 c3       	rjmp	.+1576   	; 0x2b42 <__stack+0x343>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    251a:	80 91 b1 09 	lds	r24, 0x09B1
    251e:	85 ff       	sbrs	r24, 5
    2520:	fc cf       	rjmp	.-8      	; 0x251a <main+0xc82>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2522:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2526:	80 91 b1 09 	lds	r24, 0x09B1
    252a:	85 ff       	sbrs	r24, 5
    252c:	fc cf       	rjmp	.-8      	; 0x2526 <main+0xc8e>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    252e:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2532:	80 91 b1 09 	lds	r24, 0x09B1
    2536:	85 ff       	sbrs	r24, 5
    2538:	fc cf       	rjmp	.-8      	; 0x2532 <main+0xc9a>
    253a:	ed c2       	rjmp	.+1498   	; 0x2b16 <__stack+0x317>
						}
						break;	
						// Output on digital I/O
					case '>':
						// Set port
						temph = uart_getchar_timeout(&BT_USART);
    253c:	80 eb       	ldi	r24, 0xB0	; 176
    253e:	99 e0       	ldi	r25, 0x09	; 9
    2540:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
						if(temph == 256) {
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	80 30       	cpi	r24, 0x00	; 0
    2548:	96 07       	cpc	r25, r22
    254a:	89 f4       	brne	.+34     	; 0x256e <main+0xcd6>
    254c:	80 91 b1 09 	lds	r24, 0x09B1
    2550:	85 ff       	sbrs	r24, 5
    2552:	fc cf       	rjmp	.-8      	; 0x254c <main+0xcb4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2554:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2558:	80 91 b1 09 	lds	r24, 0x09B1
    255c:	85 ff       	sbrs	r24, 5
    255e:	fc cf       	rjmp	.-8      	; 0x2558 <main+0xcc0>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2560:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2564:	80 91 b1 09 	lds	r24, 0x09B1
    2568:	85 ff       	sbrs	r24, 5
    256a:	fc cf       	rjmp	.-8      	; 0x2564 <main+0xccc>
    256c:	d4 c2       	rjmp	.+1448   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
    256e:	18 2f       	mov	r17, r24
    2570:	80 91 b1 09 	lds	r24, 0x09B1
    2574:	85 ff       	sbrs	r24, 5
    2576:	fc cf       	rjmp	.-8      	; 0x2570 <main+0xcd8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2578:	10 93 b0 09 	sts	0x09B0, r17
						}
						// Get value
						templ = uart_getchar_timeout(&BT_USART);
    257c:	80 eb       	ldi	r24, 0xB0	; 176
    257e:	99 e0       	ldi	r25, 0x09	; 9
    2580:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2584:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	c8 16       	cp	r12, r24
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	d8 06       	cpc	r13, r24
    258e:	89 f4       	brne	.+34     	; 0x25b2 <main+0xd1a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2590:	80 91 b1 09 	lds	r24, 0x09B1
    2594:	85 ff       	sbrs	r24, 5
    2596:	fc cf       	rjmp	.-8      	; 0x2590 <main+0xcf8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2598:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    259c:	80 91 b1 09 	lds	r24, 0x09B1
    25a0:	85 ff       	sbrs	r24, 5
    25a2:	fc cf       	rjmp	.-8      	; 0x259c <main+0xd04>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25a4:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25a8:	80 91 b1 09 	lds	r24, 0x09B1
    25ac:	85 ff       	sbrs	r24, 5
    25ae:	fc cf       	rjmp	.-8      	; 0x25a8 <main+0xd10>
    25b0:	b2 c2       	rjmp	.+1380   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    25b2:	6c 2d       	mov	r22, r12
    25b4:	80 91 b1 09 	lds	r24, 0x09B1
    25b8:	85 ff       	sbrs	r24, 5
    25ba:	fc cf       	rjmp	.-8      	; 0x25b4 <main+0xd1c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25bc:	60 93 b0 09 	sts	0x09B0, r22
						}
						set_output(temph, (templ-48));
    25c0:	60 53       	subi	r22, 0x30	; 48
    25c2:	81 2f       	mov	r24, r17
    25c4:	0e 94 77 07 	call	0xeee	; 0xeee <set_output>
    25c8:	bc c2       	rjmp	.+1400   	; 0x2b42 <__stack+0x343>
						break;
						// Input on digital I/O
					case '<':
						// Get port
						temph = uart_getchar_timeout(&BT_USART);
    25ca:	80 eb       	ldi	r24, 0xB0	; 176
    25cc:	99 e0       	ldi	r25, 0x09	; 9
    25ce:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    25d2:	9c 01       	movw	r18, r24
						if(temph == 256) {
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	20 30       	cpi	r18, 0x00	; 0
    25d8:	39 07       	cpc	r19, r25
    25da:	89 f4       	brne	.+34     	; 0x25fe <main+0xd66>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25dc:	80 91 b1 09 	lds	r24, 0x09B1
    25e0:	85 ff       	sbrs	r24, 5
    25e2:	fc cf       	rjmp	.-8      	; 0x25dc <main+0xd44>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25e4:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25e8:	80 91 b1 09 	lds	r24, 0x09B1
    25ec:	85 ff       	sbrs	r24, 5
    25ee:	fc cf       	rjmp	.-8      	; 0x25e8 <main+0xd50>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    25f0:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    25f4:	80 91 b1 09 	lds	r24, 0x09B1
    25f8:	85 ff       	sbrs	r24, 5
    25fa:	fc cf       	rjmp	.-8      	; 0x25f4 <main+0xd5c>
    25fc:	8c c2       	rjmp	.+1304   	; 0x2b16 <__stack+0x317>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
    25fe:	92 2f       	mov	r25, r18
    2600:	80 91 b1 09 	lds	r24, 0x09B1
    2604:	85 ff       	sbrs	r24, 5
    2606:	fc cf       	rjmp	.-8      	; 0x2600 <main+0xd68>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2608:	90 93 b0 09 	sts	0x09B0, r25
						}
						// Get value (1 or 0)
						templ = read_input(temph)+48;
    260c:	89 2f       	mov	r24, r25
    260e:	0e 94 de 07 	call	0xfbc	; 0xfbc <read_input>
    2612:	c8 2e       	mov	r12, r24
    2614:	dd 24       	eor	r13, r13
    2616:	e0 e3       	ldi	r30, 0x30	; 48
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	ce 0e       	add	r12, r30
    261c:	df 1e       	adc	r13, r31
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    261e:	80 91 b1 09 	lds	r24, 0x09B1
    2622:	85 ff       	sbrs	r24, 5
    2624:	fc cf       	rjmp	.-8      	; 0x261e <main+0xd86>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2626:	c0 92 b0 09 	sts	0x09B0, r12
    262a:	8b c2       	rjmp	.+1302   	; 0x2b42 <__stack+0x343>
						uart_putchar(&BT_USART, templ);
						break;
					// Configure PWM frequency
					case 'P':
						temph = uart_getchar_timeout(&BT_USART);
    262c:	80 eb       	ldi	r24, 0xB0	; 176
    262e:	99 e0       	ldi	r25, 0x09	; 9
    2630:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2634:	8c 01       	movw	r16, r24
						if(temph == 256) {
    2636:	f1 e0       	ldi	r31, 0x01	; 1
    2638:	80 30       	cpi	r24, 0x00	; 0
    263a:	9f 07       	cpc	r25, r31
    263c:	89 f4       	brne	.+34     	; 0x2660 <main+0xdc8>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    263e:	80 91 b1 09 	lds	r24, 0x09B1
    2642:	85 ff       	sbrs	r24, 5
    2644:	fc cf       	rjmp	.-8      	; 0x263e <main+0xda6>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2646:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    264a:	80 91 b1 09 	lds	r24, 0x09B1
    264e:	85 ff       	sbrs	r24, 5
    2650:	fc cf       	rjmp	.-8      	; 0x264a <main+0xdb2>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2652:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2656:	80 91 b1 09 	lds	r24, 0x09B1
    265a:	85 ff       	sbrs	r24, 5
    265c:	fc cf       	rjmp	.-8      	; 0x2656 <main+0xdbe>
    265e:	5b c2       	rjmp	.+1206   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2660:	80 91 b1 09 	lds	r24, 0x09B1
    2664:	85 ff       	sbrs	r24, 5
    2666:	fc cf       	rjmp	.-8      	; 0x2660 <main+0xdc8>
    2668:	00 93 b0 09 	sts	0x09B0, r16
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    266c:	80 eb       	ldi	r24, 0xB0	; 176
    266e:	99 e0       	ldi	r25, 0x09	; 9
    2670:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2674:	9c 01       	movw	r18, r24
    2676:	6c 01       	movw	r12, r24
						if(templ == 256) {
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	80 30       	cpi	r24, 0x00	; 0
    267c:	94 07       	cpc	r25, r20
    267e:	89 f4       	brne	.+34     	; 0x26a2 <main+0xe0a>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2680:	80 91 b1 09 	lds	r24, 0x09B1
    2684:	85 ff       	sbrs	r24, 5
    2686:	fc cf       	rjmp	.-8      	; 0x2680 <main+0xde8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2688:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    268c:	80 91 b1 09 	lds	r24, 0x09B1
    2690:	85 ff       	sbrs	r24, 5
    2692:	fc cf       	rjmp	.-8      	; 0x268c <main+0xdf4>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2694:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2698:	80 91 b1 09 	lds	r24, 0x09B1
    269c:	85 ff       	sbrs	r24, 5
    269e:	fc cf       	rjmp	.-8      	; 0x2698 <main+0xe00>
    26a0:	3a c2       	rjmp	.+1140   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26a2:	80 91 b1 09 	lds	r24, 0x09B1
    26a6:	85 ff       	sbrs	r24, 5
    26a8:	fc cf       	rjmp	.-8      	; 0x26a2 <main+0xe0a>
    26aa:	20 93 b0 09 	sts	0x09B0, r18
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						// Stores the PWM frequency for use by set_pwm()
						pwm_frequency = ((temph)<<8) + templ;
    26ae:	90 2f       	mov	r25, r16
    26b0:	88 27       	eor	r24, r24
    26b2:	28 0f       	add	r18, r24
    26b4:	39 1f       	adc	r19, r25
    26b6:	20 93 00 20 	sts	0x2000, r18
    26ba:	30 93 01 20 	sts	0x2001, r19
    26be:	41 c2       	rjmp	.+1154   	; 0x2b42 <__stack+0x343>
    26c0:	51 e0       	ldi	r21, 0x01	; 1
    26c2:	50 93 00 0a 	sts	0x0A00, r21
	
	// Turn on single slope pwm waveform generation
	TCE0.CTRLB = TC_WGMODE_SS_gc;
    26c6:	23 e0       	ldi	r18, 0x03	; 3
    26c8:	f2 01       	movw	r30, r4
    26ca:	21 83       	std	Z+1, r18	; 0x01
	// Turn off other registers in case they were set by IR read
	TCE0.CTRLD = 0x00;
    26cc:	13 82       	std	Z+3, r1	; 0x03
	// Set frequency of the PWM signal
	TCE0.PERBUF = pwm_frequency;
    26ce:	80 91 00 20 	lds	r24, 0x2000
    26d2:	90 91 01 20 	lds	r25, 0x2001
    26d6:	86 ab       	std	Z+54, r24	; 0x36
    26d8:	97 ab       	std	Z+55, r25	; 0x37
						break;
					// Set PWM duty cycle for a specific port
					case 'p':
						set_pwm();
						temph = uart_getchar_timeout(&BT_USART);
    26da:	80 eb       	ldi	r24, 0xB0	; 176
    26dc:	99 e0       	ldi	r25, 0x09	; 9
    26de:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    26e2:	9c 01       	movw	r18, r24
						if(temph == 256) {
    26e4:	41 e0       	ldi	r20, 0x01	; 1
    26e6:	80 30       	cpi	r24, 0x00	; 0
    26e8:	94 07       	cpc	r25, r20
    26ea:	89 f4       	brne	.+34     	; 0x270e <main+0xe76>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26ec:	80 91 b1 09 	lds	r24, 0x09B1
    26f0:	85 ff       	sbrs	r24, 5
    26f2:	fc cf       	rjmp	.-8      	; 0x26ec <main+0xe54>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    26f4:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    26f8:	80 91 b1 09 	lds	r24, 0x09B1
    26fc:	85 ff       	sbrs	r24, 5
    26fe:	fc cf       	rjmp	.-8      	; 0x26f8 <main+0xe60>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2700:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2704:	80 91 b1 09 	lds	r24, 0x09B1
    2708:	85 ff       	sbrs	r24, 5
    270a:	fc cf       	rjmp	.-8      	; 0x2704 <main+0xe6c>
    270c:	04 c2       	rjmp	.+1032   	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    270e:	80 91 b1 09 	lds	r24, 0x09B1
    2712:	85 ff       	sbrs	r24, 5
    2714:	fc cf       	rjmp	.-8      	; 0x270e <main+0xe76>
    2716:	20 93 b0 09 	sts	0x09B0, r18
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
							if(temph == '0') {				
    271a:	20 33       	cpi	r18, 0x30	; 48
    271c:	31 05       	cpc	r19, r1
    271e:	09 f0       	breq	.+2      	; 0x2722 <main+0xe8a>
    2720:	51 c0       	rjmp	.+162    	; 0x27c4 <main+0xf2c>
								temph = uart_getchar_timeout(&BT_USART);
    2722:	80 eb       	ldi	r24, 0xB0	; 176
    2724:	99 e0       	ldi	r25, 0x09	; 9
    2726:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    272a:	8c 01       	movw	r16, r24
								if(temph == 256) {
    272c:	51 e0       	ldi	r21, 0x01	; 1
    272e:	80 30       	cpi	r24, 0x00	; 0
    2730:	95 07       	cpc	r25, r21
    2732:	89 f4       	brne	.+34     	; 0x2756 <main+0xebe>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2734:	80 91 b1 09 	lds	r24, 0x09B1
    2738:	85 ff       	sbrs	r24, 5
    273a:	fc cf       	rjmp	.-8      	; 0x2734 <main+0xe9c>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    273c:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2740:	80 91 b1 09 	lds	r24, 0x09B1
    2744:	85 ff       	sbrs	r24, 5
    2746:	fc cf       	rjmp	.-8      	; 0x2740 <main+0xea8>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2748:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    274c:	80 91 b1 09 	lds	r24, 0x09B1
    2750:	85 ff       	sbrs	r24, 5
    2752:	fc cf       	rjmp	.-8      	; 0x274c <main+0xeb4>
    2754:	e0 c1       	rjmp	.+960    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2756:	80 91 b1 09 	lds	r24, 0x09B1
    275a:	85 ff       	sbrs	r24, 5
    275c:	fc cf       	rjmp	.-8      	; 0x2756 <main+0xebe>
    275e:	00 93 b0 09 	sts	0x09B0, r16
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
								}
								templ = uart_getchar_timeout(&BT_USART);
    2762:	80 eb       	ldi	r24, 0xB0	; 176
    2764:	99 e0       	ldi	r25, 0x09	; 9
    2766:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    276a:	9c 01       	movw	r18, r24
    276c:	6c 01       	movw	r12, r24
								if(templ == 256) {
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	80 30       	cpi	r24, 0x00	; 0
    2772:	96 07       	cpc	r25, r22
    2774:	89 f4       	brne	.+34     	; 0x2798 <main+0xf00>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2776:	80 91 b1 09 	lds	r24, 0x09B1
    277a:	85 ff       	sbrs	r24, 5
    277c:	fc cf       	rjmp	.-8      	; 0x2776 <main+0xede>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    277e:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2782:	80 91 b1 09 	lds	r24, 0x09B1
    2786:	85 ff       	sbrs	r24, 5
    2788:	fc cf       	rjmp	.-8      	; 0x2782 <main+0xeea>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    278a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    278e:	80 91 b1 09 	lds	r24, 0x09B1
    2792:	85 ff       	sbrs	r24, 5
    2794:	fc cf       	rjmp	.-8      	; 0x278e <main+0xef6>
    2796:	bf c1       	rjmp	.+894    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2798:	80 91 b1 09 	lds	r24, 0x09B1
    279c:	85 ff       	sbrs	r24, 5
    279e:	fc cf       	rjmp	.-8      	; 0x2798 <main+0xf00>
    27a0:	20 93 b0 09 	sts	0x09B0, r18
									break;
								}
								else {
									uart_putchar(&BT_USART, templ);
								}
								duty = ((temph)<<8) + templ;
    27a4:	90 2f       	mov	r25, r16
    27a6:	88 27       	eor	r24, r24
    27a8:	28 0f       	add	r18, r24
    27aa:	39 1f       	adc	r19, r25
}

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm0(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCCEN_bm;
    27ac:	80 91 01 0a 	lds	r24, 0x0A01
    27b0:	80 64       	ori	r24, 0x40	; 64
    27b2:	f2 01       	movw	r30, r4
    27b4:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN2_bm;
    27b6:	f4 e0       	ldi	r31, 0x04	; 4
    27b8:	f0 93 81 06 	sts	0x0681, r31
	TCE0.CCC = duty;
    27bc:	f2 01       	movw	r30, r4
    27be:	24 a7       	std	Z+44, r18	; 0x2c
    27c0:	35 a7       	std	Z+45, r19	; 0x2d
    27c2:	bf c1       	rjmp	.+894    	; 0x2b42 <__stack+0x343>
								set_pwm0(duty);
							}
							else if(temph == '1') {				
    27c4:	21 33       	cpi	r18, 0x31	; 49
    27c6:	31 05       	cpc	r19, r1
    27c8:	09 f0       	breq	.+2      	; 0x27cc <main+0xf34>
    27ca:	bb c1       	rjmp	.+886    	; 0x2b42 <__stack+0x343>
								temph = uart_getchar_timeout(&BT_USART);
    27cc:	80 eb       	ldi	r24, 0xB0	; 176
    27ce:	99 e0       	ldi	r25, 0x09	; 9
    27d0:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    27d4:	8c 01       	movw	r16, r24
								if(temph == 256) {
    27d6:	f1 e0       	ldi	r31, 0x01	; 1
    27d8:	80 30       	cpi	r24, 0x00	; 0
    27da:	9f 07       	cpc	r25, r31
    27dc:	89 f4       	brne	.+34     	; 0x2800 <__stack+0x1>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    27de:	80 91 b1 09 	lds	r24, 0x09B1
    27e2:	85 ff       	sbrs	r24, 5
    27e4:	fc cf       	rjmp	.-8      	; 0x27de <main+0xf46>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    27e6:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    27ea:	80 91 b1 09 	lds	r24, 0x09B1
    27ee:	85 ff       	sbrs	r24, 5
    27f0:	fc cf       	rjmp	.-8      	; 0x27ea <main+0xf52>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    27f2:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    27f6:	80 91 b1 09 	lds	r24, 0x09B1
    27fa:	85 ff       	sbrs	r24, 5
    27fc:	fc cf       	rjmp	.-8      	; 0x27f6 <main+0xf5e>
    27fe:	8b c1       	rjmp	.+790    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2800:	80 91 b1 09 	lds	r24, 0x09B1
    2804:	85 ff       	sbrs	r24, 5
    2806:	fc cf       	rjmp	.-8      	; 0x2800 <__stack+0x1>
    2808:	00 93 b0 09 	sts	0x09B0, r16
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
								}
								templ = uart_getchar_timeout(&BT_USART);
    280c:	80 eb       	ldi	r24, 0xB0	; 176
    280e:	99 e0       	ldi	r25, 0x09	; 9
    2810:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2814:	9c 01       	movw	r18, r24
    2816:	6c 01       	movw	r12, r24
								if(templ == 256) {
    2818:	41 e0       	ldi	r20, 0x01	; 1
    281a:	80 30       	cpi	r24, 0x00	; 0
    281c:	94 07       	cpc	r25, r20
    281e:	89 f4       	brne	.+34     	; 0x2842 <__stack+0x43>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2820:	80 91 b1 09 	lds	r24, 0x09B1
    2824:	85 ff       	sbrs	r24, 5
    2826:	fc cf       	rjmp	.-8      	; 0x2820 <__stack+0x21>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2828:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    282c:	80 91 b1 09 	lds	r24, 0x09B1
    2830:	85 ff       	sbrs	r24, 5
    2832:	fc cf       	rjmp	.-8      	; 0x282c <__stack+0x2d>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2834:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2838:	80 91 b1 09 	lds	r24, 0x09B1
    283c:	85 ff       	sbrs	r24, 5
    283e:	fc cf       	rjmp	.-8      	; 0x2838 <__stack+0x39>
    2840:	6a c1       	rjmp	.+724    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2842:	80 91 b1 09 	lds	r24, 0x09B1
    2846:	85 ff       	sbrs	r24, 5
    2848:	fc cf       	rjmp	.-8      	; 0x2842 <__stack+0x43>
    284a:	20 93 b0 09 	sts	0x09B0, r18
									break;
								}
								else {
									uart_putchar(&BT_USART, templ);
								}
								duty = ((temph)<<8) + templ;
    284e:	90 2f       	mov	r25, r16
    2850:	88 27       	eor	r24, r24
    2852:	28 0f       	add	r18, r24
    2854:	39 1f       	adc	r19, r25
}

// Sets up a waveform at a given duty cycle. Duty cycle variable depends on frequency (see:
// http://www.brainlinksystem.com/brainlink-hardware-description#commands
void set_pwm1(unsigned int duty) {
	TCE0.CTRLB |= TC0_CCDEN_bm;
    2856:	80 91 01 0a 	lds	r24, 0x0A01
    285a:	80 68       	ori	r24, 0x80	; 128
    285c:	f2 01       	movw	r30, r4
    285e:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRSET = PIN3_bm;
    2860:	f8 e0       	ldi	r31, 0x08	; 8
    2862:	f0 93 81 06 	sts	0x0681, r31
	TCE0.CCD = duty;
    2866:	f2 01       	movw	r30, r4
    2868:	26 a7       	std	Z+46, r18	; 0x2e
    286a:	37 a7       	std	Z+47, r19	; 0x2f
    286c:	6a c1       	rjmp	.+724    	; 0x2b42 <__stack+0x343>
							}
						}
						break;
					// Set DAC voltage on one of the two DAC ports
					case 'd':
						temph = uart_getchar_timeout(&BT_USART);
    286e:	80 eb       	ldi	r24, 0xB0	; 176
    2870:	99 e0       	ldi	r25, 0x09	; 9
    2872:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2876:	9c 01       	movw	r18, r24
						if(temph == 256) {
    2878:	f1 e0       	ldi	r31, 0x01	; 1
    287a:	80 30       	cpi	r24, 0x00	; 0
    287c:	9f 07       	cpc	r25, r31
    287e:	89 f4       	brne	.+34     	; 0x28a2 <__stack+0xa3>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2880:	80 91 b1 09 	lds	r24, 0x09B1
    2884:	85 ff       	sbrs	r24, 5
    2886:	fc cf       	rjmp	.-8      	; 0x2880 <__stack+0x81>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2888:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    288c:	80 91 b1 09 	lds	r24, 0x09B1
    2890:	85 ff       	sbrs	r24, 5
    2892:	fc cf       	rjmp	.-8      	; 0x288c <__stack+0x8d>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2894:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2898:	80 91 b1 09 	lds	r24, 0x09B1
    289c:	85 ff       	sbrs	r24, 5
    289e:	fc cf       	rjmp	.-8      	; 0x2898 <__stack+0x99>
    28a0:	3a c1       	rjmp	.+628    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28a2:	80 91 b1 09 	lds	r24, 0x09B1
    28a6:	85 ff       	sbrs	r24, 5
    28a8:	fc cf       	rjmp	.-8      	; 0x28a2 <__stack+0xa3>
    28aa:	20 93 b0 09 	sts	0x09B0, r18
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
							if(temph == '0') {				
    28ae:	20 33       	cpi	r18, 0x30	; 48
    28b0:	31 05       	cpc	r19, r1
    28b2:	61 f5       	brne	.+88     	; 0x290c <__stack+0x10d>
								temph = uart_getchar_timeout(&BT_USART);
    28b4:	80 eb       	ldi	r24, 0xB0	; 176
    28b6:	99 e0       	ldi	r25, 0x09	; 9
    28b8:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
								if(temph == 256) {
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	80 30       	cpi	r24, 0x00	; 0
    28c0:	94 07       	cpc	r25, r20
    28c2:	89 f4       	brne	.+34     	; 0x28e6 <__stack+0xe7>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    28c4:	80 91 b1 09 	lds	r24, 0x09B1
    28c8:	85 ff       	sbrs	r24, 5
    28ca:	fc cf       	rjmp	.-8      	; 0x28c4 <__stack+0xc5>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28cc:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    28d0:	80 91 b1 09 	lds	r24, 0x09B1
    28d4:	85 ff       	sbrs	r24, 5
    28d6:	fc cf       	rjmp	.-8      	; 0x28d0 <__stack+0xd1>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28d8:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    28dc:	80 91 b1 09 	lds	r24, 0x09B1
    28e0:	85 ff       	sbrs	r24, 5
    28e2:	fc cf       	rjmp	.-8      	; 0x28dc <__stack+0xdd>
    28e4:	18 c1       	rjmp	.+560    	; 0x2b16 <__stack+0x317>
									uart_putchar(&BT_USART, 'R');
									uart_putchar(&BT_USART, 'R');
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
    28e6:	98 2f       	mov	r25, r24
    28e8:	80 91 b1 09 	lds	r24, 0x09B1
    28ec:	85 ff       	sbrs	r24, 5
    28ee:	fc cf       	rjmp	.-8      	; 0x28e8 <__stack+0xe9>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    28f0:	90 93 b0 09 	sts	0x09B0, r25
}

// Sets DAC Ch0
void set_dac0(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH0EN_bm;
    28f4:	80 91 20 03 	lds	r24, 0x0320
    28f8:	84 60       	ori	r24, 0x04	; 4
    28fa:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register to be open
	while(!(DACB.STATUS & DAC_CH0DRE_bm));
    28fe:	80 91 25 03 	lds	r24, 0x0325
    2902:	80 ff       	sbrs	r24, 0
    2904:	fc cf       	rjmp	.-8      	; 0x28fe <__stack+0xff>
	
	DACB.CH0DATAH = val;
    2906:	90 93 39 03 	sts	0x0339, r25
    290a:	1b c1       	rjmp	.+566    	; 0x2b42 <__stack+0x343>
									set_dac0(temph);						
								}
							}
							else if(temph == '1') {				
    290c:	21 33       	cpi	r18, 0x31	; 49
    290e:	31 05       	cpc	r19, r1
    2910:	09 f0       	breq	.+2      	; 0x2914 <__stack+0x115>
    2912:	17 c1       	rjmp	.+558    	; 0x2b42 <__stack+0x343>
								temph = uart_getchar_timeout(&BT_USART);
    2914:	80 eb       	ldi	r24, 0xB0	; 176
    2916:	99 e0       	ldi	r25, 0x09	; 9
    2918:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
								if(temph == 256) {
    291c:	51 e0       	ldi	r21, 0x01	; 1
    291e:	80 30       	cpi	r24, 0x00	; 0
    2920:	95 07       	cpc	r25, r21
    2922:	89 f4       	brne	.+34     	; 0x2946 <__stack+0x147>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2924:	80 91 b1 09 	lds	r24, 0x09B1
    2928:	85 ff       	sbrs	r24, 5
    292a:	fc cf       	rjmp	.-8      	; 0x2924 <__stack+0x125>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    292c:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2930:	80 91 b1 09 	lds	r24, 0x09B1
    2934:	85 ff       	sbrs	r24, 5
    2936:	fc cf       	rjmp	.-8      	; 0x2930 <__stack+0x131>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2938:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    293c:	80 91 b1 09 	lds	r24, 0x09B1
    2940:	85 ff       	sbrs	r24, 5
    2942:	fc cf       	rjmp	.-8      	; 0x293c <__stack+0x13d>
    2944:	e8 c0       	rjmp	.+464    	; 0x2b16 <__stack+0x317>
									uart_putchar(&BT_USART, 'R');
									uart_putchar(&BT_USART, 'R');
									break;
								}
								else {
									uart_putchar(&BT_USART, temph);
    2946:	98 2f       	mov	r25, r24
    2948:	80 91 b1 09 	lds	r24, 0x09B1
    294c:	85 ff       	sbrs	r24, 5
    294e:	fc cf       	rjmp	.-8      	; 0x2948 <__stack+0x149>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2950:	90 93 b0 09 	sts	0x09B0, r25
}

// Sets DAC Ch1
void set_dac1(uint8_t val) {
	// enable the DAC
	DACB.CTRLA |= DAC_CH1EN_bm;
    2954:	80 91 20 03 	lds	r24, 0x0320
    2958:	88 60       	ori	r24, 0x08	; 8
    295a:	80 93 20 03 	sts	0x0320, r24
	
	// Wait for data register empty
	while(!(DACB.STATUS & DAC_CH1DRE_bm));
    295e:	80 91 25 03 	lds	r24, 0x0325
    2962:	81 ff       	sbrs	r24, 1
    2964:	fc cf       	rjmp	.-8      	; 0x295e <__stack+0x15f>
	
	DACB.CH1DATAH = val;
    2966:	90 93 3b 03 	sts	0x033B, r25
    296a:	eb c0       	rjmp	.+470    	; 0x2b42 <__stack+0x343>
					case 'Q':
						exit = 1;
						break;
					// Configures the baud rate of the auxiliary UART
					case 'C':
						temph = uart_getchar_timeout(&BT_USART);
    296c:	80 eb       	ldi	r24, 0xB0	; 176
    296e:	99 e0       	ldi	r25, 0x09	; 9
    2970:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2974:	7c 01       	movw	r14, r24
						if(temph == 256) {
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	80 30       	cpi	r24, 0x00	; 0
    297a:	96 07       	cpc	r25, r22
    297c:	89 f4       	brne	.+34     	; 0x29a0 <__stack+0x1a1>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    297e:	80 91 b1 09 	lds	r24, 0x09B1
    2982:	85 ff       	sbrs	r24, 5
    2984:	fc cf       	rjmp	.-8      	; 0x297e <__stack+0x17f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2986:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    298a:	80 91 b1 09 	lds	r24, 0x09B1
    298e:	85 ff       	sbrs	r24, 5
    2990:	fc cf       	rjmp	.-8      	; 0x298a <__stack+0x18b>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2992:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2996:	80 91 b1 09 	lds	r24, 0x09B1
    299a:	85 ff       	sbrs	r24, 5
    299c:	fc cf       	rjmp	.-8      	; 0x2996 <__stack+0x197>
    299e:	bb c0       	rjmp	.+374    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29a0:	80 91 b1 09 	lds	r24, 0x09B1
    29a4:	85 ff       	sbrs	r24, 5
    29a6:	fc cf       	rjmp	.-8      	; 0x29a0 <__stack+0x1a1>
    29a8:	e0 92 b0 09 	sts	0x09B0, r14
							break;
						}
						else {
							uart_putchar(&BT_USART, temph);
						}
						templ = uart_getchar_timeout(&BT_USART);
    29ac:	80 eb       	ldi	r24, 0xB0	; 176
    29ae:	99 e0       	ldi	r25, 0x09	; 9
    29b0:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    29b4:	8c 01       	movw	r16, r24
    29b6:	6c 01       	movw	r12, r24
						if(templ == 256) {
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	00 30       	cpi	r16, 0x00	; 0
    29bc:	18 07       	cpc	r17, r24
    29be:	89 f4       	brne	.+34     	; 0x29e2 <__stack+0x1e3>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    29c0:	80 91 b1 09 	lds	r24, 0x09B1
    29c4:	85 ff       	sbrs	r24, 5
    29c6:	fc cf       	rjmp	.-8      	; 0x29c0 <__stack+0x1c1>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29c8:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    29cc:	80 91 b1 09 	lds	r24, 0x09B1
    29d0:	85 ff       	sbrs	r24, 5
    29d2:	fc cf       	rjmp	.-8      	; 0x29cc <__stack+0x1cd>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29d4:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    29d8:	80 91 b1 09 	lds	r24, 0x09B1
    29dc:	85 ff       	sbrs	r24, 5
    29de:	fc cf       	rjmp	.-8      	; 0x29d8 <__stack+0x1d9>
    29e0:	9a c0       	rjmp	.+308    	; 0x2b16 <__stack+0x317>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    29e2:	80 91 b1 09 	lds	r24, 0x09B1
    29e6:	85 ff       	sbrs	r24, 5
    29e8:	fc cf       	rjmp	.-8      	; 0x29e2 <__stack+0x1e3>
    29ea:	00 93 b0 09 	sts	0x09B0, r16
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
						templ = uart_getchar_timeout(&BT_USART);
    29ee:	80 eb       	ldi	r24, 0xB0	; 176
    29f0:	99 e0       	ldi	r25, 0x09	; 9
    29f2:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    29f6:	9c 01       	movw	r18, r24
						if(templ == 256) {
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	20 30       	cpi	r18, 0x00	; 0
    29fc:	39 07       	cpc	r19, r25
    29fe:	99 f4       	brne	.+38     	; 0x2a26 <__stack+0x227>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a00:	80 91 b1 09 	lds	r24, 0x09B1
    2a04:	85 ff       	sbrs	r24, 5
    2a06:	fc cf       	rjmp	.-8      	; 0x2a00 <__stack+0x201>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a08:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a0c:	80 91 b1 09 	lds	r24, 0x09B1
    2a10:	85 ff       	sbrs	r24, 5
    2a12:	fc cf       	rjmp	.-8      	; 0x2a0c <__stack+0x20d>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a14:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a18:	80 91 b1 09 	lds	r24, 0x09B1
    2a1c:	85 ff       	sbrs	r24, 5
    2a1e:	fc cf       	rjmp	.-8      	; 0x2a18 <__stack+0x219>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a20:	90 92 b0 09 	sts	0x09B0, r9
    2a24:	1b c0       	rjmp	.+54     	; 0x2a5c <__stack+0x25d>
							uart_putchar(&BT_USART, 'R');
							uart_putchar(&BT_USART, 'R');
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
    2a26:	42 2f       	mov	r20, r18
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a28:	80 91 b1 09 	lds	r24, 0x09B1
    2a2c:	85 ff       	sbrs	r24, 5
    2a2e:	fc cf       	rjmp	.-8      	; 0x2a28 <__stack+0x229>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a30:	40 93 b0 09 	sts	0x09B0, r20
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a34:	80 91 b1 09 	lds	r24, 0x09B1
    2a38:	85 ff       	sbrs	r24, 5
    2a3a:	fc cf       	rjmp	.-8      	; 0x2a34 <__stack+0x235>
							break;
						}
						else {
							uart_putchar(&BT_USART, templ);
						}
						baud = ((temph)<<8) + templ;
    2a3c:	9e 2d       	mov	r25, r14
    2a3e:	88 27       	eor	r24, r24
    2a40:	80 0f       	add	r24, r16
    2a42:	91 1f       	adc	r25, r17
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a44:	40 93 b0 09 	sts	0x09B0, r20
}

// Sets the baud rate if the aux serial port is already set up
void set_aux_baud_rate(int baud, char scale) 
{
	USART_Baudrate_Set(&AUX_USART, baud, scale);
    2a48:	80 93 a6 08 	sts	0x08A6, r24
    2a4c:	42 95       	swap	r20
    2a4e:	40 7f       	andi	r20, 0xF0	; 240
    2a50:	89 2f       	mov	r24, r25
    2a52:	99 0f       	add	r25, r25
    2a54:	99 0b       	sbc	r25, r25
    2a56:	48 2b       	or	r20, r24
    2a58:	40 93 a7 08 	sts	0x08A7, r20
    2a5c:	69 01       	movw	r12, r18
    2a5e:	71 c0       	rjmp	.+226    	; 0x2b42 <__stack+0x343>
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    2a60:	e0 91 ee 23 	lds	r30, 0x23EE
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	e5 51       	subi	r30, 0x15	; 21
    2a68:	fd 4d       	sbci	r31, 0xDD	; 221
    2a6a:	92 81       	ldd	r25, Z+2	; 0x02

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    2a6c:	80 91 ee 23 	lds	r24, 0x23EE
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	80 93 ee 23 	sts	0x23EE, r24
						break;
					// Transmits over bluetooth characters received by auxiliary serial
					case 'r':
						count_buff = 0;
						while(USART_RXBufferData_Available(&AUX_data)) {
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
    2a76:	e1 e0       	ldi	r30, 0x01	; 1
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	ec 0f       	add	r30, r28
    2a7c:	fd 1f       	adc	r31, r29
    2a7e:	e2 0f       	add	r30, r18
    2a80:	f1 1d       	adc	r31, r1
    2a82:	90 83       	st	Z, r25
							count_buff++;
    2a84:	2f 5f       	subi	r18, 0xFF	; 255
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    2a86:	90 91 ed 23 	lds	r25, 0x23ED
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    2a8a:	80 91 ee 23 	lds	r24, 0x23EE
						set_aux_baud_rate(baud, scale);
						break;
					// Transmits over bluetooth characters received by auxiliary serial
					case 'r':
						count_buff = 0;
						while(USART_RXBufferData_Available(&AUX_data)) {
    2a8e:	98 17       	cp	r25, r24
    2a90:	39 f7       	brne	.-50     	; 0x2a60 <__stack+0x261>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2a92:	80 91 b1 09 	lds	r24, 0x09B1
    2a96:	85 ff       	sbrs	r24, 5
    2a98:	fc cf       	rjmp	.-8      	; 0x2a92 <__stack+0x293>
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
							count_buff++;
						}
						uart_putchar(&BT_USART, count_buff+1);
    2a9a:	2f 5f       	subi	r18, 0xFF	; 255
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2a9c:	20 93 b0 09 	sts	0x09B0, r18
    2aa0:	21 50       	subi	r18, 0x01	; 1
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	31 96       	adiw	r30, 0x01	; 1
						for(int i = 0; i < count_buff; i++) {
    2aa6:	af 01       	movw	r20, r30
    2aa8:	42 0f       	add	r20, r18
    2aaa:	51 1d       	adc	r21, r1
    2aac:	9a 01       	movw	r18, r20
    2aae:	08 c0       	rjmp	.+16     	; 0x2ac0 <__stack+0x2c1>
							uart_putchar(&BT_USART, temp_array[i]);
    2ab0:	90 81       	ld	r25, Z
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2ab2:	80 91 b1 09 	lds	r24, 0x09B1
    2ab6:	85 ff       	sbrs	r24, 5
    2ab8:	fc cf       	rjmp	.-8      	; 0x2ab2 <__stack+0x2b3>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2aba:	90 93 b0 09 	sts	0x09B0, r25
    2abe:	31 96       	adiw	r30, 0x01	; 1
						while(USART_RXBufferData_Available(&AUX_data)) {
							temp_array[count_buff]= USART_RXBuffer_GetByte(&AUX_data);
							count_buff++;
						}
						uart_putchar(&BT_USART, count_buff+1);
						for(int i = 0; i < count_buff; i++) {
    2ac0:	e2 17       	cp	r30, r18
    2ac2:	f3 07       	cpc	r31, r19
    2ac4:	a9 f7       	brne	.-22     	; 0x2ab0 <__stack+0x2b1>
    2ac6:	3d c0       	rjmp	.+122    	; 0x2b42 <__stack+0x343>
							uart_putchar(&BT_USART, temp_array[i]);
						}
						break;
					// Transmit a stream of characters from bluetooth to auxiliary serial
					case 't':
						temph= uart_getchar_timeout(&BT_USART);
    2ac8:	80 eb       	ldi	r24, 0xB0	; 176
    2aca:	99 e0       	ldi	r25, 0x09	; 9
    2acc:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2ad0:	8c 01       	movw	r16, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2ad2:	80 91 b1 09 	lds	r24, 0x09B1
    2ad6:	85 ff       	sbrs	r24, 5
    2ad8:	fc cf       	rjmp	.-8      	; 0x2ad2 <__stack+0x2d3>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2ada:	00 93 b0 09 	sts	0x09B0, r16
    2ade:	ee 24       	eor	r14, r14
    2ae0:	ff 24       	eor	r15, r15
    2ae2:	2c c0       	rjmp	.+88     	; 0x2b3c <__stack+0x33d>
						uart_putchar(&BT_USART, temph);
						for(int count = 0; count < temph; count++) {	
							templ= uart_getchar_timeout(&BT_USART);
    2ae4:	80 eb       	ldi	r24, 0xB0	; 176
    2ae6:	99 e0       	ldi	r25, 0x09	; 9
    2ae8:	0e 94 92 01 	call	0x324	; 0x324 <uart_getchar_timeout>
    2aec:	6c 01       	movw	r12, r24
							
							if(templ == 256) {
    2aee:	51 e0       	ldi	r21, 0x01	; 1
    2af0:	80 30       	cpi	r24, 0x00	; 0
    2af2:	95 07       	cpc	r25, r21
    2af4:	99 f4       	brne	.+38     	; 0x2b1c <__stack+0x31d>
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2af6:	80 91 b1 09 	lds	r24, 0x09B1
    2afa:	85 ff       	sbrs	r24, 5
    2afc:	fc cf       	rjmp	.-8      	; 0x2af6 <__stack+0x2f7>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2afe:	80 92 b0 09 	sts	0x09B0, r8
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b02:	80 91 b1 09 	lds	r24, 0x09B1
    2b06:	85 ff       	sbrs	r24, 5
    2b08:	fc cf       	rjmp	.-8      	; 0x2b02 <__stack+0x303>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b0a:	90 92 b0 09 	sts	0x09B0, r9
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b0e:	80 91 b1 09 	lds	r24, 0x09B1
    2b12:	85 ff       	sbrs	r24, 5
    2b14:	fc cf       	rjmp	.-8      	; 0x2b0e <__stack+0x30f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b16:	90 92 b0 09 	sts	0x09B0, r9
    2b1a:	13 c0       	rjmp	.+38     	; 0x2b42 <__stack+0x343>
								uart_putchar(&BT_USART, 'R');
								uart_putchar(&BT_USART, 'R');
								break;
							}
							else {
								uart_putchar(&BT_USART, templ);
    2b1c:	98 2f       	mov	r25, r24
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b1e:	80 91 b1 09 	lds	r24, 0x09B1
    2b22:	85 ff       	sbrs	r24, 5
    2b24:	fc cf       	rjmp	.-8      	; 0x2b1e <__stack+0x31f>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b26:	90 93 b0 09 	sts	0x09B0, r25
void uart_putchar(USART_t * usart, char c) {

	do{
		/* Wait until it is possible to put data into TX data register.
		 * NOTE: If TXDataRegister never becomes empty this will be a DEADLOCK. */
	}while((usart->STATUS & USART_DREIF_bm) == 0);
    2b2a:	80 91 a1 08 	lds	r24, 0x08A1
    2b2e:	85 ff       	sbrs	r24, 5
    2b30:	fc cf       	rjmp	.-8      	; 0x2b2a <__stack+0x32b>
	//while(!USART_IsTXDataRegisterEmpty(&usart));
	usart->DATA = c;
    2b32:	90 93 a0 08 	sts	0x08A0, r25
						break;
					// Transmit a stream of characters from bluetooth to auxiliary serial
					case 't':
						temph= uart_getchar_timeout(&BT_USART);
						uart_putchar(&BT_USART, temph);
						for(int count = 0; count < temph; count++) {	
    2b36:	08 94       	sec
    2b38:	e1 1c       	adc	r14, r1
    2b3a:	f1 1c       	adc	r15, r1
    2b3c:	e0 16       	cp	r14, r16
    2b3e:	f1 06       	cpc	r15, r17
    2b40:	88 f2       	brcs	.-94     	; 0x2ae4 <__stack+0x2e5>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e0       	ldi	r26, 0x00	; 0
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	04 c0       	rjmp	.+8      	; 0x2b54 <__stack+0x355>
    2b4c:	88 a1       	ldd	r24, Y+32	; 0x20
    2b4e:	99 a1       	ldd	r25, Y+33	; 0x21
    2b50:	aa a1       	ldd	r26, Y+34	; 0x22
    2b52:	bb a1       	ldd	r27, Y+35	; 0x23
			}
			_delay_ms(500);
		}
	
		// Active part of the program - listens for commands and responds as necessary
		while(exit == 0) {
    2b54:	28 a1       	ldd	r18, Y+32	; 0x20
    2b56:	39 a1       	ldd	r19, Y+33	; 0x21
    2b58:	4a a1       	ldd	r20, Y+34	; 0x22
    2b5a:	5b a1       	ldd	r21, Y+35	; 0x23
    2b5c:	21 58       	subi	r18, 0x81	; 129
    2b5e:	3b 45       	sbci	r19, 0x5B	; 91
    2b60:	44 40       	sbci	r20, 0x04	; 4
    2b62:	52 40       	sbci	r21, 0x02	; 2
    2b64:	14 f0       	brlt	.+4      	; 0x2b6a <__stack+0x36b>
    2b66:	0c 94 85 0c 	jmp	0x190a	; 0x190a <main+0x72>
    2b6a:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <main+0x100>

00002b6e <__divmodhi4>:
    2b6e:	97 fb       	bst	r25, 7
    2b70:	09 2e       	mov	r0, r25
    2b72:	07 26       	eor	r0, r23
    2b74:	0a d0       	rcall	.+20     	; 0x2b8a <__divmodhi4_neg1>
    2b76:	77 fd       	sbrc	r23, 7
    2b78:	04 d0       	rcall	.+8      	; 0x2b82 <__divmodhi4_neg2>
    2b7a:	0c d0       	rcall	.+24     	; 0x2b94 <__udivmodhi4>
    2b7c:	06 d0       	rcall	.+12     	; 0x2b8a <__divmodhi4_neg1>
    2b7e:	00 20       	and	r0, r0
    2b80:	1a f4       	brpl	.+6      	; 0x2b88 <__divmodhi4_exit>

00002b82 <__divmodhi4_neg2>:
    2b82:	70 95       	com	r23
    2b84:	61 95       	neg	r22
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255

00002b88 <__divmodhi4_exit>:
    2b88:	08 95       	ret

00002b8a <__divmodhi4_neg1>:
    2b8a:	f6 f7       	brtc	.-4      	; 0x2b88 <__divmodhi4_exit>
    2b8c:	90 95       	com	r25
    2b8e:	81 95       	neg	r24
    2b90:	9f 4f       	sbci	r25, 0xFF	; 255
    2b92:	08 95       	ret

00002b94 <__udivmodhi4>:
    2b94:	aa 1b       	sub	r26, r26
    2b96:	bb 1b       	sub	r27, r27
    2b98:	51 e1       	ldi	r21, 0x11	; 17
    2b9a:	07 c0       	rjmp	.+14     	; 0x2baa <__udivmodhi4_ep>

00002b9c <__udivmodhi4_loop>:
    2b9c:	aa 1f       	adc	r26, r26
    2b9e:	bb 1f       	adc	r27, r27
    2ba0:	a6 17       	cp	r26, r22
    2ba2:	b7 07       	cpc	r27, r23
    2ba4:	10 f0       	brcs	.+4      	; 0x2baa <__udivmodhi4_ep>
    2ba6:	a6 1b       	sub	r26, r22
    2ba8:	b7 0b       	sbc	r27, r23

00002baa <__udivmodhi4_ep>:
    2baa:	88 1f       	adc	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	5a 95       	dec	r21
    2bb0:	a9 f7       	brne	.-22     	; 0x2b9c <__udivmodhi4_loop>
    2bb2:	80 95       	com	r24
    2bb4:	90 95       	com	r25
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	08 95       	ret

00002bbc <_exit>:
    2bbc:	f8 94       	cli

00002bbe <__stop_program>:
    2bbe:	ff cf       	rjmp	.-2      	; 0x2bbe <__stop_program>
